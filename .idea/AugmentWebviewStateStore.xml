<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;b09df882-0041-49d4-8dad-89da589b016c&quot;,&quot;conversations&quot;:{&quot;e6d6a4e1-843a-4ae6-bf9f-bb9be3bf6a9d&quot;:{&quot;id&quot;:&quot;e6d6a4e1-843a-4ae6-bf9f-bb9be3bf6a9d&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T13:53:37.678Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T14:05:30.588Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;ad2fdff9-c50a-4803-ba76-15ee51602033&quot;,&quot;request_message&quot;:&quot;@LangChain 0.3请你详细讲解Data Connection（数据连接），并给出完整的可运行的代码，尽可能多的给出示例&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;mention&quot;,&quot;attrs&quot;:{&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;label&quot;:&quot;LangChain 0.3&quot;,&quot;data&quot;:{&quot;label&quot;:&quot;LangChain 0.3&quot;,&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;externalSource&quot;:{&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;title&quot;:&quot;Documentation for LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;sourceType&quot;:&quot;&quot;},&quot;type&quot;:&quot;item&quot;}}},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;请你详细讲解Data Connection（数据连接），并给出完整的可运行的代码，尽可能多的给出示例&quot;}]}]},&quot;mentioned_items&quot;:[{&quot;label&quot;:&quot;LangChain 0.3&quot;,&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;externalSource&quot;:{&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;title&quot;:&quot;Documentation for LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;sourceType&quot;:&quot;&quot;},&quot;type&quot;:&quot;item&quot;}],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;根据检索到的文档，我来详细讲解 LangChain 0.3 中的 Data Connection（数据连接）组件，并提供完整的可运行代码示例。\n\n## Data Connection 核心组件\n\nData Connection 是 LangChain 中处理外部数据的核心模块，包含以下主要组件：\n\n1. **Document Loaders** - 文档加载器\n2. **Text Splitters** - 文本分割器  \n3. **Embedding Models** - 嵌入模型\n4. **Vector Stores** - 向量存储\n5. **Retrievers** - 检索器\n\n## 完整示例代码\n\n&lt;augment_code_snippet path=\&quot;data_connection_examples.py\&quot; mode=\&quot;EDIT\&quot;&gt;\n```python\n\&quot;\&quot;\&quot;\nLangChain 0.3 Data Connection 完整示例\n包含文档加载、文本分割、向量化、存储和检索的完整流程\n\&quot;\&quot;\&quot;\n\nimport os\nfrom typing import List, Dict, Any\nimport asyncio\n\n# 核心导入\nfrom langchain_community.document_loaders import (\n    TextLoader, \n    PyPDFLoader, \n    CSVLoader,\n    JSONLoader,\n    WebBaseLoader,\n    DirectoryLoader\n)\nfrom langchain.text_splitter import (\n    RecursiveCharacterTextSplitter,\n    CharacterTextSplitter,\n    TokenTextSplitter,\n    MarkdownHeaderTextSplitter\n)\nfrom langchain_community.embeddings import OllamaEmbeddings\nfrom langchain_community.vectorstores import (\n    FAISS,\n    Chroma,\n    Qdrant\n)\nfrom langchain_core.documents import Document\nfrom langchain.retrievers import (\n    BM25Retriever,\n    EnsembleRetriever,\n    MultiQueryRetriever\n)\nfrom langchain_ollama import ChatOllama\n\nprint(\&quot;✅ 所有库导入成功\&quot;)\n\n# 1. Document Loaders 示例\ndef document_loaders_example():\n    \&quot;\&quot;\&quot;文档加载器示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;1. Document Loaders 文档加载器示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 1.1 文本文件加载\n    print(\&quot;\\n1.1 文本文件加载\&quot;)\n    # 创建示例文本文件\n    with open(\&quot;sample.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        f.write(\&quot;\&quot;\&quot;\n        人工智能（AI）是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\n        机器学习是AI的一个子集，它使计算机能够从数据中学习而无需明确编程。\n        深度学习是机器学习的一个子集，使用神经网络来模拟人脑的工作方式。\n        \&quot;\&quot;\&quot;)\n    \n    loader = TextLoader(\&quot;sample.txt\&quot;, encoding=\&quot;utf-8\&quot;)\n    documents = loader.load()\n    print(f\&quot;加载的文档数量: {len(documents)}\&quot;)\n    print(f\&quot;文档内容预览: {documents[0].page_content[:100]}...\&quot;)\n    \n    # 1.2 CSV文件加载\n    print(\&quot;\\n1.2 CSV文件加载\&quot;)\n    import pandas as pd\n    \n    # 创建示例CSV\n    df = pd.DataFrame({\n        'name': ['张三', '李四', '王五'],\n        'age': [25, 30, 35],\n        'city': ['北京', '上海', '深圳'],\n        'description': ['软件工程师', '数据科学家', '产品经理']\n    })\n    df.to_csv(\&quot;sample.csv\&quot;, index=False, encoding=\&quot;utf-8\&quot;)\n    \n    csv_loader = CSVLoader(\&quot;sample.csv\&quot;, encoding=\&quot;utf-8\&quot;)\n    csv_docs = csv_loader.load()\n    print(f\&quot;CSV文档数量: {len(csv_docs)}\&quot;)\n    print(f\&quot;CSV文档示例: {csv_docs[0].page_content}\&quot;)\n    \n    # 1.3 JSON文件加载\n    print(\&quot;\\n1.3 JSON文件加载\&quot;)\n    import json\n    \n    sample_data = [\n        {\&quot;title\&quot;: \&quot;Python编程\&quot;, \&quot;content\&quot;: \&quot;Python是一种高级编程语言\&quot;, \&quot;category\&quot;: \&quot;技术\&quot;},\n        {\&quot;title\&quot;: \&quot;数据分析\&quot;, \&quot;content\&quot;: \&quot;数据分析是从数据中提取洞察的过程\&quot;, \&quot;category\&quot;: \&quot;数据科学\&quot;}\n    ]\n    \n    with open(\&quot;sample.json\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        json.dump(sample_data, f, ensure_ascii=False, indent=2)\n    \n    json_loader = JSONLoader(\&quot;sample.json\&quot;, jq_schema=\&quot;.[].content\&quot;)\n    json_docs = json_loader.load()\n    print(f\&quot;JSON文档数量: {len(json_docs)}\&quot;)\n    print(f\&quot;JSON文档示例: {json_docs[0].page_content}\&quot;)\n    \n    # 1.4 目录批量加载\n    print(\&quot;\\n1.4 目录批量加载\&quot;)\n    os.makedirs(\&quot;docs\&quot;, exist_ok=True)\n    \n    # 创建多个文档\n    for i in range(3):\n        with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n            f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\n    \n    dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\n    dir_docs = dir_loader.load()\n    print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\n    \n    return documents + csv_docs + json_docs + dir_docs\n\n# 2. Text Splitters 示例\ndef text_splitters_example(documents: List[Document]):\n    \&quot;\&quot;\&quot;文本分割器示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;2. Text Splitters 文本分割器示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 创建长文本用于分割\n    long_text = \&quot;\&quot;\&quot;\n    人工智能的发展历程可以追溯到20世纪50年代。当时，计算机科学家开始探索让机器模拟人类智能的可能性。\n    \n    在1956年的达特茅斯会议上，人工智能这个术语首次被正式提出。这标志着AI作为一个独立学科的诞生。\n    \n    随后的几十年里，AI经历了多次起伏。60-70年代是第一个AI春天，专家系统得到了广泛应用。\n    \n    80年代末到90年代初，由于技术限制和过高期望，AI进入了所谓的\&quot;AI冬天\&quot;。\n    \n    21世纪以来，随着大数据、云计算和深度学习的发展，AI迎来了新的春天。\n    \n    今天，AI已经在图像识别、自然语言处理、推荐系统等领域取得了突破性进展。\n    \&quot;\&quot;\&quot;\n    \n    long_doc = Document(page_content=long_text, metadata={\&quot;source\&quot;: \&quot;ai_history\&quot;})\n    \n    # 2.1 递归字符分割器（推荐）\n    print(\&quot;\\n2.1 RecursiveCharacterTextSplitter\&quot;)\n    recursive_splitter = RecursiveCharacterTextSplitter(\n        chunk_size=200,\n        chunk_overlap=50,\n        length_function=len,\n        separators=[\&quot;\\n\\n\&quot;, \&quot;\\n\&quot;, \&quot;。\&quot;, \&quot;，\&quot;, \&quot; \&quot;, \&quot;\&quot;]\n    )\n    \n    recursive_chunks = recursive_splitter.split_documents([long_doc])\n    print(f\&quot;递归分割块数: {len(recursive_chunks)}\&quot;)\n    for i, chunk in enumerate(recursive_chunks[:2]):\n        print(f\&quot;块 {i+1}: {chunk.page_content[:100]}...\&quot;)\n    \n    # 2.2 字符分割器\n    print(\&quot;\\n2.2 CharacterTextSplitter\&quot;)\n    char_splitter = CharacterTextSplitter(\n        chunk_size=300,\n        chunk_overlap=50,\n        separator=\&quot;\\n\\n\&quot;\n    )\n    \n    char_chunks = char_splitter.split_documents([long_doc])\n    print(f\&quot;字符分割块数: {len(char_chunks)}\&quot;)\n    \n    # 2.3 Token分割器\n    print(\&quot;\\n2.3 TokenTextSplitter\&quot;)\n    token_splitter = TokenTextSplitter(\n        chunk_size=100,\n        chunk_overlap=20\n    )\n    \n    token_chunks = token_splitter.split_documents([long_doc])\n    print(f\&quot;Token分割块数: {len(token_chunks)}\&quot;)\n    \n    # 2.4 Markdown分割器\n    print(\&quot;\\n2.4 MarkdownHeaderTextSplitter\&quot;)\n    markdown_text = \&quot;\&quot;\&quot;\n# 人工智能概述\n\n## 什么是人工智能\n人工智能是计算机科学的一个分支。\n\n## AI的应用领域\n\n### 自然语言处理\nNLP是AI的重要分支。\n\n### 计算机视觉\n计算机视觉让机器能够\&quot;看见\&quot;。\n\n## 未来发展\nAI将继续快速发展。\n\&quot;\&quot;\&quot;\n    \n    markdown_splitter = MarkdownHeaderTextSplitter(\n        headers_to_split_on=[\n            (\&quot;#\&quot;, \&quot;Header 1\&quot;),\n            (\&quot;##\&quot;, \&quot;Header 2\&quot;),\n            (\&quot;###\&quot;, \&quot;Header 3\&quot;),\n        ]\n    )\n    \n    md_doc = Document(page_content=markdown_text)\n    md_chunks = markdown_splitter.split_text(markdown_text)\n    print(f\&quot;Markdown分割块数: {len(md_chunks)}\&quot;)\n    \n    return recursive_chunks\n\n# 3. Embedding Models 示例\ndef embedding_models_example():\n    \&quot;\&quot;\&quot;嵌入模型示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;3. Embedding Models 嵌入模型示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 3.1 Ollama嵌入模型\n    print(\&quot;\\n3.1 Ollama嵌入模型\&quot;)\n    try:\n        embeddings = OllamaEmbeddings(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;nomic-embed-text\&quot;  # 或使用其他嵌入模型\n        )\n        \n        # 测试文本\n        texts = [\n            \&quot;人工智能是计算机科学的分支\&quot;,\n            \&quot;机器学习是AI的子集\&quot;,\n            \&quot;深度学习使用神经网络\&quot;,\n            \&quot;今天天气很好\&quot;\n        ]\n        \n        # 生成嵌入向量\n        text_embeddings = embeddings.embed_documents(texts)\n        query_embedding = embeddings.embed_query(\&quot;什么是人工智能？\&quot;)\n        \n        print(f\&quot;文档嵌入数量: {len(text_embeddings)}\&quot;)\n        print(f\&quot;嵌入向量维度: {len(text_embeddings[0])}\&quot;)\n        print(f\&quot;查询嵌入维度: {len(query_embedding)}\&quot;)\n        \n        # 计算相似度\n        import numpy as np\n        \n        def cosine_similarity(a, b):\n            return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))\n        \n        print(\&quot;\\n相似度计算:\&quot;)\n        for i, text in enumerate(texts):\n            similarity = cosine_similarity(query_embedding, text_embeddings[i])\n            print(f\&quot;'{text}' 相似度: {similarity:.4f}\&quot;)\n            \n        return embeddings\n        \n    except Exception as e:\n        print(f\&quot;Ollama嵌入模型初始化失败: {e}\&quot;)\n        print(\&quot;请确保Ollama服务正在运行并安装了嵌入模型\&quot;)\n        return None\n\n# 4. Vector Stores 示例\ndef vector_stores_example(chunks: List[Document], embeddings):\n    \&quot;\&quot;\&quot;向量存储示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;4. Vector Stores 向量存储示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    if embeddings is None:\n        print(\&quot;跳过向量存储示例（嵌入模型不可用）\&quot;)\n        return None, None\n    \n    # 4.1 FAISS向量存储\n    print(\&quot;\\n4.1 FAISS向量存储\&quot;)\n    try:\n        # 创建FAISS向量存储\n        faiss_vectorstore = FAISS.from_documents(chunks, embeddings)\n        \n        # 保存到本地\n        faiss_vectorstore.save_local(\&quot;faiss_index\&quot;)\n        print(\&quot;✅ FAISS索引已保存\&quot;)\n        \n        # 相似性搜索\n        query = \&quot;人工智能的发展\&quot;\n        similar_docs = faiss_vectorstore.similarity_search(query, k=3)\n        \n        print(f\&quot;\\n查询: '{query}'\&quot;)\n        print(\&quot;相似文档:\&quot;)\n        for i, doc in enumerate(similar_docs):\n            print(f\&quot;{i+1}. {doc.page_content[:100]}...\&quot;)\n        \n        # 带分数的相似性搜索\n        similar_docs_with_scores = faiss_vectorstore.similarity_search_with_score(query, k=3)\n        print(\&quot;\\n带分数的搜索结果:\&quot;)\n        for i, (doc, score) in enumerate(similar_docs_with_scores):\n            print(f\&quot;{i+1}. 分数: {score:.4f} - {doc.page_content[:80]}...\&quot;)\n            \n    except Exception as e:\n        print(f\&quot;FAISS创建失败: {e}\&quot;)\n        faiss_vectorstore = None\n    \n    # 4.2 Chroma向量存储\n    print(\&quot;\\n4.2 Chroma向量存储\&quot;)\n    try:\n        chroma_vectorstore = Chroma.from_documents(\n            chunks, \n            embeddings,\n            persist_directory=\&quot;./chroma_db\&quot;\n        )\n        \n        # 持久化\n        chroma_vectorstore.persist()\n        print(\&quot;✅ Chroma数据库已持久化\&quot;)\n        \n        # 搜索测试\n        chroma_results = chroma_vectorstore.similarity_search(\&quot;机器学习\&quot;, k=2)\n        print(f\&quot;Chroma搜索结果数量: {len(chroma_results)}\&quot;)\n        \n    except Exception as e:\n        print(f\&quot;Chroma创建失败: {e}\&quot;)\n        chroma_vectorstore = None\n    \n    return faiss_vectorstore, chroma_vectorstore\n\n# 5. Retrievers 示例\ndef retrievers_example(vectorstore, chunks: List[Document]):\n    \&quot;\&quot;\&quot;检索器示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;5. Retrievers 检索器示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 5.1 向量存储检索器\n    print(\&quot;\\n5.1 向量存储检索器\&quot;)\n    if vectorstore:\n        vector_retriever = vectorstore.as_retriever(\n            search_type=\&quot;similarity\&quot;,\n            search_kwargs={\&quot;k\&quot;: 3}\n        )\n        \n        results = vector_retriever.invoke(\&quot;人工智能的应用\&quot;)\n        print(f\&quot;向量检索结果数量: {len(results)}\&quot;)\n        for i, doc in enumerate(results):\n            print(f\&quot;{i+1}. {doc.page_content[:100]}...\&quot;)\n    \n    # 5.2 BM25检索器\n    print(\&quot;\\n5.2 BM25检索器\&quot;)\n    try:\n        bm25_retriever = BM25Retriever.from_documents(chunks)\n        bm25_retriever.k = 3\n        \n        bm25_results = bm25_retriever.invoke(\&quot;人工智能发展\&quot;)\n        print(f\&quot;BM25检索结果数量: {len(bm25_results)}\&quot;)\n        for i, doc in enumerate(bm25_results):\n            print(f\&quot;{i+1}. {doc.page_content[:100]}...\&quot;)\n            \n    except Exception as e:\n        print(f\&quot;BM25检索器创建失败: {e}\&quot;)\n        bm25_retriever = None\n    \n    # 5.3 集成检索器\n    print(\&quot;\\n5.3 集成检索器\&quot;)\n    if vectorstore and bm25_retriever:\n        try:\n            ensemble_retriever = EnsembleRetriever(\n                retrievers=[vector_retriever, bm25_retriever],\n                weights=[0.7, 0.3]  # 向量搜索权重0.7，BM25权重0.3\n            )\n            \n            ensemble_results = ensemble_retriever.invoke(\&quot;机器学习技术\&quot;)\n            print(f\&quot;集成检索结果数量: {len(ensemble_results)}\&quot;)\n            \n        except Exception as e:\n            print(f\&quot;集成检索器创建失败: {e}\&quot;)\n    \n    # 5.4 多查询检索器\n    print(\&quot;\\n5.4 多查询检索器\&quot;)\n    if vectorstore:\n        try:\n            llm = ChatOllama(\n                base_url=\&quot;http://localhost:11434\&quot;,\n                model=\&quot;qwen2.5:3b\&quot;\n            )\n            \n            multi_query_retriever = MultiQueryRetriever.from_llm(\n                retriever=vector_retriever,\n                llm=llm\n            )\n            \n            multi_results = multi_query_retriever.invoke(\&quot;AI的未来发展趋势\&quot;)\n            print(f\&quot;多查询检索结果数量: {len(multi_results)}\&quot;)\n            \n        except Exception as e:\n            print(f\&quot;多查询检索器创建失败: {e}\&quot;)\n\n# 6. 完整RAG流程示例\ndef complete_rag_example():\n    \&quot;\&quot;\&quot;完整的RAG流程示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;6. 完整RAG流程示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    try:\n        # 6.1 准备数据\n        documents = [\n            Document(page_content=\&quot;LangChain是一个用于构建LLM应用的框架\&quot;, metadata={\&quot;source\&quot;: \&quot;doc1\&quot;}),\n            Document(page_content=\&quot;向量数据库可以存储和检索高维向量\&quot;, metadata={\&quot;source\&quot;: \&quot;doc2\&quot;}),\n            Document(page_content=\&quot;RAG结合了检索和生成，提高了AI回答的准确性\&quot;, metadata={\&quot;source\&quot;: \&quot;doc3\&quot;}),\n            Document(page_content=\&quot;嵌入模型将文本转换为数值向量表示\&quot;, metadata={\&quot;source\&quot;: \&quot;doc4\&quot;})\n        ]\n        \n        # 6.2 文本分割\n        splitter = RecursiveCharacterTextSplitter(chunk_size=100, chunk_overlap=20)\n        chunks = splitter.split_documents(documents)\n        \n        # 6.3 创建嵌入和向量存储\n        embeddings = OllamaEmbeddings(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;nomic-embed-text\&quot;\n        )\n        \n        vectorstore = FAISS.from_documents(chunks, embeddings)\n        retriever = vectorstore.as_retriever(k=2)\n        \n        # 6.4 创建RAG链\n        from langchain_core.prompts import ChatPromptTemplate\n        from langchain_core.output_parsers import StrOutputParser\n        from langchain_core.runnables import RunnablePassthrough\n        \n        llm = ChatOllama(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;qwen2.5:3b\&quot;\n        )\n        \n        prompt = ChatPromptTemplate.from_template(\&quot;\&quot;\&quot;\n        基于以下上下文回答问题：\n        \n        上下文：{context}\n        \n        问题：{question}\n        \n        请提供准确、简洁的回答：\n        \&quot;\&quot;\&quot;)\n        \n        def format_docs(docs):\n            return \&quot;\\n\\n\&quot;.join(doc.page_content for doc in docs)\n        \n        rag_chain = (\n            {\&quot;context\&quot;: retriever | format_docs, \&quot;question\&quot;: RunnablePassthrough()}\n            | prompt\n            | llm\n            | StrOutputParser()\n        )\n        \n        # 6.5 测试RAG系统\n        questions = [\n            \&quot;什么是LangChain？\&quot;,\n            \&quot;向量数据库的作用是什么？\&quot;,\n            \&quot;RAG技术有什么优势？\&quot;\n        ]\n        \n        for question in questions:\n            print(f\&quot;\\n问题: {question}\&quot;)\n            answer = rag_chain.invoke(question)\n            print(f\&quot;回答: {answer}\&quot;)\n            \n    except Exception as e:\n        print(f\&quot;RAG流程执行失败: {e}\&quot;)\n\n# 7. 高级功能示例\ndef advanced_features_example():\n    \&quot;\&quot;\&quot;高级功能示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;7. 高级功能示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 7.1 自定义文档加载器\n    print(\&quot;\\n7.1 自定义文档加载器\&quot;)\n    \n    class CustomLoader:\n        def __init__(self, data_source):\n            self.data_source = data_source\n        \n        def load(self):\n            # 模拟从API或数据库加载数据\n            documents = []\n            for i, item in enumerate(self.data_source):\n                doc = Document(\n                    page_content=item[\&quot;content\&quot;],\n                    metadata={\&quot;id\&quot;: i, \&quot;type\&quot;: item[\&quot;type\&quot;]}\n                )\n                documents.append(doc)\n            return documents\n    \n    # 使用自定义加载器\n    custom_data = [\n        {\&quot;content\&quot;: \&quot;Python是一种编程语言\&quot;, \&quot;type\&quot;: \&quot;技术\&quot;},\n        {\&quot;content\&quot;: \&quot;数据科学需要统计知识\&quot;, \&quot;type\&quot;: \&quot;科学\&quot;},\n        {\&quot;content\&quot;: \&quot;机器学习算法很重要\&quot;, \&quot;type\&quot;: \&quot;AI\&quot;}\n    ]\n    \n    custom_loader = CustomLoader(custom_data)\n    custom_docs = custom_loader.load()\n    print(f\&quot;自定义加载器文档数量: {len(custom_docs)}\&quot;)\n    \n    # 7.2 文档过滤和预处理\n    print(\&quot;\\n7.2 文档过滤和预处理\&quot;)\n    \n    def preprocess_documents(documents):\n        \&quot;\&quot;\&quot;文档预处理函数\&quot;\&quot;\&quot;\n        processed_docs = []\n        for doc in documents:\n            # 清理文本\n            content = doc.page_content.strip()\n            content = content.replace(\&quot;\\n\&quot;, \&quot; \&quot;).replace(\&quot;\\t\&quot;, \&quot; \&quot;)\n            \n            # 过滤短文档\n            if len(content) &gt; 10:\n                doc.page_content = content\n                processed_docs.append(doc)\n        \n        return processed_docs\n    \n    processed_docs = preprocess_documents(custom_docs)\n    print(f\&quot;预处理后文档数量: {len(processed_docs)}\&quot;)\n\n# 8. 性能优化示例\nasync def performance_optimization_example():\n    \&quot;\&quot;\&quot;性能优化示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;8. 性能优化示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 8.1 批量处理\n    print(\&quot;\\n8.1 批量嵌入处理\&quot;)\n    \n    try:\n        embeddings = OllamaEmbeddings(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;nomic-embed-text\&quot;\n        )\n        \n        # 大量文本\n        texts = [f\&quot;这是第{i}个文档的内容\&quot; for i in range(10)]\n        \n        # 批量生成嵌入\n        batch_embeddings = embeddings.embed_documents(texts)\n        print(f\&quot;批量处理文档数量: {len(batch_embeddings)}\&quot;)\n        \n        # 8.2 异步处理\n        print(\&quot;\\n8.2 异步处理示例\&quot;)\n        \n        async def async_embed_text(text):\n            # 模拟异步嵌入\n            await asyncio.sleep(0.1)\n            return embeddings.embed_query(text)\n        \n        # 并发处理\n        tasks = [async_embed_text(f\&quot;异步文本{i}\&quot;) for i in range(5)]\n        results = await asyncio.gather(*tasks)\n        print(f\&quot;异步处理结果数量: {len(results)}\&quot;)\n        \n    except Exception as e:\n        print(f\&quot;性能优化示例失败: {e}\&quot;)\n\n# 主函数\ndef main():\n    \&quot;\&quot;\&quot;运行所有示例\&quot;\&quot;\&quot;\n    print(\&quot; LangChain 0.3 Data Connection 完整示例\&quot;)\n    print(\&quot;=\&quot; * 80)\n    \n    # 1. 文档加载\n    documents = document_loaders_example()\n    \n    # 2. 文本分割\n    chunks = text_splitters_example(documents)\n    \n    # 3. 嵌入模型\n    embeddings = embedding_models_example()\n    \n    # 4. 向量存储\n    faiss_store, chroma_store = vector_stores_example(chunks, embeddings)\n    \n    # 5. 检索器\n    retrievers_example(faiss_store, chunks)\n    \n    # 6. 完整RAG流程\n    complete_rag_example()\n    \n    # 7. 高级功能\n    advanced_features_example()\n    \n    print(\&quot;\\n 所有示例运行完成！\&quot;)\n    \n    # 清理临时文件\n    cleanup_files()\n\ndef cleanup_files():\n    \&quot;\&quot;\&quot;清理临时文件\&quot;\&quot;\&quot;\n    import shutil\n    \n    files_to_remove = [\&quot;sample.txt\&quot;, \&quot;sample.csv\&quot;, \&quot;sample.json\&quot;]\n    dirs_to_remove = [\&quot;docs\&quot;, \&quot;faiss_index\&quot;, \&quot;chroma_db\&quot;]\n    \n    for file in files_to_remove:\n        if os.path.exists(file):\n            os.remove(file)\n    \n    for dir in dirs_to_remove:\n        if os.path.exists(dir):\n            shutil.rmtree(dir)\n    \n    print(\&quot; 临时文件已清理\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    # 运行同步示例\n    main()\n    \n    # 运行异步示例\n    # asyncio.run(performance_optimization_example())\n```\n&lt;/augment_code_snippet&gt;\n\n## 安装依赖\n\n&lt;augment_code_snippet path=\&quot;requirements.txt\&quot; mode=\&quot;EDIT\&quot;&gt;\n```txt\nlangchain==0.3.26\nlangchain-community==0.3.26\nlangchain-core==0.3.26\nlangchain-ollama==0.2.0\nfaiss-cpu==1.8.0\nchromadb==0.5.0\npandas==2.0.3\nnumpy==1.24.3\n```\n&lt;/augment_code_snippet&gt;\n\n## 快速开始脚本\n\n&lt;augment_code_snippet path=\&quot;quick_start_data_connection.py\&quot; mode=\&quot;EDIT\&quot;&gt;\n```python\n\&quot;\&quot;\&quot;\nLangChain Data Connection 快速开始示例\n最小化的可运行示例\n\&quot;\&quot;\&quot;\n\nfrom langchain_community.document_loaders import TextLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.embeddings import OllamaEmbeddings\nfrom langchain_community.vectorstores import FAISS\nfrom langchain_ollama import ChatOllama\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.runnables import RunnablePassthrough\n\ndef quick_rag_demo():\n    \&quot;\&quot;\&quot;5分钟RAG演示\&quot;\&quot;\&quot;\n    print(\&quot; 5分钟RAG演示\&quot;)\n    \n    # 1. 创建示例文档\n    with open(\&quot;demo.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        f.write(\&quot;\&quot;\&quot;\n        LangChain是一个强大的框架，用于构建基于大语言模型的应用程序。\n        它提供了丰富的组件，包括文档加载器、文本分割器、嵌入模型和向量存储。\n        通过LangChain，开发者可以轻松构建RAG（检索增强生成）应用。\n        \&quot;\&quot;\&quot;)\n    \n    # 2. 加载和分割文档\n    loader = TextLoader(\&quot;demo.txt\&quot;, encoding=\&quot;utf-8\&quot;)\n    documents = loader.load()\n    \n    splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=50)\n    chunks = splitter.split_documents(documents)\n    \n    # 3. 创建向量存储\n    embeddings = OllamaEmbeddings(\n        base_url=\&quot;http://localhost:11434\&quot;,\n        model=\&quot;nomic-embed-text\&quot;\n    )\n    \n    vectorstore = FAISS.from_documents(chunks, embeddings)\n    retriever = vectorstore.as_retriever()\n    \n    # 4. 创建RAG链\n    llm = ChatOllama(\n        base_url=\&quot;http://localhost:11434\&quot;,\n        model=\&quot;qwen2.5:3b\&quot;\n    )\n    \n    prompt = ChatPromptTemplate.from_template(\&quot;\&quot;\&quot;\n    基于上下文回答问题：\n    上下文：{context}\n    问题：{question}\n    \&quot;\&quot;\&quot;)\n    \n    def format_docs(docs):\n        return \&quot;\\n\&quot;.join(doc.page_content for doc in docs)\n    \n    chain = (\n        {\&quot;context\&quot;: retriever | format_docs, \&quot;question\&quot;: RunnablePassthrough()}\n        | prompt\n        | llm\n        | StrOutputParser()\n    )\n    \n    # 5. 测试\n    question = \&quot;什么是LangChain？\&quot;\n    answer = chain.invoke(question)\n    \n    print(f\&quot;问题: {question}\&quot;)\n    print(f\&quot;回答: {answer}\&quot;)\n    \n    # 清理\n    import os\n    os.remove(\&quot;demo.txt\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    quick_rag_demo()\n```\n&lt;/augment_code_snippet&gt;\n\n## 核心特性总结\n\n1. **Document Loaders**: 支持多种格式（TXT、PDF、CSV、JSON、Web等）\n2. **Text Splitters**: 智能文本分割，保持语义完整性\n3. **Embedding Models**: 将文本转换为向量表示\n4. **Vector Stores**: 高效存储和检索向量数据\n5. **Retrievers**: 多种检索策略（相似性、BM25、混合等）\n\n这些组件协同工作，构建了完整的数据连接和检索系统，是构建RAG应用的基础。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;memoryChat/LangGraph_memory_chat.ipynb:0-741\nmemoryChat/LangGraph_memory_chat.ipynb:17150-17920\nlangchain/memory/chains_momery_chat.ipynb:729-1212\nlangchain/memory/chains_momery_chat.ipynb:23075-23792\nmemoryChat/LCEL_memory_chat.ipynb:14802-15912\nmemoryChat/LCEL_memory_chat.ipynb:17852-18569\nlangchain/modelIo/StructOutput.ipynb:0-696\nlangchain/overall.md:2141-2889\nlangchain/Chains/LCELChain.ipynb:0-554\nlangchain/Chains/LCELChain.ipynb:3869-4641\nlangchain/Chains/TraditionalChain.ipynb:1016-1466\nlangchain/modelIo/LLMs.ipynb:9390-10227\nlangchain/modelIo/LLMs.ipynb:13191-14164&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;@`LangChain 0.3`请你详细讲解Data Connection（数据连接），并给出完整的可运行的代码，尽可能多的给出示例&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T14:05:30.589Z&quot;,&quot;response_text&quot;:&quot;根据检索到的文档，我来详细讲解 LangChain 0.3 中的 Data Connection（数据连接）组件，并提供完整的可运行代码示例。\n\n## Data Connection 核心组件\n\nData Connection 是 LangChain 中处理外部数据的核心模块，包含以下主要组件：\n\n1. **Document Loaders** - 文档加载器\n2. **Text Splitters** - 文本分割器  \n3. **Embedding Models** - 嵌入模型\n4. **Vector Stores** - 向量存储\n5. **Retrievers** - 检索器\n\n## 完整示例代码\n\n````python path=data_connection_examples.py mode=EDIT\n\&quot;\&quot;\&quot;\nLangChain 0.3 Data Connection 完整示例\n包含文档加载、文本分割、向量化、存储和检索的完整流程\n\&quot;\&quot;\&quot;\n\nimport os\nfrom typing import List, Dict, Any\nimport asyncio\n\n# 核心导入\nfrom langchain_community.document_loaders import (\n    TextLoader, \n    PyPDFLoader, \n    CSVLoader,\n    JSONLoader,\n    WebBaseLoader,\n    DirectoryLoader\n)\nfrom langchain.text_splitter import (\n    RecursiveCharacterTextSplitter,\n    CharacterTextSplitter,\n    TokenTextSplitter,\n    MarkdownHeaderTextSplitter\n)\nfrom langchain_community.embeddings import OllamaEmbeddings\nfrom langchain_community.vectorstores import (\n    FAISS,\n    Chroma,\n    Qdrant\n)\nfrom langchain_core.documents import Document\nfrom langchain.retrievers import (\n    BM25Retriever,\n    EnsembleRetriever,\n    MultiQueryRetriever\n)\nfrom langchain_ollama import ChatOllama\n\nprint(\&quot;✅ 所有库导入成功\&quot;)\n\n# 1. Document Loaders 示例\ndef document_loaders_example():\n    \&quot;\&quot;\&quot;文档加载器示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;1. Document Loaders 文档加载器示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 1.1 文本文件加载\n    print(\&quot;\\n1.1 文本文件加载\&quot;)\n    # 创建示例文本文件\n    with open(\&quot;sample.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        f.write(\&quot;\&quot;\&quot;\n        人工智能（AI）是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\n        机器学习是AI的一个子集，它使计算机能够从数据中学习而无需明确编程。\n        深度学习是机器学习的一个子集，使用神经网络来模拟人脑的工作方式。\n        \&quot;\&quot;\&quot;)\n    \n    loader = TextLoader(\&quot;sample.txt\&quot;, encoding=\&quot;utf-8\&quot;)\n    documents = loader.load()\n    print(f\&quot;加载的文档数量: {len(documents)}\&quot;)\n    print(f\&quot;文档内容预览: {documents[0].page_content[:100]}...\&quot;)\n    \n    # 1.2 CSV文件加载\n    print(\&quot;\\n1.2 CSV文件加载\&quot;)\n    import pandas as pd\n    \n    # 创建示例CSV\n    df = pd.DataFrame({\n        'name': ['张三', '李四', '王五'],\n        'age': [25, 30, 35],\n        'city': ['北京', '上海', '深圳'],\n        'description': ['软件工程师', '数据科学家', '产品经理']\n    })\n    df.to_csv(\&quot;sample.csv\&quot;, index=False, encoding=\&quot;utf-8\&quot;)\n    \n    csv_loader = CSVLoader(\&quot;sample.csv\&quot;, encoding=\&quot;utf-8\&quot;)\n    csv_docs = csv_loader.load()\n    print(f\&quot;CSV文档数量: {len(csv_docs)}\&quot;)\n    print(f\&quot;CSV文档示例: {csv_docs[0].page_content}\&quot;)\n    \n    # 1.3 JSON文件加载\n    print(\&quot;\\n1.3 JSON文件加载\&quot;)\n    import json\n    \n    sample_data = [\n        {\&quot;title\&quot;: \&quot;Python编程\&quot;, \&quot;content\&quot;: \&quot;Python是一种高级编程语言\&quot;, \&quot;category\&quot;: \&quot;技术\&quot;},\n        {\&quot;title\&quot;: \&quot;数据分析\&quot;, \&quot;content\&quot;: \&quot;数据分析是从数据中提取洞察的过程\&quot;, \&quot;category\&quot;: \&quot;数据科学\&quot;}\n    ]\n    \n    with open(\&quot;sample.json\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        json.dump(sample_data, f, ensure_ascii=False, indent=2)\n    \n    json_loader = JSONLoader(\&quot;sample.json\&quot;, jq_schema=\&quot;.[].content\&quot;)\n    json_docs = json_loader.load()\n    print(f\&quot;JSON文档数量: {len(json_docs)}\&quot;)\n    print(f\&quot;JSON文档示例: {json_docs[0].page_content}\&quot;)\n    \n    # 1.4 目录批量加载\n    print(\&quot;\\n1.4 目录批量加载\&quot;)\n    os.makedirs(\&quot;docs\&quot;, exist_ok=True)\n    \n    # 创建多个文档\n    for i in range(3):\n        with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n            f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\n    \n    dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\n    dir_docs = dir_loader.load()\n    print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\n    \n    return documents + csv_docs + json_docs + dir_docs\n\n# 2. Text Splitters 示例\ndef text_splitters_example(documents: List[Document]):\n    \&quot;\&quot;\&quot;文本分割器示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;2. Text Splitters 文本分割器示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 创建长文本用于分割\n    long_text = \&quot;\&quot;\&quot;\n    人工智能的发展历程可以追溯到20世纪50年代。当时，计算机科学家开始探索让机器模拟人类智能的可能性。\n    \n    在1956年的达特茅斯会议上，人工智能这个术语首次被正式提出。这标志着AI作为一个独立学科的诞生。\n    \n    随后的几十年里，AI经历了多次起伏。60-70年代是第一个AI春天，专家系统得到了广泛应用。\n    \n    80年代末到90年代初，由于技术限制和过高期望，AI进入了所谓的\&quot;AI冬天\&quot;。\n    \n    21世纪以来，随着大数据、云计算和深度学习的发展，AI迎来了新的春天。\n    \n    今天，AI已经在图像识别、自然语言处理、推荐系统等领域取得了突破性进展。\n    \&quot;\&quot;\&quot;\n    \n    long_doc = Document(page_content=long_text, metadata={\&quot;source\&quot;: \&quot;ai_history\&quot;})\n    \n    # 2.1 递归字符分割器（推荐）\n    print(\&quot;\\n2.1 RecursiveCharacterTextSplitter\&quot;)\n    recursive_splitter = RecursiveCharacterTextSplitter(\n        chunk_size=200,\n        chunk_overlap=50,\n        length_function=len,\n        separators=[\&quot;\\n\\n\&quot;, \&quot;\\n\&quot;, \&quot;。\&quot;, \&quot;，\&quot;, \&quot; \&quot;, \&quot;\&quot;]\n    )\n    \n    recursive_chunks = recursive_splitter.split_documents([long_doc])\n    print(f\&quot;递归分割块数: {len(recursive_chunks)}\&quot;)\n    for i, chunk in enumerate(recursive_chunks[:2]):\n        print(f\&quot;块 {i+1}: {chunk.page_content[:100]}...\&quot;)\n    \n    # 2.2 字符分割器\n    print(\&quot;\\n2.2 CharacterTextSplitter\&quot;)\n    char_splitter = CharacterTextSplitter(\n        chunk_size=300,\n        chunk_overlap=50,\n        separator=\&quot;\\n\\n\&quot;\n    )\n    \n    char_chunks = char_splitter.split_documents([long_doc])\n    print(f\&quot;字符分割块数: {len(char_chunks)}\&quot;)\n    \n    # 2.3 Token分割器\n    print(\&quot;\\n2.3 TokenTextSplitter\&quot;)\n    token_splitter = TokenTextSplitter(\n        chunk_size=100,\n        chunk_overlap=20\n    )\n    \n    token_chunks = token_splitter.split_documents([long_doc])\n    print(f\&quot;Token分割块数: {len(token_chunks)}\&quot;)\n    \n    # 2.4 Markdown分割器\n    print(\&quot;\\n2.4 MarkdownHeaderTextSplitter\&quot;)\n    markdown_text = \&quot;\&quot;\&quot;\n# 人工智能概述\n\n## 什么是人工智能\n人工智能是计算机科学的一个分支。\n\n## AI的应用领域\n\n### 自然语言处理\nNLP是AI的重要分支。\n\n### 计算机视觉\n计算机视觉让机器能够\&quot;看见\&quot;。\n\n## 未来发展\nAI将继续快速发展。\n\&quot;\&quot;\&quot;\n    \n    markdown_splitter = MarkdownHeaderTextSplitter(\n        headers_to_split_on=[\n            (\&quot;#\&quot;, \&quot;Header 1\&quot;),\n            (\&quot;##\&quot;, \&quot;Header 2\&quot;),\n            (\&quot;###\&quot;, \&quot;Header 3\&quot;),\n        ]\n    )\n    \n    md_doc = Document(page_content=markdown_text)\n    md_chunks = markdown_splitter.split_text(markdown_text)\n    print(f\&quot;Markdown分割块数: {len(md_chunks)}\&quot;)\n    \n    return recursive_chunks\n\n# 3. Embedding Models 示例\ndef embedding_models_example():\n    \&quot;\&quot;\&quot;嵌入模型示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;3. Embedding Models 嵌入模型示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 3.1 Ollama嵌入模型\n    print(\&quot;\\n3.1 Ollama嵌入模型\&quot;)\n    try:\n        embeddings = OllamaEmbeddings(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;nomic-embed-text\&quot;  # 或使用其他嵌入模型\n        )\n        \n        # 测试文本\n        texts = [\n            \&quot;人工智能是计算机科学的分支\&quot;,\n            \&quot;机器学习是AI的子集\&quot;,\n            \&quot;深度学习使用神经网络\&quot;,\n            \&quot;今天天气很好\&quot;\n        ]\n        \n        # 生成嵌入向量\n        text_embeddings = embeddings.embed_documents(texts)\n        query_embedding = embeddings.embed_query(\&quot;什么是人工智能？\&quot;)\n        \n        print(f\&quot;文档嵌入数量: {len(text_embeddings)}\&quot;)\n        print(f\&quot;嵌入向量维度: {len(text_embeddings[0])}\&quot;)\n        print(f\&quot;查询嵌入维度: {len(query_embedding)}\&quot;)\n        \n        # 计算相似度\n        import numpy as np\n        \n        def cosine_similarity(a, b):\n            return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))\n        \n        print(\&quot;\\n相似度计算:\&quot;)\n        for i, text in enumerate(texts):\n            similarity = cosine_similarity(query_embedding, text_embeddings[i])\n            print(f\&quot;'{text}' 相似度: {similarity:.4f}\&quot;)\n            \n        return embeddings\n        \n    except Exception as e:\n        print(f\&quot;Ollama嵌入模型初始化失败: {e}\&quot;)\n        print(\&quot;请确保Ollama服务正在运行并安装了嵌入模型\&quot;)\n        return None\n\n# 4. Vector Stores 示例\ndef vector_stores_example(chunks: List[Document], embeddings):\n    \&quot;\&quot;\&quot;向量存储示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;4. Vector Stores 向量存储示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    if embeddings is None:\n        print(\&quot;跳过向量存储示例（嵌入模型不可用）\&quot;)\n        return None, None\n    \n    # 4.1 FAISS向量存储\n    print(\&quot;\\n4.1 FAISS向量存储\&quot;)\n    try:\n        # 创建FAISS向量存储\n        faiss_vectorstore = FAISS.from_documents(chunks, embeddings)\n        \n        # 保存到本地\n        faiss_vectorstore.save_local(\&quot;faiss_index\&quot;)\n        print(\&quot;✅ FAISS索引已保存\&quot;)\n        \n        # 相似性搜索\n        query = \&quot;人工智能的发展\&quot;\n        similar_docs = faiss_vectorstore.similarity_search(query, k=3)\n        \n        print(f\&quot;\\n查询: '{query}'\&quot;)\n        print(\&quot;相似文档:\&quot;)\n        for i, doc in enumerate(similar_docs):\n            print(f\&quot;{i+1}. {doc.page_content[:100]}...\&quot;)\n        \n        # 带分数的相似性搜索\n        similar_docs_with_scores = faiss_vectorstore.similarity_search_with_score(query, k=3)\n        print(\&quot;\\n带分数的搜索结果:\&quot;)\n        for i, (doc, score) in enumerate(similar_docs_with_scores):\n            print(f\&quot;{i+1}. 分数: {score:.4f} - {doc.page_content[:80]}...\&quot;)\n            \n    except Exception as e:\n        print(f\&quot;FAISS创建失败: {e}\&quot;)\n        faiss_vectorstore = None\n    \n    # 4.2 Chroma向量存储\n    print(\&quot;\\n4.2 Chroma向量存储\&quot;)\n    try:\n        chroma_vectorstore = Chroma.from_documents(\n            chunks, \n            embeddings,\n            persist_directory=\&quot;./chroma_db\&quot;\n        )\n        \n        # 持久化\n        chroma_vectorstore.persist()\n        print(\&quot;✅ Chroma数据库已持久化\&quot;)\n        \n        # 搜索测试\n        chroma_results = chroma_vectorstore.similarity_search(\&quot;机器学习\&quot;, k=2)\n        print(f\&quot;Chroma搜索结果数量: {len(chroma_results)}\&quot;)\n        \n    except Exception as e:\n        print(f\&quot;Chroma创建失败: {e}\&quot;)\n        chroma_vectorstore = None\n    \n    return faiss_vectorstore, chroma_vectorstore\n\n# 5. Retrievers 示例\ndef retrievers_example(vectorstore, chunks: List[Document]):\n    \&quot;\&quot;\&quot;检索器示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;5. Retrievers 检索器示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 5.1 向量存储检索器\n    print(\&quot;\\n5.1 向量存储检索器\&quot;)\n    if vectorstore:\n        vector_retriever = vectorstore.as_retriever(\n            search_type=\&quot;similarity\&quot;,\n            search_kwargs={\&quot;k\&quot;: 3}\n        )\n        \n        results = vector_retriever.invoke(\&quot;人工智能的应用\&quot;)\n        print(f\&quot;向量检索结果数量: {len(results)}\&quot;)\n        for i, doc in enumerate(results):\n            print(f\&quot;{i+1}. {doc.page_content[:100]}...\&quot;)\n    \n    # 5.2 BM25检索器\n    print(\&quot;\\n5.2 BM25检索器\&quot;)\n    try:\n        bm25_retriever = BM25Retriever.from_documents(chunks)\n        bm25_retriever.k = 3\n        \n        bm25_results = bm25_retriever.invoke(\&quot;人工智能发展\&quot;)\n        print(f\&quot;BM25检索结果数量: {len(bm25_results)}\&quot;)\n        for i, doc in enumerate(bm25_results):\n            print(f\&quot;{i+1}. {doc.page_content[:100]}...\&quot;)\n            \n    except Exception as e:\n        print(f\&quot;BM25检索器创建失败: {e}\&quot;)\n        bm25_retriever = None\n    \n    # 5.3 集成检索器\n    print(\&quot;\\n5.3 集成检索器\&quot;)\n    if vectorstore and bm25_retriever:\n        try:\n            ensemble_retriever = EnsembleRetriever(\n                retrievers=[vector_retriever, bm25_retriever],\n                weights=[0.7, 0.3]  # 向量搜索权重0.7，BM25权重0.3\n            )\n            \n            ensemble_results = ensemble_retriever.invoke(\&quot;机器学习技术\&quot;)\n            print(f\&quot;集成检索结果数量: {len(ensemble_results)}\&quot;)\n            \n        except Exception as e:\n            print(f\&quot;集成检索器创建失败: {e}\&quot;)\n    \n    # 5.4 多查询检索器\n    print(\&quot;\\n5.4 多查询检索器\&quot;)\n    if vectorstore:\n        try:\n            llm = ChatOllama(\n                base_url=\&quot;http://localhost:11434\&quot;,\n                model=\&quot;qwen2.5:3b\&quot;\n            )\n            \n            multi_query_retriever = MultiQueryRetriever.from_llm(\n                retriever=vector_retriever,\n                llm=llm\n            )\n            \n            multi_results = multi_query_retriever.invoke(\&quot;AI的未来发展趋势\&quot;)\n            print(f\&quot;多查询检索结果数量: {len(multi_results)}\&quot;)\n            \n        except Exception as e:\n            print(f\&quot;多查询检索器创建失败: {e}\&quot;)\n\n# 6. 完整RAG流程示例\ndef complete_rag_example():\n    \&quot;\&quot;\&quot;完整的RAG流程示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;6. 完整RAG流程示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    try:\n        # 6.1 准备数据\n        documents = [\n            Document(page_content=\&quot;LangChain是一个用于构建LLM应用的框架\&quot;, metadata={\&quot;source\&quot;: \&quot;doc1\&quot;}),\n            Document(page_content=\&quot;向量数据库可以存储和检索高维向量\&quot;, metadata={\&quot;source\&quot;: \&quot;doc2\&quot;}),\n            Document(page_content=\&quot;RAG结合了检索和生成，提高了AI回答的准确性\&quot;, metadata={\&quot;source\&quot;: \&quot;doc3\&quot;}),\n            Document(page_content=\&quot;嵌入模型将文本转换为数值向量表示\&quot;, metadata={\&quot;source\&quot;: \&quot;doc4\&quot;})\n        ]\n        \n        # 6.2 文本分割\n        splitter = RecursiveCharacterTextSplitter(chunk_size=100, chunk_overlap=20)\n        chunks = splitter.split_documents(documents)\n        \n        # 6.3 创建嵌入和向量存储\n        embeddings = OllamaEmbeddings(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;nomic-embed-text\&quot;\n        )\n        \n        vectorstore = FAISS.from_documents(chunks, embeddings)\n        retriever = vectorstore.as_retriever(k=2)\n        \n        # 6.4 创建RAG链\n        from langchain_core.prompts import ChatPromptTemplate\n        from langchain_core.output_parsers import StrOutputParser\n        from langchain_core.runnables import RunnablePassthrough\n        \n        llm = ChatOllama(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;qwen2.5:3b\&quot;\n        )\n        \n        prompt = ChatPromptTemplate.from_template(\&quot;\&quot;\&quot;\n        基于以下上下文回答问题：\n        \n        上下文：{context}\n        \n        问题：{question}\n        \n        请提供准确、简洁的回答：\n        \&quot;\&quot;\&quot;)\n        \n        def format_docs(docs):\n            return \&quot;\\n\\n\&quot;.join(doc.page_content for doc in docs)\n        \n        rag_chain = (\n            {\&quot;context\&quot;: retriever | format_docs, \&quot;question\&quot;: RunnablePassthrough()}\n            | prompt\n            | llm\n            | StrOutputParser()\n        )\n        \n        # 6.5 测试RAG系统\n        questions = [\n            \&quot;什么是LangChain？\&quot;,\n            \&quot;向量数据库的作用是什么？\&quot;,\n            \&quot;RAG技术有什么优势？\&quot;\n        ]\n        \n        for question in questions:\n            print(f\&quot;\\n问题: {question}\&quot;)\n            answer = rag_chain.invoke(question)\n            print(f\&quot;回答: {answer}\&quot;)\n            \n    except Exception as e:\n        print(f\&quot;RAG流程执行失败: {e}\&quot;)\n\n# 7. 高级功能示例\ndef advanced_features_example():\n    \&quot;\&quot;\&quot;高级功能示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;7. 高级功能示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 7.1 自定义文档加载器\n    print(\&quot;\\n7.1 自定义文档加载器\&quot;)\n    \n    class CustomLoader:\n        def __init__(self, data_source):\n            self.data_source = data_source\n        \n        def load(self):\n            # 模拟从API或数据库加载数据\n            documents = []\n            for i, item in enumerate(self.data_source):\n                doc = Document(\n                    page_content=item[\&quot;content\&quot;],\n                    metadata={\&quot;id\&quot;: i, \&quot;type\&quot;: item[\&quot;type\&quot;]}\n                )\n                documents.append(doc)\n            return documents\n    \n    # 使用自定义加载器\n    custom_data = [\n        {\&quot;content\&quot;: \&quot;Python是一种编程语言\&quot;, \&quot;type\&quot;: \&quot;技术\&quot;},\n        {\&quot;content\&quot;: \&quot;数据科学需要统计知识\&quot;, \&quot;type\&quot;: \&quot;科学\&quot;},\n        {\&quot;content\&quot;: \&quot;机器学习算法很重要\&quot;, \&quot;type\&quot;: \&quot;AI\&quot;}\n    ]\n    \n    custom_loader = CustomLoader(custom_data)\n    custom_docs = custom_loader.load()\n    print(f\&quot;自定义加载器文档数量: {len(custom_docs)}\&quot;)\n    \n    # 7.2 文档过滤和预处理\n    print(\&quot;\\n7.2 文档过滤和预处理\&quot;)\n    \n    def preprocess_documents(documents):\n        \&quot;\&quot;\&quot;文档预处理函数\&quot;\&quot;\&quot;\n        processed_docs = []\n        for doc in documents:\n            # 清理文本\n            content = doc.page_content.strip()\n            content = content.replace(\&quot;\\n\&quot;, \&quot; \&quot;).replace(\&quot;\\t\&quot;, \&quot; \&quot;)\n            \n            # 过滤短文档\n            if len(content) &gt; 10:\n                doc.page_content = content\n                processed_docs.append(doc)\n        \n        return processed_docs\n    \n    processed_docs = preprocess_documents(custom_docs)\n    print(f\&quot;预处理后文档数量: {len(processed_docs)}\&quot;)\n\n# 8. 性能优化示例\nasync def performance_optimization_example():\n    \&quot;\&quot;\&quot;性能优化示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;8. 性能优化示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    # 8.1 批量处理\n    print(\&quot;\\n8.1 批量嵌入处理\&quot;)\n    \n    try:\n        embeddings = OllamaEmbeddings(\n            base_url=\&quot;http://localhost:11434\&quot;,\n            model=\&quot;nomic-embed-text\&quot;\n        )\n        \n        # 大量文本\n        texts = [f\&quot;这是第{i}个文档的内容\&quot; for i in range(10)]\n        \n        # 批量生成嵌入\n        batch_embeddings = embeddings.embed_documents(texts)\n        print(f\&quot;批量处理文档数量: {len(batch_embeddings)}\&quot;)\n        \n        # 8.2 异步处理\n        print(\&quot;\\n8.2 异步处理示例\&quot;)\n        \n        async def async_embed_text(text):\n            # 模拟异步嵌入\n            await asyncio.sleep(0.1)\n            return embeddings.embed_query(text)\n        \n        # 并发处理\n        tasks = [async_embed_text(f\&quot;异步文本{i}\&quot;) for i in range(5)]\n        results = await asyncio.gather(*tasks)\n        print(f\&quot;异步处理结果数量: {len(results)}\&quot;)\n        \n    except Exception as e:\n        print(f\&quot;性能优化示例失败: {e}\&quot;)\n\n# 主函数\ndef main():\n    \&quot;\&quot;\&quot;运行所有示例\&quot;\&quot;\&quot;\n    print(\&quot; LangChain 0.3 Data Connection 完整示例\&quot;)\n    print(\&quot;=\&quot; * 80)\n    \n    # 1. 文档加载\n    documents = document_loaders_example()\n    \n    # 2. 文本分割\n    chunks = text_splitters_example(documents)\n    \n    # 3. 嵌入模型\n    embeddings = embedding_models_example()\n    \n    # 4. 向量存储\n    faiss_store, chroma_store = vector_stores_example(chunks, embeddings)\n    \n    # 5. 检索器\n    retrievers_example(faiss_store, chunks)\n    \n    # 6. 完整RAG流程\n    complete_rag_example()\n    \n    # 7. 高级功能\n    advanced_features_example()\n    \n    print(\&quot;\\n 所有示例运行完成！\&quot;)\n    \n    # 清理临时文件\n    cleanup_files()\n\ndef cleanup_files():\n    \&quot;\&quot;\&quot;清理临时文件\&quot;\&quot;\&quot;\n    import shutil\n    \n    files_to_remove = [\&quot;sample.txt\&quot;, \&quot;sample.csv\&quot;, \&quot;sample.json\&quot;]\n    dirs_to_remove = [\&quot;docs\&quot;, \&quot;faiss_index\&quot;, \&quot;chroma_db\&quot;]\n    \n    for file in files_to_remove:\n        if os.path.exists(file):\n            os.remove(file)\n    \n    for dir in dirs_to_remove:\n        if os.path.exists(dir):\n            shutil.rmtree(dir)\n    \n    print(\&quot; 临时文件已清理\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    # 运行同步示例\n    main()\n    \n    # 运行异步示例\n    # asyncio.run(performance_optimization_example())\n````\n\n## 安装依赖\n\n````txt path=requirements.txt mode=EDIT\nlangchain==0.3.26\nlangchain-community==0.3.26\nlangchain-core==0.3.26\nlangchain-ollama==0.2.0\nfaiss-cpu==1.8.0\nchromadb==0.5.0\npandas==2.0.3\nnumpy==1.24.3\n````\n\n## 快速开始脚本\n\n````python path=quick_start_data_connection.py mode=EDIT\n\&quot;\&quot;\&quot;\nLangChain Data Connection 快速开始示例\n最小化的可运行示例\n\&quot;\&quot;\&quot;\n\nfrom langchain_community.document_loaders import TextLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.embeddings import OllamaEmbeddings\nfrom langchain_community.vectorstores import FAISS\nfrom langchain_ollama import ChatOllama\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.runnables import RunnablePassthrough\n\ndef quick_rag_demo():\n    \&quot;\&quot;\&quot;5分钟RAG演示\&quot;\&quot;\&quot;\n    print(\&quot; 5分钟RAG演示\&quot;)\n    \n    # 1. 创建示例文档\n    with open(\&quot;demo.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        f.write(\&quot;\&quot;\&quot;\n        LangChain是一个强大的框架，用于构建基于大语言模型的应用程序。\n        它提供了丰富的组件，包括文档加载器、文本分割器、嵌入模型和向量存储。\n        通过LangChain，开发者可以轻松构建RAG（检索增强生成）应用。\n        \&quot;\&quot;\&quot;)\n    \n    # 2. 加载和分割文档\n    loader = TextLoader(\&quot;demo.txt\&quot;, encoding=\&quot;utf-8\&quot;)\n    documents = loader.load()\n    \n    splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=50)\n    chunks = splitter.split_documents(documents)\n    \n    # 3. 创建向量存储\n    embeddings = OllamaEmbeddings(\n        base_url=\&quot;http://localhost:11434\&quot;,\n        model=\&quot;nomic-embed-text\&quot;\n    )\n    \n    vectorstore = FAISS.from_documents(chunks, embeddings)\n    retriever = vectorstore.as_retriever()\n    \n    # 4. 创建RAG链\n    llm = ChatOllama(\n        base_url=\&quot;http://localhost:11434\&quot;,\n        model=\&quot;qwen2.5:3b\&quot;\n    )\n    \n    prompt = ChatPromptTemplate.from_template(\&quot;\&quot;\&quot;\n    基于上下文回答问题：\n    上下文：{context}\n    问题：{question}\n    \&quot;\&quot;\&quot;)\n    \n    def format_docs(docs):\n        return \&quot;\\n\&quot;.join(doc.page_content for doc in docs)\n    \n    chain = (\n        {\&quot;context\&quot;: retriever | format_docs, \&quot;question\&quot;: RunnablePassthrough()}\n        | prompt\n        | llm\n        | StrOutputParser()\n    )\n    \n    # 5. 测试\n    question = \&quot;什么是LangChain？\&quot;\n    answer = chain.invoke(question)\n    \n    print(f\&quot;问题: {question}\&quot;)\n    print(f\&quot;回答: {answer}\&quot;)\n    \n    # 清理\n    import os\n    os.remove(\&quot;demo.txt\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    quick_rag_demo()\n````\n\n## 核心特性总结\n\n1. **Document Loaders**: 支持多种格式（TXT、PDF、CSV、JSON、Web等）\n2. **Text Splitters**: 智能文本分割，保持语义完整性\n3. **Embedding Models**: 将文本转换为向量表示\n4. **Vector Stores**: 高效存储和检索向量数据\n5. **Retrievers**: 多种检索策略（相似性、BM25、混合等）\n\n这些组件协同工作，构建了完整的数据连接和检索系统，是构建RAG应用的基础。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;741&quot;,&quot;blob_name&quot;:&quot;d1a43ca2ed872412603ea315d12d51a4a6e6606dfdf990fd6cca3ea98ab7daea&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LangGraph_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;17150&quot;,&quot;char_end&quot;:&quot;17920&quot;,&quot;blob_name&quot;:&quot;d1a43ca2ed872412603ea315d12d51a4a6e6606dfdf990fd6cca3ea98ab7daea&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LangGraph_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;729&quot;,&quot;char_end&quot;:&quot;1212&quot;,&quot;blob_name&quot;:&quot;675bab365c2ad08e6148e78acf95281e1e91127a10d47da5ff17c7137126493b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/memory/chains_momery_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;23075&quot;,&quot;char_end&quot;:&quot;23792&quot;,&quot;blob_name&quot;:&quot;675bab365c2ad08e6148e78acf95281e1e91127a10d47da5ff17c7137126493b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/memory/chains_momery_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;14802&quot;,&quot;char_end&quot;:&quot;15912&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;17852&quot;,&quot;char_end&quot;:&quot;18569&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;696&quot;,&quot;blob_name&quot;:&quot;997bed1cb09b235b9824a87e84a5e876a69c6123024a4301d471d2ee5546b355&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/modelIo/StructOutput.ipynb&quot;}},{&quot;char_start&quot;:&quot;2141&quot;,&quot;char_end&quot;:&quot;2889&quot;,&quot;blob_name&quot;:&quot;616f3f9b9b87c8f1fd6cf488b208e25727064d0695275b3ffec0b7fe7753567b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/overall.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;554&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;3869&quot;,&quot;char_end&quot;:&quot;4641&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;1016&quot;,&quot;char_end&quot;:&quot;1466&quot;,&quot;blob_name&quot;:&quot;8fc7cf7e1b8668a9a3846abf66609b4f79f6f1a5ab426d4add72ee29383c9ecb&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/TraditionalChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;9390&quot;,&quot;char_end&quot;:&quot;10227&quot;,&quot;blob_name&quot;:&quot;fb21906ca5b2d409520814c1b5fe71a4b1fcbbe9c3ba8fd31916b74df8bfd9b1&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/modelIo/LLMs.ipynb&quot;}},{&quot;char_start&quot;:&quot;13191&quot;,&quot;char_end&quot;:&quot;14164&quot;,&quot;blob_name&quot;:&quot;fb21906ca5b2d409520814c1b5fe71a4b1fcbbe9c3ba8fd31916b74df8bfd9b1&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/modelIo/LLMs.ipynb&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-f3a7a9bb-0c42-4b6e-9980-4c31521c360a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-c28bcaad-40ea-42ca-a0b5-326342211b29&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-445cc2bd-5c24-4cd9-a092-616f48b8a3ea&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;33361252-0614-474e-9b98-190390aa43a3&quot;,&quot;draftActiveContextIds&quot;:[&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/dataConnection/dataConnetction.ipynb&quot;,&quot;docset://langchain~0.3&quot;,&quot;userGuidelines&quot;]},&quot;ee5f25bb-468b-4fdc-ad6d-8249d20afa80&quot;:{&quot;id&quot;:&quot;ee5f25bb-468b-4fdc-ad6d-8249d20afa80&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T13:53:37.740Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T14:33:35.241Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;75ab9909-a8d0-4efd-b8f4-6795353dc6e4&quot;,&quot;request_message&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r\n    from .handlers.announcements import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r\n    from jupyterlab_server.translation_utils import translator\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r\n    from .app import LabServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 10, in &lt;module&gt;\r\n    from jupyter_server.extension.application import ExtensionApp, ExtensionAppJinjaMixin\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\extension\\application.py\&quot;, line 17, in &lt;module&gt;\r\n    from jupyter_server.serverapp import ServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\serverapp.py\&quot;, line 122, in &lt;module&gt;\r\n    from jupyter_server.services.contents.filemanager import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\services\\contents\\filemanager.py\&quot;, line 25, in &lt;module&gt;\r\n    from send2trash import send2trash\r\nModuleNotFoundError: No module named 'send2trash'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Traceback (most recent call last):\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .handlers.announcements import (\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyterlab_server.translation_utils import translator\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .app import LabServerApp\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 10, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyter_server.extension.application import ExtensionApp, ExtensionAppJinjaMixin\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\extension\\application.py\&quot;, line 17, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyter_server.serverapp import ServerApp\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\serverapp.py\&quot;, line 122, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyter_server.services.contents.filemanager import (\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\services\\contents\\filemanager.py\&quot;, line 25, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from send2trash import send2trash\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;ModuleNotFoundError: No module named 'send2trash'\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;这个错误是因为缺少 `send2trash` 模块导致的。从错误信息可以看出，`jupyter-server` 依赖 `send2trash` 模块，但在你的虚拟环境中没有安装。\n\n虽然从 `uv.lock` 文件中可以看到 `jupyter-server` 列出了 `send2trash` 作为依赖项，但似乎没有正确安装。\n\n解决方案：\n\n&lt;augment_code_snippet path=\&quot;requirements.txt\&quot; mode=\&quot;EDIT\&quot;&gt;\n```txt\nsend2trash\n```\n&lt;/augment_code_snippet&gt;\n\n然后在终端中运行：\n\n```bash\n# 如果使用 uv\nuv add send2trash\n\n# 或者使用 pip\npip install send2trash\n```\n\n如果你使用的是 `uv`，也可以尝试重新同步依赖：\n\n```bash\nuv sync\n```\n\n这应该能解决 Jupyter 服务器启动失败的问题。`send2trash` 是一个用于安全删除文件到回收站的库，是 Jupyter Server 的必需依赖。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyter_server_terminals.json:0-99\n.venv/etc/jupyter/jupyter_server_config.d/jupyter-lsp-jupyter-server.json:0-86\n.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json:0-1242\n.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json:2528-3376\n.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json:3376-4162\n.venv/share/applications/jupyterlab.desktop:0-227\n.venv/etc/jupyter/jupyter_server_config.d/notebook.json:0-83\n.venv/etc/jupyter/jupyter_server_config.d/notebook_shim.json:0-106\n.venv/etc/jupyter/jupyter_server_config.d/jupyterlab.json:0-85\n.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json:0-923\n.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json:923-1514\n.venv/share/jupyter/lab/schemas/@jupyterlab/hub-extension/menu.json:0-613\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/install.json:0-197\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/package.json.orig:0-850\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/package.json.orig:850-1580\n.venv/share/jupyter/lab/static/227.6bd3154334bb91c5ca1c.js.LICENSE.txt:0-427\n.venv/share/applications/jupyter-notebook.desktop:0-242\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/package.json:850-1580\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/439.b350310d057b43cdd50f.js:0-82\n.venv/Lib/site-packages/ipykernel_launcher.py:0-512\nuv.lock:64502-65218\nuv.lock:65828-66045\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/439.b350310d057b43cdd50f.js.LICENSE.txt:0-160\n.venv/share/jupyter/labextensions/jupyterlab_pygments/package.json:859-1666\n.venv/share/jupyter/lab/schemas/@jupyter-notebook/application-extension/menus.json:0-1028\n.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json:0-279\n.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json:279-1268\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/701.043aefe0b66133629348.js:0-190\n.venv/share/jupyter/kernels/python3/kernel.json:0-193\n.venv/share/jupyter/lab/schemas/@jupyterlab/notebook-extension/export.json:0-669\n.venv/etc/jupyter/jupyter_notebook_config.d/jupyterlab.json:0-87\n.venv/share/jupyter/lab/static/5090.404be96d8a6eae1e719a.js.LICENSE.txt:0-99\n.venv/share/jupyter/labextensions/jupyterlab_pygments/install.json:0-199\n.venv/share/jupyter/lab/schemas/@jupyterlab/application-extension/context-menu.json:0-835\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/third-party-licenses.json:0-696\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/third-party-licenses.json:6012-6101\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/651.fe40a967a60b543cf15c.js.LICENSE.txt:0-218\n.venv/share/jupyter/lab/schemas/@jupyterlab/mainmenu-extension/plugin.json:0-1001\n.venv/share/jupyter/lab/static/4735.7731d551ca68bcb58e9f.js:0-610\n.venv/share/jupyter/lab/static/index.out.js:2050-2800\n.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/download.json:0-465\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/651.fe40a967a60b543cf15c.js:0-82\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/plugin.json:0-375\n.venv/share/jupyter/lab/static/5090.404be96d8a6eae1e719a.js:0-83\n.venv/Lib/site-packages/jupyter.py:0-156&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r\n    from .handlers.announcements import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r\n    from jupyterlab_server.translation_utils import translator\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r\n    from .app import LabServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 10, in &lt;module&gt;\r\n    from jupyter_server.extension.application import ExtensionApp, ExtensionAppJinjaMixin\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\extension\\application.py\&quot;, line 17, in &lt;module&gt;\r\n    from jupyter_server.serverapp import ServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\serverapp.py\&quot;, line 122, in &lt;module&gt;\r\n    from jupyter_server.services.contents.filemanager import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyter_server\\services\\contents\\filemanager.py\&quot;, line 25, in &lt;module&gt;\r\n    from send2trash import send2trash\r\nModuleNotFoundError: No module named 'send2trash'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T14:17:56.342Z&quot;,&quot;response_text&quot;:&quot;这个错误是因为缺少 `send2trash` 模块导致的。从错误信息可以看出，`jupyter-server` 依赖 `send2trash` 模块，但在你的虚拟环境中没有安装。\n\n虽然从 `uv.lock` 文件中可以看到 `jupyter-server` 列出了 `send2trash` 作为依赖项，但似乎没有正确安装。\n\n解决方案：\n\n````txt path=requirements.txt mode=EDIT\nsend2trash\n````\n\n然后在终端中运行：\n\n```bash\n# 如果使用 uv\nuv add send2trash\n\n# 或者使用 pip\npip install send2trash\n```\n\n如果你使用的是 `uv`，也可以尝试重新同步依赖：\n\n```bash\nuv sync\n```\n\n这应该能解决 Jupyter 服务器启动失败的问题。`send2trash` 是一个用于安全删除文件到回收站的库，是 Jupyter Server 的必需依赖。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;99&quot;,&quot;blob_name&quot;:&quot;d44d517a45445e3a894a05db2cbdaa267afda48d02bc29b37487a84e42aeef2b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyter_server_terminals.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;86&quot;,&quot;blob_name&quot;:&quot;5955c9b988446607da1815ce180d5beadf06f2e4d57157522eb938301c666f89&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyter-lsp-jupyter-server.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;1242&quot;,&quot;blob_name&quot;:&quot;8db86b942f623683797d5d39f3c566a9b5011a4fa745aee6bc34b68b4fd6772e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;2528&quot;,&quot;char_end&quot;:&quot;3376&quot;,&quot;blob_name&quot;:&quot;8db86b942f623683797d5d39f3c566a9b5011a4fa745aee6bc34b68b4fd6772e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;3376&quot;,&quot;char_end&quot;:&quot;4162&quot;,&quot;blob_name&quot;:&quot;8db86b942f623683797d5d39f3c566a9b5011a4fa745aee6bc34b68b4fd6772e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;227&quot;,&quot;blob_name&quot;:&quot;2ff2d8a0001b32add3ae31e30450a2e7a91a9fe6cf08ba86acb42b744c4b7f99&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/applications/jupyterlab.desktop&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;83&quot;,&quot;blob_name&quot;:&quot;c6f8f455989369b18a2a8b630ef489802e660f66093b8883642c9ef1b4e20329&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/notebook.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;106&quot;,&quot;blob_name&quot;:&quot;f3b954b287d902703769ff37d50cf8556ce9e8beb9dc6f192b5a87daa1bcd3e3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/notebook_shim.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;85&quot;,&quot;blob_name&quot;:&quot;d884d5d49d7d5a99198d9636ed05878e6178df019079725e4eab4b5c23446107&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyterlab.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;923&quot;,&quot;blob_name&quot;:&quot;ff176614441386b5357ae5171532eb184d50c8d298a802156e6772e8f9a66313&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;923&quot;,&quot;char_end&quot;:&quot;1514&quot;,&quot;blob_name&quot;:&quot;ff176614441386b5357ae5171532eb184d50c8d298a802156e6772e8f9a66313&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;613&quot;,&quot;blob_name&quot;:&quot;cf15b9fe0556ba986ea4aed678c0cd56a63650d14eb4f9ddeb3517c9c39179d6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/hub-extension/menu.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;197&quot;,&quot;blob_name&quot;:&quot;3b0183d330e29b40b0b5495dbd49ae4364f8ecd7ab742f0ccd45028284e2366e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/install.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;850&quot;,&quot;blob_name&quot;:&quot;0d98f8f270ca7e59a4274b8eafd63a5d50723ab7c2ba37b3120896e33420e96e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/package.json.orig&quot;}},{&quot;char_start&quot;:&quot;850&quot;,&quot;char_end&quot;:&quot;1580&quot;,&quot;blob_name&quot;:&quot;0d98f8f270ca7e59a4274b8eafd63a5d50723ab7c2ba37b3120896e33420e96e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/package.json.orig&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;427&quot;,&quot;blob_name&quot;:&quot;27735ce61db558e884b008e24361fe532cd37b52b8727a68e149d7c0e1b492ba&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/static/227.6bd3154334bb91c5ca1c.js.LICENSE.txt&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;242&quot;,&quot;blob_name&quot;:&quot;5433d4e5faaab8d6e34f3ecf582a780cd6c6bf4761b0a8fdb800bf8ddc4b90aa&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/applications/jupyter-notebook.desktop&quot;}},{&quot;char_start&quot;:&quot;850&quot;,&quot;char_end&quot;:&quot;1580&quot;,&quot;blob_name&quot;:&quot;c9c13a3574e85efd907aa54d438137bb95a953f1d698a9e5ba891fa340f86308&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/package.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;82&quot;,&quot;blob_name&quot;:&quot;d70d24785a6fb027151c96219debfadafa63d295b880000cdba10c6017c18ab4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/439.b350310d057b43cdd50f.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;512&quot;,&quot;blob_name&quot;:&quot;9d71eb1e0cff5a6f2171031bdc2881f102fa7a012fa2be0015a494ee22928d30&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/ipykernel_launcher.py&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;e0fd619b2e0ca5897103d81f8b2159ce3039162efc37329b2ffef70df19fc44a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;e0fd619b2e0ca5897103d81f8b2159ce3039162efc37329b2ffef70df19fc44a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;160&quot;,&quot;blob_name&quot;:&quot;19bfd2310420ea32d99d13311554e97ef1e2f0a7466c50580ff723b9c03d4aae&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/439.b350310d057b43cdd50f.js.LICENSE.txt&quot;}},{&quot;char_start&quot;:&quot;859&quot;,&quot;char_end&quot;:&quot;1666&quot;,&quot;blob_name&quot;:&quot;3a6a60567c2b56c4161e53e11cf1ef6ed4c25a6382d20f2de8938034481f0ecf&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/jupyterlab_pygments/package.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;1028&quot;,&quot;blob_name&quot;:&quot;32a6792614d0d33b2140db6bf2be23c88b121cc28ca30fda6f5e6582eae014f4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyter-notebook/application-extension/menus.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;279&quot;,&quot;blob_name&quot;:&quot;72e571917fb4da5ea26cc9dd58764d045622ce341f390c43ec60fe702f100233&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;279&quot;,&quot;char_end&quot;:&quot;1268&quot;,&quot;blob_name&quot;:&quot;72e571917fb4da5ea26cc9dd58764d045622ce341f390c43ec60fe702f100233&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;190&quot;,&quot;blob_name&quot;:&quot;1e4147e17a8c30919336757e14fa9870b28fdd350fc004fa211e079dc89d04d7&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/701.043aefe0b66133629348.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;193&quot;,&quot;blob_name&quot;:&quot;c2db094294d470498a6314bb8769e6a190a2ceebc122d77c6b7fe64d7bc0c121&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/kernels/python3/kernel.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;669&quot;,&quot;blob_name&quot;:&quot;6018568dc701817359ffb4017f5c5b26396b4c6a8ac3453aad92ab6b5a1a6785&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/notebook-extension/export.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;87&quot;,&quot;blob_name&quot;:&quot;c12734d11d0f483db81fba01f5d2d1806379393bee7ce68e7577c8eac68728ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_notebook_config.d/jupyterlab.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;99&quot;,&quot;blob_name&quot;:&quot;562d0352cf2d71152bdac470bdad3a5af06e7f9839ee598606f83829ce237645&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/static/5090.404be96d8a6eae1e719a.js.LICENSE.txt&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;199&quot;,&quot;blob_name&quot;:&quot;b89ec485e6c53be75cc010c6cd6c0b9a1142d83a2ac1bf22a1d3161c87254571&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/jupyterlab_pygments/install.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;835&quot;,&quot;blob_name&quot;:&quot;6456690365676625847d687a022da14110ef7896e880d0c4d44fb94283ab141a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/application-extension/context-menu.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;696&quot;,&quot;blob_name&quot;:&quot;29c88f835c3374c7cfb6c35d767a8d2490fe4ca873a9379a625b5409f0f4ea1f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/third-party-licenses.json&quot;}},{&quot;char_start&quot;:&quot;6012&quot;,&quot;char_end&quot;:&quot;6101&quot;,&quot;blob_name&quot;:&quot;29c88f835c3374c7cfb6c35d767a8d2490fe4ca873a9379a625b5409f0f4ea1f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/third-party-licenses.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;218&quot;,&quot;blob_name&quot;:&quot;e132b455fafd60a776dfebd43152fb1e5e1b105c79aae9e33d61f0d938090578&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/651.fe40a967a60b543cf15c.js.LICENSE.txt&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;1001&quot;,&quot;blob_name&quot;:&quot;09e2fb477325e46be722b26e8b533240efef20ffe6abdcdc605606289af3c790&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/mainmenu-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;610&quot;,&quot;blob_name&quot;:&quot;95499fc923f12efeda4452f1c8a4638ff0952012f5af4187c7f88717e8d9b719&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/static/4735.7731d551ca68bcb58e9f.js&quot;}},{&quot;char_start&quot;:&quot;2050&quot;,&quot;char_end&quot;:&quot;2800&quot;,&quot;blob_name&quot;:&quot;d73c1a90803f9ea841eb6820e20aa0b737912e099720500486e60d7af3a6e77d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/static/index.out.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;465&quot;,&quot;blob_name&quot;:&quot;aae7e6b28d6ab8e915fe67ddaa142974bc5e6cde74c9c2240226d851b18c8063&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/download.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;82&quot;,&quot;blob_name&quot;:&quot;23c830d1eb5c3312216f91c4ab1eb4d409e7193302389c46debdb7cadedb69eb&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/651.fe40a967a60b543cf15c.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;375&quot;,&quot;blob_name&quot;:&quot;ad98140b85aa312855f2c58937d5dfc0145f2b9b001d1693cf30337cf5770a18&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;83&quot;,&quot;blob_name&quot;:&quot;2123b71cabbb7e41a899354d6c00ca84f9232e53ef5c2f3233cb8b80e0c6db1e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/static/5090.404be96d8a6eae1e719a.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;156&quot;,&quot;blob_name&quot;:&quot;4136c17ad604dbd7e482c5e5c9db021a7a2c7435460733009170fb574ec2f21b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter.py&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;d4c6f859-06fd-457b-a3dd-83d8384344c3&quot;,&quot;request_message&quot;:&quot;pycharm中使用jupyter需要安装什么依赖&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;pycharm中使用jupyter需要安装什么依赖&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;在 PyCharm 中使用 Jupyter 需要安装以下核心依赖：\n\n## 基础依赖\n\n&lt;augment_code_snippet path=\&quot;requirements.txt\&quot; mode=\&quot;EDIT\&quot;&gt;\n```txt\n# Jupyter 核心组件\njupyter&gt;=1.1.1\njupyterlab&gt;=4.0.0\nnotebook&gt;=7.0.0\nipykernel&gt;=6.0.0\n\n# 必需的支持库\nsend2trash&gt;=1.8.3\ntornado&gt;=6.0.0\npyzmq&gt;=24.0.0\n```\n&lt;/augment_code_snippet&gt;\n\n## 推荐的完整配置\n\n&lt;augment_code_snippet path=\&quot;pyproject.toml\&quot; mode=\&quot;EDIT\&quot;&gt;\n```toml\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;jupyterlab&gt;=4.4.0\&quot;,\n    \&quot;notebook&gt;=7.4.0\&quot;,\n    \&quot;ipykernel&gt;=6.30.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    \&quot;ipywidgets&gt;=8.0.0\&quot;,  # 交互式组件\n    \&quot;matplotlib&gt;=3.7.0\&quot;,  # 图表显示\n    \&quot;pandas&gt;=2.0.0\&quot;,      # 数据分析\n    \&quot;numpy&gt;=1.24.0\&quot;,      # 数值计算\n]\n```\n&lt;/augment_code_snippet&gt;\n\n## 安装命令\n\n```bash\n# 使用 uv (推荐)\nuv add jupyter jupyterlab notebook ipykernel send2trash\n\n# 或使用 pip\npip install jupyter jupyterlab notebook ipykernel send2trash\n```\n\n## PyCharm 配置步骤\n\n1. **配置 Python 解释器**：\n   - File → Settings → Project → Python Interpreter\n   - 选择包含 Jupyter 的虚拟环境\n\n2. **启用 Jupyter 支持**：\n   - File → Settings → Languages &amp; Frameworks → Jupyter\n   - 确保启用 \&quot;Start Jupyter server automatically\&quot;\n\n3. **创建 Jupyter Notebook**：\n   - 右键项目 → New → Jupyter Notebook\n\n## 常见问题解决\n\n如果遇到启动问题，尝试：\n\n```bash\n# 重新安装 Jupyter 内核\npython -m ipykernel install --user --name=your-env-name\n\n# 清理并重新安装\npip uninstall jupyter jupyterlab notebook -y\npip install jupyter jupyterlab notebook\n```\n\n从你的 `pyproject.toml` 看，你已经有了基础的 `jupyter` 和 `send2trash` 依赖，但可能需要确保所有组件都正确安装。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;pyproject.toml:0-211\nuv.lock:49575-50095\nuv.lock:50695-51293\nuv.lock:59123-59415\nuv.lock:60012-60279\nuv.lock:60887-61242\nuv.lock:62739-63140\nuv.lock:64502-65218\nuv.lock:65828-66045\nuv.lock:66671-67169\nuv.lock:70158-70458\nuv.lock:85936-86174\nuv.lock:89452-89726\nuv.lock:89726-90482\ndep_version.md:2255-3003\ndep_version.md:3003-3747\nlangchain/dataConnection/dataConnetction.ipynb:0-810\nlangchain/dataConnection/dataConnetction.ipynb:810-1023\nlangchain/dataConnection/dataConnetction.ipynb:5588-6588\nlangchain/dataConnection/dataConnetction.ipynb:10698-11424&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;pycharm中使用jupyter需要安装什么依赖&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T14:30:42.665Z&quot;,&quot;response_text&quot;:&quot;在 PyCharm 中使用 Jupyter 需要安装以下核心依赖：\n\n## 基础依赖\n\n````txt path=requirements.txt mode=EDIT\n# Jupyter 核心组件\njupyter&gt;=1.1.1\njupyterlab&gt;=4.0.0\nnotebook&gt;=7.0.0\nipykernel&gt;=6.0.0\n\n# 必需的支持库\nsend2trash&gt;=1.8.3\ntornado&gt;=6.0.0\npyzmq&gt;=24.0.0\n````\n\n## 推荐的完整配置\n\n````toml path=pyproject.toml mode=EDIT\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;jupyterlab&gt;=4.4.0\&quot;,\n    \&quot;notebook&gt;=7.4.0\&quot;,\n    \&quot;ipykernel&gt;=6.30.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    \&quot;ipywidgets&gt;=8.0.0\&quot;,  # 交互式组件\n    \&quot;matplotlib&gt;=3.7.0\&quot;,  # 图表显示\n    \&quot;pandas&gt;=2.0.0\&quot;,      # 数据分析\n    \&quot;numpy&gt;=1.24.0\&quot;,      # 数值计算\n]\n````\n\n## 安装命令\n\n```bash\n# 使用 uv (推荐)\nuv add jupyter jupyterlab notebook ipykernel send2trash\n\n# 或使用 pip\npip install jupyter jupyterlab notebook ipykernel send2trash\n```\n\n## PyCharm 配置步骤\n\n1. **配置 Python 解释器**：\n   - File → Settings → Project → Python Interpreter\n   - 选择包含 Jupyter 的虚拟环境\n\n2. **启用 Jupyter 支持**：\n   - File → Settings → Languages &amp; Frameworks → Jupyter\n   - 确保启用 \&quot;Start Jupyter server automatically\&quot;\n\n3. **创建 Jupyter Notebook**：\n   - 右键项目 → New → Jupyter Notebook\n\n## 常见问题解决\n\n如果遇到启动问题，尝试：\n\n```bash\n# 重新安装 Jupyter 内核\npython -m ipykernel install --user --name=your-env-name\n\n# 清理并重新安装\npip uninstall jupyter jupyterlab notebook -y\npip install jupyter jupyterlab notebook\n```\n\n从你的 `pyproject.toml` 看，你已经有了基础的 `jupyter` 和 `send2trash` 依赖，但可能需要确保所有组件都正确安装。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;211&quot;,&quot;blob_name&quot;:&quot;d2c9e9f485d42ce9ffab622567de2cd395ee2c757260564e8851c4307fbdf565&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;49575&quot;,&quot;char_end&quot;:&quot;50095&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;50695&quot;,&quot;char_end&quot;:&quot;51293&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;59123&quot;,&quot;char_end&quot;:&quot;59415&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60012&quot;,&quot;char_end&quot;:&quot;60279&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60887&quot;,&quot;char_end&quot;:&quot;61242&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;62739&quot;,&quot;char_end&quot;:&quot;63140&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;66671&quot;,&quot;char_end&quot;:&quot;67169&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;70158&quot;,&quot;char_end&quot;:&quot;70458&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;85936&quot;,&quot;char_end&quot;:&quot;86174&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;89452&quot;,&quot;char_end&quot;:&quot;89726&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;89726&quot;,&quot;char_end&quot;:&quot;90482&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;2255&quot;,&quot;char_end&quot;:&quot;3003&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;3003&quot;,&quot;char_end&quot;:&quot;3747&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;810&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;810&quot;,&quot;char_end&quot;:&quot;1023&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;5588&quot;,&quot;char_end&quot;:&quot;6588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;10698&quot;,&quot;char_end&quot;:&quot;11424&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;06a2780a-5567-4bad-bca4-8d5dc9b93fd1&quot;,&quot;request_message&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r\n    from .handlers.announcements import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r\n    from jupyterlab_server.translation_utils import translator\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r\n    from .app import LabServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 15, in &lt;module&gt;\r\n    from .handlers import LabConfig, add_handlers\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\handlers.py\&quot;, line 22, in &lt;module&gt;\r\n    from .settings_handler import SettingsHandler\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_handler.py\&quot;, line 14, in &lt;module&gt;\r\n    from .settings_utils import SchemaHandler, get_settings, save_settings\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_utils.py\&quot;, line 20, in &lt;module&gt;\r\n    from .translation_utils import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\translation_utils.py\&quot;, line 22, in &lt;module&gt;\r\n    import babel\r\nModuleNotFoundError: No module named 'babel'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Traceback (most recent call last):\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .handlers.announcements import (\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyterlab_server.translation_utils import translator\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .app import LabServerApp\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 15, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .handlers import LabConfig, add_handlers\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\handlers.py\&quot;, line 22, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .settings_handler import SettingsHandler\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_handler.py\&quot;, line 14, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .settings_utils import SchemaHandler, get_settings, save_settings\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_utils.py\&quot;, line 20, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .translation_utils import (\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\translation_utils.py\&quot;, line 22, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    import babel\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;ModuleNotFoundError: No module named 'babel'\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;现在错误显示缺少 `babel` 模块。这是 JupyterLab 的国际化依赖。需要安装 `babel` 包：\n\n## 快速解决方案\n\n```bash\n# 使用 uv\nuv add babel\n\n# 或使用 pip\npip install babel\n```\n\n## 完整的 Jupyter 依赖配置\n\n&lt;augment_code_snippet path=\&quot;pyproject.toml\&quot; mode=\&quot;EDIT\&quot;&gt;\n```toml\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;jupyterlab&gt;=4.0.0\&quot;,\n    \&quot;notebook&gt;=7.0.0\&quot;,\n    \&quot;ipykernel&gt;=6.0.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    \&quot;babel&gt;=2.12.0\&quot;,\n    \&quot;tornado&gt;=6.0.0\&quot;,\n    \&quot;pyzmq&gt;=24.0.0\&quot;,\n    \&quot;jupyter-server&gt;=2.0.0\&quot;,\n    \&quot;jupyterlab-server&gt;=2.0.0\&quot;,\n]\n```\n&lt;/augment_code_snippet&gt;\n\n## 一次性安装所有必需依赖\n\n```bash\n# 使用 uv 安装完整依赖\nuv add jupyter jupyterlab notebook ipykernel send2trash babel tornado pyzmq jupyter-server jupyterlab-server\n\n# 或使用 pip\npip install jupyter jupyterlab notebook ipykernel send2trash babel tornado pyzmq jupyter-server jupyterlab-server\n```\n\n## 验证安装\n\n安装完成后，可以在终端中验证：\n\n```bash\n# 检查 Jupyter 是否正常\njupyter --version\n\n# 检查 JupyterLab 是否正常\njupyter lab --version\n\n# 测试启动（可选）\njupyter lab --no-browser --port=8888\n```\n\n`babel` 是 JupyterLab 用于国际化和本地化的库，是 JupyterLab Server 的必需依赖。安装后应该能解决这个启动问题。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb:0-810\nlangchain/dataConnection/dataConnetction.ipynb:810-1023\nlangchain/dataConnection/dataConnetction.ipynb:1023-1926\nlangchain/dataConnection/dataConnetction.ipynb:3186-4056\nlangchain/dataConnection/dataConnetction.ipynb:4056-4929\nlangchain/dataConnection/dataConnetction.ipynb:4929-5588\nlangchain/dataConnection/dataConnetction.ipynb:5588-6588\nlangchain/dataConnection/dataConnetction.ipynb:10698-11424\nlangchain/dataConnection/dataConnetction.ipynb:14221-15182\nlangchain/dataConnection/dataConnetction.ipynb:15182-15768\nlangchain/dataConnection/dataConnetction.ipynb:15768-16283\nuv.lock:64502-65218\nuv.lock:65218-65828\nuv.lock:65828-66045\npyproject.toml:0-211&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r\n    from .handlers.announcements import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r\n    from jupyterlab_server.translation_utils import translator\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r\n    from .app import LabServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 15, in &lt;module&gt;\r\n    from .handlers import LabConfig, add_handlers\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\handlers.py\&quot;, line 22, in &lt;module&gt;\r\n    from .settings_handler import SettingsHandler\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_handler.py\&quot;, line 14, in &lt;module&gt;\r\n    from .settings_utils import SchemaHandler, get_settings, save_settings\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_utils.py\&quot;, line 20, in &lt;module&gt;\r\n    from .translation_utils import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\translation_utils.py\&quot;, line 22, in &lt;module&gt;\r\n    import babel\r\nModuleNotFoundError: No module named 'babel'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T14:31:43.453Z&quot;,&quot;response_text&quot;:&quot;现在错误显示缺少 `babel` 模块。这是 JupyterLab 的国际化依赖。需要安装 `babel` 包：\n\n## 快速解决方案\n\n```bash\n# 使用 uv\nuv add babel\n\n# 或使用 pip\npip install babel\n```\n\n## 完整的 Jupyter 依赖配置\n\n````toml path=pyproject.toml mode=EDIT\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;jupyterlab&gt;=4.0.0\&quot;,\n    \&quot;notebook&gt;=7.0.0\&quot;,\n    \&quot;ipykernel&gt;=6.0.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    \&quot;babel&gt;=2.12.0\&quot;,\n    \&quot;tornado&gt;=6.0.0\&quot;,\n    \&quot;pyzmq&gt;=24.0.0\&quot;,\n    \&quot;jupyter-server&gt;=2.0.0\&quot;,\n    \&quot;jupyterlab-server&gt;=2.0.0\&quot;,\n]\n````\n\n## 一次性安装所有必需依赖\n\n```bash\n# 使用 uv 安装完整依赖\nuv add jupyter jupyterlab notebook ipykernel send2trash babel tornado pyzmq jupyter-server jupyterlab-server\n\n# 或使用 pip\npip install jupyter jupyterlab notebook ipykernel send2trash babel tornado pyzmq jupyter-server jupyterlab-server\n```\n\n## 验证安装\n\n安装完成后，可以在终端中验证：\n\n```bash\n# 检查 Jupyter 是否正常\njupyter --version\n\n# 检查 JupyterLab 是否正常\njupyter lab --version\n\n# 测试启动（可选）\njupyter lab --no-browser --port=8888\n```\n\n`babel` 是 JupyterLab 用于国际化和本地化的库，是 JupyterLab Server 的必需依赖。安装后应该能解决这个启动问题。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;810&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;810&quot;,&quot;char_end&quot;:&quot;1023&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;1023&quot;,&quot;char_end&quot;:&quot;1926&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;3186&quot;,&quot;char_end&quot;:&quot;4056&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;4056&quot;,&quot;char_end&quot;:&quot;4929&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;4929&quot;,&quot;char_end&quot;:&quot;5588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;5588&quot;,&quot;char_end&quot;:&quot;6588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;10698&quot;,&quot;char_end&quot;:&quot;11424&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;14221&quot;,&quot;char_end&quot;:&quot;15182&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;15182&quot;,&quot;char_end&quot;:&quot;15768&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;15768&quot;,&quot;char_end&quot;:&quot;16283&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65218&quot;,&quot;char_end&quot;:&quot;65828&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;853955fe554979a187d8e262ff96a4fc35c469f84499cbf83764511cd1c46e70&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;211&quot;,&quot;blob_name&quot;:&quot;d2c9e9f485d42ce9ffab622567de2cd395ee2c757260564e8851c4307fbdf565&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;6c135a79-c8fb-4ba1-a4db-33185e2fd61e&quot;,&quot;request_message&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r\n    from .handlers.announcements import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r\n    from jupyterlab_server.translation_utils import translator\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r\n    from .app import LabServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 15, in &lt;module&gt;\r\n    from .handlers import LabConfig, add_handlers\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\handlers.py\&quot;, line 22, in &lt;module&gt;\r\n    from .settings_handler import SettingsHandler\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_handler.py\&quot;, line 14, in &lt;module&gt;\r\n    from .settings_utils import SchemaHandler, get_settings, save_settings\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_utils.py\&quot;, line 20, in &lt;module&gt;\r\n    from .translation_utils import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\translation_utils.py\&quot;, line 22, in &lt;module&gt;\r\n    import babel\r\nModuleNotFoundError: No module named 'babel'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Traceback (most recent call last):\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .handlers.announcements import (\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyterlab_server.translation_utils import translator\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .app import LabServerApp\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 15, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .handlers import LabConfig, add_handlers\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\handlers.py\&quot;, line 22, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .settings_handler import SettingsHandler\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_handler.py\&quot;, line 14, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .settings_utils import SchemaHandler, get_settings, save_settings\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_utils.py\&quot;, line 20, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .translation_utils import (\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\translation_utils.py\&quot;, line 22, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    import babel\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;ModuleNotFoundError: No module named 'babel'\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;看起来依然是 `babel` 模块缺失的问题。让我们尝试几种解决方案：\n\n## 方案1：直接安装 babel\n\n```bash\n# 确保在正确的虚拟环境中\nuv add babel\n\n# 或者指定版本\nuv add \&quot;babel&gt;=2.12.0\&quot;\n```\n\n## 方案2：重新安装 JupyterLab 及其依赖\n\n```bash\n# 卸载并重新安装\nuv remove jupyterlab jupyterlab-server\nuv add jupyterlab jupyterlab-server babel\n```\n\n## 方案3：使用 notebook 而不是 jupyterlab\n\n如果 JupyterLab 依赖问题持续，可以尝试使用经典的 Jupyter Notebook：\n\n&lt;augment_code_snippet path=\&quot;pyproject.toml\&quot; mode=\&quot;EDIT\&quot;&gt;\n```toml\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;notebook&gt;=7.0.0\&quot;,\n    \&quot;ipykernel&gt;=6.0.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    # 暂时移除 jupyterlab 相关依赖\n    # \&quot;jupyterlab&gt;=4.0.0\&quot;,\n    # \&quot;jupyterlab-server&gt;=2.0.0\&quot;,\n]\n```\n&lt;/augment_code_snippet&gt;\n\n## 方案4：检查虚拟环境\n\n确认你在正确的虚拟环境中：\n\n```bash\n# 检查当前环境\nwhich python\npython -c \&quot;import sys; print(sys.executable)\&quot;\n\n# 检查已安装的包\nuv pip list | grep babel\n```\n\n## 方案5：手动安装完整依赖链\n\n```bash\n# 按顺序安装\nuv add babel\nuv add jupyterlab-server\nuv add jupyterlab\n```\n\n## 临时解决方案\n\n如果上述方案都不行，可以在 PyCharm 中配置使用经典 Jupyter Notebook：\n\n1. File → Settings → Languages &amp; Frameworks → Jupyter\n2. 将 \&quot;Jupyter server type\&quot; 改为 \&quot;Notebook\&quot;\n3. 重启 PyCharm\n\n建议先尝试方案1，如果不行再依次尝试其他方案。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb:0-810\nlangchain/dataConnection/dataConnetction.ipynb:810-1023\nlangchain/dataConnection/dataConnetction.ipynb:1023-1926\nlangchain/dataConnection/dataConnetction.ipynb:3186-4056\nlangchain/dataConnection/dataConnetction.ipynb:4056-4929\nlangchain/dataConnection/dataConnetction.ipynb:4929-5588\nlangchain/dataConnection/dataConnetction.ipynb:5588-6588\nlangchain/dataConnection/dataConnetction.ipynb:10698-11424\nlangchain/dataConnection/dataConnetction.ipynb:14221-15182\nlangchain/dataConnection/dataConnetction.ipynb:15182-15768\nlangchain/dataConnection/dataConnetction.ipynb:15768-16283\nuv.lock:64502-65218\nuv.lock:65218-65828\nuv.lock:65828-66045\npyproject.toml:0-211&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 189, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 148, in _get_module_details\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 112, in _get_module_details\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__init__.py\&quot;, line 8, in &lt;module&gt;\r\n    from .handlers.announcements import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\handlers\\announcements.py\&quot;, line 16, in &lt;module&gt;\r\n    from jupyterlab_server.translation_utils import translator\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\__init__.py\&quot;, line 6, in &lt;module&gt;\r\n    from .app import LabServerApp\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\app.py\&quot;, line 15, in &lt;module&gt;\r\n    from .handlers import LabConfig, add_handlers\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\handlers.py\&quot;, line 22, in &lt;module&gt;\r\n    from .settings_handler import SettingsHandler\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_handler.py\&quot;, line 14, in &lt;module&gt;\r\n    from .settings_utils import SchemaHandler, get_settings, save_settings\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\settings_utils.py\&quot;, line 20, in &lt;module&gt;\r\n    from .translation_utils import (\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab_server\\translation_utils.py\&quot;, line 22, in &lt;module&gt;\r\n    import babel\r\nModuleNotFoundError: No module named 'babel'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T14:32:34.481Z&quot;,&quot;response_text&quot;:&quot;看起来依然是 `babel` 模块缺失的问题。让我们尝试几种解决方案：\n\n## 方案1：直接安装 babel\n\n```bash\n# 确保在正确的虚拟环境中\nuv add babel\n\n# 或者指定版本\nuv add \&quot;babel&gt;=2.12.0\&quot;\n```\n\n## 方案2：重新安装 JupyterLab 及其依赖\n\n```bash\n# 卸载并重新安装\nuv remove jupyterlab jupyterlab-server\nuv add jupyterlab jupyterlab-server babel\n```\n\n## 方案3：使用 notebook 而不是 jupyterlab\n\n如果 JupyterLab 依赖问题持续，可以尝试使用经典的 Jupyter Notebook：\n\n````toml path=pyproject.toml mode=EDIT\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;notebook&gt;=7.0.0\&quot;,\n    \&quot;ipykernel&gt;=6.0.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    # 暂时移除 jupyterlab 相关依赖\n    # \&quot;jupyterlab&gt;=4.0.0\&quot;,\n    # \&quot;jupyterlab-server&gt;=2.0.0\&quot;,\n]\n````\n\n## 方案4：检查虚拟环境\n\n确认你在正确的虚拟环境中：\n\n```bash\n# 检查当前环境\nwhich python\npython -c \&quot;import sys; print(sys.executable)\&quot;\n\n# 检查已安装的包\nuv pip list | grep babel\n```\n\n## 方案5：手动安装完整依赖链\n\n```bash\n# 按顺序安装\nuv add babel\nuv add jupyterlab-server\nuv add jupyterlab\n```\n\n## 临时解决方案\n\n如果上述方案都不行，可以在 PyCharm 中配置使用经典 Jupyter Notebook：\n\n1. File → Settings → Languages &amp; Frameworks → Jupyter\n2. 将 \&quot;Jupyter server type\&quot; 改为 \&quot;Notebook\&quot;\n3. 重启 PyCharm\n\n建议先尝试方案1，如果不行再依次尝试其他方案。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;810&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;810&quot;,&quot;char_end&quot;:&quot;1023&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;1023&quot;,&quot;char_end&quot;:&quot;1926&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;3186&quot;,&quot;char_end&quot;:&quot;4056&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;4056&quot;,&quot;char_end&quot;:&quot;4929&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;4929&quot;,&quot;char_end&quot;:&quot;5588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;5588&quot;,&quot;char_end&quot;:&quot;6588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;10698&quot;,&quot;char_end&quot;:&quot;11424&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;14221&quot;,&quot;char_end&quot;:&quot;15182&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;15182&quot;,&quot;char_end&quot;:&quot;15768&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;15768&quot;,&quot;char_end&quot;:&quot;16283&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65218&quot;,&quot;char_end&quot;:&quot;65828&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;211&quot;,&quot;blob_name&quot;:&quot;d2c9e9f485d42ce9ffab622567de2cd395ee2c757260564e8851c4307fbdf565&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;542e4a74-8aab-4636-b214-3d8bed23df08&quot;,&quot;request_message&quot;:&quot; x Failed to read `debugpy==1.8.15`\r\n  |-&gt; Failed to read metadata from installed package `debugpy==1.8.15`\r\n  `-&gt; failed to open file `D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\debugpy-1.8.15.dist-info\\METADATA`: 系统找不到指定的文件。 (os error 2)\r\n  help: `debugpy` (v1.8.15) was included because `ipykernel` (v6.30.0) depends on `debugpy&gt;=1.6.5`&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot; x Failed to read `debugpy==1.8.15`\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  |-&gt; Failed to read metadata from installed package `debugpy==1.8.15`\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  `-&gt; failed to open file `D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\debugpy-1.8.15.dist-info\\METADATA`: 系统找不到指定的文件。 (os error 2)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  help: `debugpy` (v1.8.15) was included because `ipykernel` (v6.30.0) depends on `debugpy&gt;=1.6.5`&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;这个错误表明 `debugpy` 包的元数据文件损坏或丢失。这通常是由于安装过程中断或文件系统问题导致的。\n\n## 解决方案\n\n### 方案1：重新安装 debugpy\n\n```bash\n# 强制重新安装 debugpy\nuv remove debugpy\nuv add debugpy\n\n# 或者指定版本\nuv add \&quot;debugpy&gt;=1.8.0\&quot;\n```\n\n### 方案2：清理并重新安装相关包\n\n```bash\n# 移除相关包\nuv remove debugpy ipykernel jupyter\n\n# 重新安装\nuv add debugpy ipykernel jupyter babel\n```\n\n### 方案3：完全重建虚拟环境\n\n如果问题持续，建议重建虚拟环境：\n\n```bash\n# 删除现有虚拟环境\nrm -rf .venv\n\n# 重新创建虚拟环境\nuv venv\n\n# 激活虚拟环境（Windows）\n.venv\\Scripts\\activate\n\n# 安装依赖\nuv sync\n```\n\n### 方案4：手动清理损坏的包\n\n```bash\n# 手动删除损坏的 debugpy 目录\nrm -rf .venv/Lib/site-packages/debugpy*\n\n# 重新安装\nuv add debugpy\n```\n\n### 方案5：更新 pyproject.toml 并同步\n\n&lt;augment_code_snippet path=\&quot;pyproject.toml\&quot; mode=\&quot;EDIT\&quot;&gt;\n```toml\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;notebook&gt;=7.0.0\&quot;, \n    \&quot;ipykernel&gt;=6.30.0\&quot;,\n    \&quot;debugpy&gt;=1.8.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    \&quot;babel&gt;=2.17.0\&quot;,\n]\n```\n&lt;/augment_code_snippet&gt;\n\n然后运行：\n\n```bash\nuv sync --reinstall\n```\n\n### 验证修复\n\n安装完成后验证：\n\n```bash\n# 检查 debugpy 是否正常\npython -c \&quot;import debugpy; print(debugpy.__version__)\&quot;\n\n# 检查 jupyter 是否正常\njupyter --version\n```\n\n建议先尝试方案1，如果不行再考虑重建虚拟环境（方案3）。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;pyproject.toml:0-211\nuv.lock:0-293\nuv.lock:38553-39270\nuv.lock:48089-48305\nuv.lock:49575-50095\nuv.lock:50695-51293\nuv.lock:57153-57398\nuv.lock:59123-59415\nuv.lock:62739-63140\nuv.lock:63140-63902\nuv.lock:64502-65218\nuv.lock:65828-66045\nuv.lock:70158-70768\nuv.lock:97116-97818\nuv.lock:99800-100502\nuv.lock:104093-104800\nuv.lock:107810-108515\nuv.lock:109436-110141\nuv.lock:118387-118568\nuv.lock:130561-130792\nuv.lock:133625-134336\nuv.lock:168334-168592\ndep_version.md:0-770\ndep_version.md:770-1508\ndep_version.md:1508-2255\ndep_version.md:2255-3003\ndep_version.md:3003-3747\ndep_version.md:3747-4489\ndep_version.md:4489-5242\ndep_version.md:5242-5989\ndep_version.md:5989-6677&quot;}],&quot;seen_state&quot;:&quot;unseen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot; x Failed to read `debugpy==1.8.15`\r\n  |-&gt; Failed to read metadata from installed package `debugpy==1.8.15`\r\n  `-&gt; failed to open file `D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\debugpy-1.8.15.dist-info\\METADATA`: 系统找不到指定的文件。 (os error 2)\r\n  help: `debugpy` (v1.8.15) was included because `ipykernel` (v6.30.0) depends on `debugpy&gt;=1.6.5`&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T14:33:35.241Z&quot;,&quot;display_error_message&quot;:&quot;Generating response... (Attempt 2)&quot;,&quot;isRetriable&quot;:true,&quot;response_text&quot;:&quot;这个错误表明 `debugpy` 包的元数据文件损坏或丢失。这通常是由于安装过程中断或文件系统问题导致的。\n\n## 解决方案\n\n### 方案1：重新安装 debugpy\n\n```bash\n# 强制重新安装 debugpy\nuv remove debugpy\nuv add debugpy\n\n# 或者指定版本\nuv add \&quot;debugpy&gt;=1.8.0\&quot;\n```\n\n### 方案2：清理并重新安装相关包\n\n```bash\n# 移除相关包\nuv remove debugpy ipykernel jupyter\n\n# 重新安装\nuv add debugpy ipykernel jupyter babel\n```\n\n### 方案3：完全重建虚拟环境\n\n如果问题持续，建议重建虚拟环境：\n\n```bash\n# 删除现有虚拟环境\nrm -rf .venv\n\n# 重新创建虚拟环境\nuv venv\n\n# 激活虚拟环境（Windows）\n.venv\\Scripts\\activate\n\n# 安装依赖\nuv sync\n```\n\n### 方案4：手动清理损坏的包\n\n```bash\n# 手动删除损坏的 debugpy 目录\nrm -rf .venv/Lib/site-packages/debugpy*\n\n# 重新安装\nuv add debugpy\n```\n\n### 方案5：更新 pyproject.toml 并同步\n\n````toml path=pyproject.toml mode=EDIT\n[project]\ndependencies = [\n    \&quot;jupyter&gt;=1.1.1\&quot;,\n    \&quot;notebook&gt;=7.0.0\&quot;, \n    \&quot;ipykernel&gt;=6.30.0\&quot;,\n    \&quot;debugpy&gt;=1.8.0\&quot;,\n    \&quot;send2trash&gt;=1.8.3\&quot;,\n    \&quot;babel&gt;=2.17.0\&quot;,\n]\n````\n\n然后运行：\n\n```bash\nuv sync --reinstall\n```\n\n### 验证修复\n\n安装完成后验证：\n\n```bash\n# 检查 debugpy 是否正常\npython -c \&quot;import debugpy; print(debugpy.__version__)\&quot;\n\n# 检查 jupyter 是否正常\njupyter --version\n```\n\n建议先尝试方案1，如果不行再考虑重建虚拟环境（方案3）。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;211&quot;,&quot;blob_name&quot;:&quot;d2c9e9f485d42ce9ffab622567de2cd395ee2c757260564e8851c4307fbdf565&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;38553&quot;,&quot;char_end&quot;:&quot;39270&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;48089&quot;,&quot;char_end&quot;:&quot;48305&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;49575&quot;,&quot;char_end&quot;:&quot;50095&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;50695&quot;,&quot;char_end&quot;:&quot;51293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;57153&quot;,&quot;char_end&quot;:&quot;57398&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;59123&quot;,&quot;char_end&quot;:&quot;59415&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;62739&quot;,&quot;char_end&quot;:&quot;63140&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;63140&quot;,&quot;char_end&quot;:&quot;63902&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;70158&quot;,&quot;char_end&quot;:&quot;70768&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;97116&quot;,&quot;char_end&quot;:&quot;97818&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;99800&quot;,&quot;char_end&quot;:&quot;100502&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;104093&quot;,&quot;char_end&quot;:&quot;104800&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;107810&quot;,&quot;char_end&quot;:&quot;108515&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;109436&quot;,&quot;char_end&quot;:&quot;110141&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;118387&quot;,&quot;char_end&quot;:&quot;118568&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;130561&quot;,&quot;char_end&quot;:&quot;130792&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;133625&quot;,&quot;char_end&quot;:&quot;134336&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;168334&quot;,&quot;char_end&quot;:&quot;168592&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;770&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;770&quot;,&quot;char_end&quot;:&quot;1508&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;1508&quot;,&quot;char_end&quot;:&quot;2255&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;2255&quot;,&quot;char_end&quot;:&quot;3003&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;3003&quot;,&quot;char_end&quot;:&quot;3747&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;3747&quot;,&quot;char_end&quot;:&quot;4489&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;4489&quot;,&quot;char_end&quot;:&quot;5242&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;5242&quot;,&quot;char_end&quot;:&quot;5989&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;5989&quot;,&quot;char_end&quot;:&quot;6677&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-afa0c768-803f-49fd-bf68-3c2d705e0358&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ef2d9e98-1750-4c43-ae66-72918cde4145&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-035674d0-1a70-4cd1-82f1-9957ad87d8a9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-60c4bdf0-5d18-42b3-85ba-e4866df31f64&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4d33c93c-4c1c-42a4-83b4-1d624e16a714&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/dataConnection/dataConnetction.ipynb&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBookfalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false,&quot;isAgentConversation&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;5ae85bce-b7a7-447e-9315-73d9d77741ba&quot;},&quot;42121830-4345-4080-ade2-93ab6e922a71&quot;:{&quot;id&quot;:&quot;42121830-4345-4080-ade2-93ab6e922a71&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T15:19:26.657Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T15:38:45.600Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;4efc8715-dbb5-4e91-9f2b-f3fd83fe2177&quot;,&quot;request_message&quot;:&quot;uv 常用命令&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;uv 常用命令&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;以下是 `uv` 的常用命令：\n\n## 项目管理\n```bash\n# 初始化新项目\nuv init my-project\nuv init --python 3.11  # 指定Python版本\n\n# 添加依赖\nuv add requests\nuv add \&quot;fastapi&gt;=0.68.0\&quot;\nuv add pytest --dev  # 添加开发依赖\n\n# 移除依赖\nuv remove requests\nuv remove pytest --dev\n\n# 同步依赖（根据pyproject.toml安装）\nuv sync\nuv sync --dev  # 包含开发依赖\n```\n\n## 包管理\n```bash\n# 安装包\nuv pip install requests\nuv pip install -r requirements.txt\nuv pip install -e .  # 可编辑安装\n\n# 列出已安装的包\nuv pip list\nuv pip show requests  # 显示包详情\n\n# 卸载包\nuv pip uninstall requests\n```\n\n## Python版本管理\n```bash\n# 列出可用Python版本\nuv python list\n\n# 安装Python版本\nuv python install 3.11\nuv python install 3.12\n\n# 查找Python解释器\nuv python find\nuv python find 3.11\n```\n\n## 虚拟环境\n```bash\n# 创建虚拟环境\nuv venv\nuv venv .venv --python 3.11\n\n# 激活虚拟环境（需要手动）\nsource .venv/bin/activate  # Linux/Mac\n.venv\\Scripts\\activate     # Windows\n```\n\n## 运行和执行\n```bash\n# 运行脚本\nuv run python script.py\nuv run --python 3.11 script.py\n\n# 运行模块\nuv run -m pytest\nuv run -m pip list\n```\n\n## 锁定文件\n```bash\n# 生成锁定文件\nuv lock\n\n# 从锁定文件安装\nuv sync --locked\n```\n\n## 工具运行\n```bash\n# 临时运行工具（不安装到项目）\nuv tool run black .\nuv tool run ruff check\nuv tool run --from requests python -c \&quot;import requests; print(requests.__version__)\&quot;\n```\n\n## 缓存管理\n```bash\n# 清理缓存\nuv cache clean\nuv cache dir  # 显示缓存目录\n```\n\n## 配置\n```bash\n# 查看配置\nuv config list\n\n# 设置配置\nuv config set index-url https://pypi.tuna.tsinghua.edu.cn/simple/\n```\n\n根据你的 `uv.lock` 文件，你的项目已经使用了 `uv` 进行依赖管理，包含了 Jupyter 相关的包。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;uv.lock:0-293\nuv.lock:2337-2491\nuv.lock:9672-9861\nuv.lock:9861-10618\nuv.lock:10618-11280\nuv.lock:48089-48305\nuv.lock:49575-50095\nuv.lock:50695-51293\nuv.lock:52940-53687\nuv.lock:57153-57398\nuv.lock:57998-58489\nuv.lock:59123-59415\nuv.lock:60012-60279\nuv.lock:60887-61242\nuv.lock:62739-63140\nuv.lock:64502-65218\nuv.lock:65828-66045\nuv.lock:66671-67169\nuv.lock:67169-67772\nuv.lock:70158-70768\nuv.lock:87080-87622\nuv.lock:89762-90036\nuv.lock:90036-90792\nuv.lock:96355-97116\nuv.lock:97116-97818\nuv.lock:101892-102592\nuv.lock:118387-118568\nuv.lock:130561-130792\nuv.lock:168334-168592\nuv.lock:168592-169339\nuv.lock:169339-169933\nuv.lock:169933-170643\ndep_version.md:0-770&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;uv 常用命令&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T15:20:15.300Z&quot;,&quot;response_text&quot;:&quot;以下是 `uv` 的常用命令：\n\n## 项目管理\n```bash\n# 初始化新项目\nuv init my-project\nuv init --python 3.11  # 指定Python版本\n\n# 添加依赖\nuv add requests\nuv add \&quot;fastapi&gt;=0.68.0\&quot;\nuv add pytest --dev  # 添加开发依赖\n\n# 移除依赖\nuv remove requests\nuv remove pytest --dev\n\n# 同步依赖（根据pyproject.toml安装）\nuv sync\nuv sync --dev  # 包含开发依赖\n```\n\n## 包管理\n```bash\n# 安装包\nuv pip install requests\nuv pip install -r requirements.txt\nuv pip install -e .  # 可编辑安装\n\n# 列出已安装的包\nuv pip list\nuv pip show requests  # 显示包详情\n\n# 卸载包\nuv pip uninstall requests\n```\n\n## Python版本管理\n```bash\n# 列出可用Python版本\nuv python list\n\n# 安装Python版本\nuv python install 3.11\nuv python install 3.12\n\n# 查找Python解释器\nuv python find\nuv python find 3.11\n```\n\n## 虚拟环境\n```bash\n# 创建虚拟环境\nuv venv\nuv venv .venv --python 3.11\n\n# 激活虚拟环境（需要手动）\nsource .venv/bin/activate  # Linux/Mac\n.venv\\Scripts\\activate     # Windows\n```\n\n## 运行和执行\n```bash\n# 运行脚本\nuv run python script.py\nuv run --python 3.11 script.py\n\n# 运行模块\nuv run -m pytest\nuv run -m pip list\n```\n\n## 锁定文件\n```bash\n# 生成锁定文件\nuv lock\n\n# 从锁定文件安装\nuv sync --locked\n```\n\n## 工具运行\n```bash\n# 临时运行工具（不安装到项目）\nuv tool run black .\nuv tool run ruff check\nuv tool run --from requests python -c \&quot;import requests; print(requests.__version__)\&quot;\n```\n\n## 缓存管理\n```bash\n# 清理缓存\nuv cache clean\nuv cache dir  # 显示缓存目录\n```\n\n## 配置\n```bash\n# 查看配置\nuv config list\n\n# 设置配置\nuv config set index-url https://pypi.tuna.tsinghua.edu.cn/simple/\n```\n\n根据你的 `uv.lock` 文件，你的项目已经使用了 `uv` 进行依赖管理，包含了 Jupyter 相关的包。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;2337&quot;,&quot;char_end&quot;:&quot;2491&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;9672&quot;,&quot;char_end&quot;:&quot;9861&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;9861&quot;,&quot;char_end&quot;:&quot;10618&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;10618&quot;,&quot;char_end&quot;:&quot;11280&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;48089&quot;,&quot;char_end&quot;:&quot;48305&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;49575&quot;,&quot;char_end&quot;:&quot;50095&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;50695&quot;,&quot;char_end&quot;:&quot;51293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;52940&quot;,&quot;char_end&quot;:&quot;53687&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;57153&quot;,&quot;char_end&quot;:&quot;57398&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;57998&quot;,&quot;char_end&quot;:&quot;58489&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;59123&quot;,&quot;char_end&quot;:&quot;59415&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60012&quot;,&quot;char_end&quot;:&quot;60279&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60887&quot;,&quot;char_end&quot;:&quot;61242&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;62739&quot;,&quot;char_end&quot;:&quot;63140&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;66671&quot;,&quot;char_end&quot;:&quot;67169&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;67169&quot;,&quot;char_end&quot;:&quot;67772&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;70158&quot;,&quot;char_end&quot;:&quot;70768&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;87080&quot;,&quot;char_end&quot;:&quot;87622&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;89762&quot;,&quot;char_end&quot;:&quot;90036&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;90036&quot;,&quot;char_end&quot;:&quot;90792&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;96355&quot;,&quot;char_end&quot;:&quot;97116&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;97116&quot;,&quot;char_end&quot;:&quot;97818&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;101892&quot;,&quot;char_end&quot;:&quot;102592&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;118387&quot;,&quot;char_end&quot;:&quot;118568&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;130561&quot;,&quot;char_end&quot;:&quot;130792&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;168334&quot;,&quot;char_end&quot;:&quot;168592&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;168592&quot;,&quot;char_end&quot;:&quot;169339&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;169339&quot;,&quot;char_end&quot;:&quot;169933&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;169933&quot;,&quot;char_end&quot;:&quot;170643&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;770&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;fd951b2a-b113-4cd7-9fdd-8384d25f857f&quot;,&quot;request_message&quot;:&quot;运行jupyternotebook需要安装什么依赖，使用uv安装&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;运行jupyternotebook需要安装什么依赖，使用uv安装&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;根据你的项目情况，运行 Jupyter Notebook 需要以下依赖，使用 `uv` 安装：\n\n## 基础 Jupyter 依赖\n```bash\n# 安装核心 Jupyter 包\nuv add jupyter\nuv add jupyterlab\nuv add notebook\nuv add ipykernel\n```\n\n## 可选增强依赖\n```bash\n# 添加常用扩展\nuv add ipywidgets          # 交互式小部件\nuv add matplotlib          # 绘图支持\nuv add pandas             # 数据分析\nuv add numpy              # 数值计算\n```\n\n## 一次性安装所有依赖\n```bash\nuv add jupyter jupyterlab notebook ipykernel ipywidgets\n```\n\n## 启动 Jupyter\n安装完成后，可以使用以下命令启动：\n\n```bash\n# 启动 Jupyter Notebook\nuv run jupyter notebook\n\n# 启动 JupyterLab（推荐）\nuv run jupyter lab\n\n# 启动经典 Notebook 界面\nuv run jupyter notebook --classic\n```\n\n## 检查当前状态\n从你的 `uv.lock` 文件看，你已经安装了：\n- ✅ `jupyter` (1.1.1)\n- ✅ `jupyterlab` (4.4.5) \n- ✅ `notebook` (7.4.4)\n- ✅ `ipykernel` (6.30.0)\n\n所以你可以直接运行：\n```bash\nuv run jupyter lab\n```\n\n如果需要在 Jupyter 中使用特定的 Python 环境，确保激活正确的虚拟环境：\n```bash\n# 注册当前环境为 Jupyter 内核\nuv run python -m ipykernel install --user --name=langchainnotebook\n```\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;uv.lock:0-293\nuv.lock:9672-9861\nuv.lock:48089-48305\nuv.lock:49575-50095\nuv.lock:50695-51293\nuv.lock:52669-52940\nuv.lock:54429-55170\nuv.lock:57153-57398\nuv.lock:57998-58489\nuv.lock:59123-59415\nuv.lock:59415-60012\nuv.lock:60012-60279\nuv.lock:60279-60887\nuv.lock:60887-61242\nuv.lock:61849-62137\nuv.lock:62739-63140\nuv.lock:63140-63902\nuv.lock:63902-64502\nuv.lock:64502-65218\nuv.lock:65828-66045\nuv.lock:66671-67169\nuv.lock:67169-67772\nuv.lock:68498-68816\nuv.lock:70158-70768\nuv.lock:86246-86484\nuv.lock:87080-87622\nuv.lock:88222-88462\nuv.lock:89762-90036\nuv.lock:90036-90792\nuv.lock:96355-97116\nuv.lock:118387-118568\nuv.lock:130561-130792\nuv.lock:167533-167737\nuv.lock:168334-168592\nuv.lock:180264-180994\npyproject.toml:0-163\n.venv/pyvenv.cfg:0-185\nlangchain/dataConnection/dataConnetction.ipynb:0-810\ndep_version.md:2255-3003&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;运行jupyternotebook需要安装什么依赖，使用uv安装&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T15:22:34.977Z&quot;,&quot;response_text&quot;:&quot;根据你的项目情况，运行 Jupyter Notebook 需要以下依赖，使用 `uv` 安装：\n\n## 基础 Jupyter 依赖\n```bash\n# 安装核心 Jupyter 包\nuv add jupyter\nuv add jupyterlab\nuv add notebook\nuv add ipykernel\n```\n\n## 可选增强依赖\n```bash\n# 添加常用扩展\nuv add ipywidgets          # 交互式小部件\nuv add matplotlib          # 绘图支持\nuv add pandas             # 数据分析\nuv add numpy              # 数值计算\n```\n\n## 一次性安装所有依赖\n```bash\nuv add jupyter jupyterlab notebook ipykernel ipywidgets\n```\n\n## 启动 Jupyter\n安装完成后，可以使用以下命令启动：\n\n```bash\n# 启动 Jupyter Notebook\nuv run jupyter notebook\n\n# 启动 JupyterLab（推荐）\nuv run jupyter lab\n\n# 启动经典 Notebook 界面\nuv run jupyter notebook --classic\n```\n\n## 检查当前状态\n从你的 `uv.lock` 文件看，你已经安装了：\n- ✅ `jupyter` (1.1.1)\n- ✅ `jupyterlab` (4.4.5) \n- ✅ `notebook` (7.4.4)\n- ✅ `ipykernel` (6.30.0)\n\n所以你可以直接运行：\n```bash\nuv run jupyter lab\n```\n\n如果需要在 Jupyter 中使用特定的 Python 环境，确保激活正确的虚拟环境：\n```bash\n# 注册当前环境为 Jupyter 内核\nuv run python -m ipykernel install --user --name=langchainnotebook\n```\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;9672&quot;,&quot;char_end&quot;:&quot;9861&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;48089&quot;,&quot;char_end&quot;:&quot;48305&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;49575&quot;,&quot;char_end&quot;:&quot;50095&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;50695&quot;,&quot;char_end&quot;:&quot;51293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;52669&quot;,&quot;char_end&quot;:&quot;52940&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;54429&quot;,&quot;char_end&quot;:&quot;55170&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;57153&quot;,&quot;char_end&quot;:&quot;57398&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;57998&quot;,&quot;char_end&quot;:&quot;58489&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;59123&quot;,&quot;char_end&quot;:&quot;59415&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;59415&quot;,&quot;char_end&quot;:&quot;60012&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60012&quot;,&quot;char_end&quot;:&quot;60279&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60279&quot;,&quot;char_end&quot;:&quot;60887&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;60887&quot;,&quot;char_end&quot;:&quot;61242&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;61849&quot;,&quot;char_end&quot;:&quot;62137&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;62739&quot;,&quot;char_end&quot;:&quot;63140&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;63140&quot;,&quot;char_end&quot;:&quot;63902&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;63902&quot;,&quot;char_end&quot;:&quot;64502&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;65828&quot;,&quot;char_end&quot;:&quot;66045&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;66671&quot;,&quot;char_end&quot;:&quot;67169&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;67169&quot;,&quot;char_end&quot;:&quot;67772&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;68498&quot;,&quot;char_end&quot;:&quot;68816&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;70158&quot;,&quot;char_end&quot;:&quot;70768&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;86246&quot;,&quot;char_end&quot;:&quot;86484&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;87080&quot;,&quot;char_end&quot;:&quot;87622&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;88222&quot;,&quot;char_end&quot;:&quot;88462&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;89762&quot;,&quot;char_end&quot;:&quot;90036&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;90036&quot;,&quot;char_end&quot;:&quot;90792&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;96355&quot;,&quot;char_end&quot;:&quot;97116&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;118387&quot;,&quot;char_end&quot;:&quot;118568&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;130561&quot;,&quot;char_end&quot;:&quot;130792&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;167533&quot;,&quot;char_end&quot;:&quot;167737&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;168334&quot;,&quot;char_end&quot;:&quot;168592&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;180264&quot;,&quot;char_end&quot;:&quot;180994&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;163&quot;,&quot;blob_name&quot;:&quot;7f925f4234b563aa34196653f133ab270a6ca0cef65cb95422672aa3f353fcf9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;185&quot;,&quot;blob_name&quot;:&quot;9d880d6939d7e398eff0b479845f3b61e60d6ecc2c688b0ce97c7002daf6ad35&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/pyvenv.cfg&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;810&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;2255&quot;,&quot;char_end&quot;:&quot;3003&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;679f27c7-c20c-43e9-8b3f-ea5d984ec535&quot;,&quot;request_message&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 198, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 88, in _run_code\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__main__.py\&quot;, line 6, in &lt;module&gt;\r\n    from jupyterlab.labapp import main\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\labapp.py\&quot;, line 46, in &lt;module&gt;\r\n    from .extensions import MANAGERS as EXT_MANAGERS\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\extensions\\__init__.py\&quot;, line 12, in &lt;module&gt;\r\n    from .pypi import PyPIExtensionManager\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\extensions\\pypi.py\&quot;, line 28, in &lt;module&gt;\r\n    from async_lru import alru_cache\r\nModuleNotFoundError: No module named 'async_lru'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Traceback (most recent call last):\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 198, in _run_module_as_main\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;&lt;frozen runpy&gt;\&quot;, line 88, in _run_code\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__main__.py\&quot;, line 6, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from jupyterlab.labapp import main\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\labapp.py\&quot;, line 46, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .extensions import MANAGERS as EXT_MANAGERS\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\extensions\\__init__.py\&quot;, line 12, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from .pypi import PyPIExtensionManager\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\extensions\\pypi.py\&quot;, line 28, in &lt;module&gt;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    from async_lru import alru_cache\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;ModuleNotFoundError: No module named 'async_lru'\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;错误显示缺少 `async_lru` 模块。这是 JupyterLab 的一个依赖包。使用 `uv` 安装缺失的依赖：\n\n## 解决方案\n\n```bash\n# 安装缺失的依赖\nuv add async-lru\n\n# 如果还有其他缺失的依赖，可以一起安装\nuv add async-lru aiofiles\n```\n\n## 完整的 Jupyter 依赖安装\n\n为了确保所有依赖都正确安装，建议重新同步项目：\n\n```bash\n# 同步所有依赖\nuv sync\n\n# 或者重新安装 JupyterLab 及其完整依赖\nuv add jupyterlab --upgrade\n```\n\n## 验证安装\n\n安装完成后，测试启动：\n\n```bash\n# 测试启动 JupyterLab\nuv run jupyter lab --version\n\n# 如果版本显示正常，尝试启动\nuv run jupyter lab\n```\n\n## 如果问题持续存在\n\n如果仍有问题，可以尝试：\n\n```bash\n# 清理缓存并重新安装\nuv cache clean\nuv sync --reinstall\n\n# 或者删除虚拟环境重新创建\nrm -rf .venv  # Linux/Mac\nrmdir /s .venv  # Windows\nuv sync\n```\n\n## PyCharm 配置\n\n在 PyCharm 中，确保：\n1. 项目解释器指向正确的虚拟环境：`.venv/Scripts/python.exe` (Windows)\n2. Jupyter 服务器配置使用项目解释器\n\n`async_lru` 是 JupyterLab 4.x 版本的新依赖，安装后应该能解决这个问题。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyter-lsp-jupyter-server.json:0-86\n.venv/Lib/site-packages/jupyter_lsp/serverextension.py:0-276\n.venv/Lib/site-packages/jupyter_lsp/serverextension.py:276-870\n.venv/Lib/site-packages/jupyter_lsp/serverextension.py:870-1498\n.venv/Lib/site-packages/jupyter_lsp/serverextension.py:2756-3271\n.venv/etc/jupyter/jupyter_server_config.d/jupyter_server_terminals.json:0-99\n.venv/etc/jupyter/jupyter_server_config.d/jupyterlab.json:0-85\n.venv/Lib/site-packages/jupyterlab/labhubapp.py:519-1324\n.venv/Lib/site-packages/jupyterlab/serverextension.py:0-268\n.venv/Lib/site-packages/jupyterlab/serverextension.py:268-1231\n.venv/share/jupyter/lab/schemas/@jupyterlab/hub-extension/menu.json:0-613\nlangchain/dataConnection/dataConnetction.ipynb:0-810\n.venv/Lib/site-packages/jupyterlab/labextensions.py:0-741\n.venv/Lib/site-packages/jupyterlab/labextensions.py:741-1494\n.venv/Lib/site-packages/jupyterlab/labextensions.py:3142-3916\n.venv/Lib/site-packages/jupyterlab/labextensions.py:3916-4689\n.venv/Lib/site-packages/jupyterlab/labextensions.py:5740-6544\n.venv/Lib/site-packages/jupyterlab/labextensions.py:11625-12385\n.venv/Lib/site-packages/jupyterlab/labextensions.py:16397-17018\n.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json:3376-4162\n.venv/Lib/site-packages/jupyterlab/__init__.py:0-589\n.venv/Lib/site-packages/jupyterlab/labapp.py:18741-19552\n.venv/etc/jupyter/jupyter_server_config.d/notebook.json:0-83\n.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json:0-923\n.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json:923-1514\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/install.json:0-197\n.venv/share/applications/jupyterlab.desktop:0-227\n.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json:0-279\n.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json:279-1268\n.venv/Lib/site-packages/terminado/management.py:576-1211\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/439.b350310d057b43cdd50f.js:0-82\nuv.lock:64502-65218\n.venv/etc/jupyter/jupyter_server_config.d/notebook_shim.json:0-106\n.venv/Lib/site-packages/jupyterlab/pytest_plugin.py:0-473\n.venv/share/jupyter/kernels/python3/kernel.json:0-193\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/package.json.orig:850-1580\n.venv/Lib/site-packages/jupyter_lsp/__init__.py:0-486\n.venv/Lib/site-packages/ipykernel_launcher.py:0-512\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/package.json:850-1580\n.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/701.043aefe0b66133629348.js:0-190\n.venv/share/jupyter/labextensions/jupyterlab_pygments/install.json:0-199\n.venv/share/jupyter/labextensions/jupyterlab_pygments/package.json:859-1666\n.venv/Lib/site-packages/jupyter_core/migrate.py:0-545\n.venv/Lib/site-packages/jupyter_lsp/manager.py:0-708\n.venv/Lib/site-packages/jupyter_lsp/manager.py:1295-2040\n.venv/etc/jupyter/jupyter_notebook_config.d/jupyterlab.json:0-87&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;com.intellij.jupyter.core.jupyter.connections.exceptions.JupyterManagedServerExited: Jupyter 服务器进程退出，代码为 1\r\nTraceback (most recent call last):\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 198, in _run_module_as_main\r\n  File \&quot;&lt;frozen runpy&gt;\&quot;, line 88, in _run_code\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\__main__.py\&quot;, line 6, in &lt;module&gt;\r\n    from jupyterlab.labapp import main\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\labapp.py\&quot;, line 46, in &lt;module&gt;\r\n    from .extensions import MANAGERS as EXT_MANAGERS\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\extensions\\__init__.py\&quot;, line 12, in &lt;module&gt;\r\n    from .pypi import PyPIExtensionManager\r\n  File \&quot;D:\\javaDevelopment\\program_project\\Pycharm_project\\darwinAgent\\.venv\\Lib\\site-packages\\jupyterlab\\extensions\\pypi.py\&quot;, line 28, in &lt;module&gt;\r\n    from async_lru import alru_cache\r\nModuleNotFoundError: No module named 'async_lru'\r\n\tat com.intellij.jupyter.py.connections.managed.server.JupyterServerExecutionImpl$onServerTerminated$1.invokeSuspend(JupyterServerExecutionImpl.kt:232)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$2$1.run(EdtCoroutineDispatcher.kt:71)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(WriteIntentReadAction.java:24)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction$lambda$6(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithTemporaryThreadLocal(AnyThreadWriteThreadingSupport.kt:204)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:274)\r\n\tat com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(AnyThreadWriteThreadingSupport.kt:222)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(ApplicationImpl.java:1009)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.compute(WriteIntentReadAction.java:55)\r\n\tat com.intellij.openapi.application.WriteIntentReadAction.run(WriteIntentReadAction.java:23)\r\n\tat com.intellij.openapi.application.impl.EdtCoroutineDispatcher$wrapWithLocking$$inlined$Runnable$2.run(Runnable.kt:15)\r\n\tat com.intellij.openapi.application.impl.DispatchedRunnable.run(DispatchedRunnable.kt:42)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.runWithWritingAllowed(TransactionGuardImpl.java:240)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.access$100(TransactionGuardImpl.java:25)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl$2.run(TransactionGuardImpl.java:222)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.runNextEvent(FlushQueue.java:117)\r\n\tat com.intellij.openapi.application.impl.FlushQueue.flushNow(FlushQueue.java:43)\r\n\tat java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:781)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:728)\r\n\tat java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:400)\r\n\tat java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)\r\n\tat java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:750)\r\n\tat com.intellij.ide.IdeEventQueue.defaultDispatchEvent(IdeEventQueue.kt:585)\r\n\tat com.intellij.ide.IdeEventQueue._dispatchEvent(IdeEventQueue.kt:482)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10$lambda$9(IdeEventQueue.kt:307)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(CoreProgressManager.java:864)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12$lambda$11$lambda$10(IdeEventQueue.kt:306)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity$lambda$3(IdeEventQueue.kt:958)\r\n\tat com.intellij.openapi.application.TransactionGuardImpl.performActivity(TransactionGuardImpl.java:109)\r\n\tat com.intellij.ide.IdeEventQueueKt.performActivity(IdeEventQueue.kt:958)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$12(IdeEventQueue.kt:301)\r\n\tat com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.kt:341)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:207)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)\r\n\tat java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)\r\n\tat java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:92)\r\n&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T15:25:00.952Z&quot;,&quot;response_text&quot;:&quot;错误显示缺少 `async_lru` 模块。这是 JupyterLab 的一个依赖包。使用 `uv` 安装缺失的依赖：\n\n## 解决方案\n\n```bash\n# 安装缺失的依赖\nuv add async-lru\n\n# 如果还有其他缺失的依赖，可以一起安装\nuv add async-lru aiofiles\n```\n\n## 完整的 Jupyter 依赖安装\n\n为了确保所有依赖都正确安装，建议重新同步项目：\n\n```bash\n# 同步所有依赖\nuv sync\n\n# 或者重新安装 JupyterLab 及其完整依赖\nuv add jupyterlab --upgrade\n```\n\n## 验证安装\n\n安装完成后，测试启动：\n\n```bash\n# 测试启动 JupyterLab\nuv run jupyter lab --version\n\n# 如果版本显示正常，尝试启动\nuv run jupyter lab\n```\n\n## 如果问题持续存在\n\n如果仍有问题，可以尝试：\n\n```bash\n# 清理缓存并重新安装\nuv cache clean\nuv sync --reinstall\n\n# 或者删除虚拟环境重新创建\nrm -rf .venv  # Linux/Mac\nrmdir /s .venv  # Windows\nuv sync\n```\n\n## PyCharm 配置\n\n在 PyCharm 中，确保：\n1. 项目解释器指向正确的虚拟环境：`.venv/Scripts/python.exe` (Windows)\n2. Jupyter 服务器配置使用项目解释器\n\n`async_lru` 是 JupyterLab 4.x 版本的新依赖，安装后应该能解决这个问题。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;86&quot;,&quot;blob_name&quot;:&quot;5955c9b988446607da1815ce180d5beadf06f2e4d57157522eb938301c666f89&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyter-lsp-jupyter-server.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;276&quot;,&quot;blob_name&quot;:&quot;c1b7143d7c7d61cac01a448d987a3c621186a5e2e797aa9c302683f8ed1817a6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/serverextension.py&quot;}},{&quot;char_start&quot;:&quot;276&quot;,&quot;char_end&quot;:&quot;870&quot;,&quot;blob_name&quot;:&quot;c1b7143d7c7d61cac01a448d987a3c621186a5e2e797aa9c302683f8ed1817a6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/serverextension.py&quot;}},{&quot;char_start&quot;:&quot;870&quot;,&quot;char_end&quot;:&quot;1498&quot;,&quot;blob_name&quot;:&quot;c1b7143d7c7d61cac01a448d987a3c621186a5e2e797aa9c302683f8ed1817a6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/serverextension.py&quot;}},{&quot;char_start&quot;:&quot;2756&quot;,&quot;char_end&quot;:&quot;3271&quot;,&quot;blob_name&quot;:&quot;c1b7143d7c7d61cac01a448d987a3c621186a5e2e797aa9c302683f8ed1817a6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/serverextension.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;99&quot;,&quot;blob_name&quot;:&quot;d44d517a45445e3a894a05db2cbdaa267afda48d02bc29b37487a84e42aeef2b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyter_server_terminals.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;85&quot;,&quot;blob_name&quot;:&quot;d884d5d49d7d5a99198d9636ed05878e6178df019079725e4eab4b5c23446107&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/jupyterlab.json&quot;}},{&quot;char_start&quot;:&quot;519&quot;,&quot;char_end&quot;:&quot;1324&quot;,&quot;blob_name&quot;:&quot;cebfc77448bc25717887f54de40e16e5e5ecbd95cfc4518d9f54427b70ff4b1d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labhubapp.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;268&quot;,&quot;blob_name&quot;:&quot;4885e45b6d60a853f4c295f85e54a5a7fdca80e418332325005eaee9ea1fc8ef&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/serverextension.py&quot;}},{&quot;char_start&quot;:&quot;268&quot;,&quot;char_end&quot;:&quot;1231&quot;,&quot;blob_name&quot;:&quot;4885e45b6d60a853f4c295f85e54a5a7fdca80e418332325005eaee9ea1fc8ef&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/serverextension.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;613&quot;,&quot;blob_name&quot;:&quot;cf15b9fe0556ba986ea4aed678c0cd56a63650d14eb4f9ddeb3517c9c39179d6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/hub-extension/menu.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;810&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;741&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;741&quot;,&quot;char_end&quot;:&quot;1494&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;3142&quot;,&quot;char_end&quot;:&quot;3916&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;3916&quot;,&quot;char_end&quot;:&quot;4689&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;5740&quot;,&quot;char_end&quot;:&quot;6544&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;11625&quot;,&quot;char_end&quot;:&quot;12385&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;16397&quot;,&quot;char_end&quot;:&quot;17018&quot;,&quot;blob_name&quot;:&quot;8ce0cee6973ad9875d106db9c93579f70ce569ab6f59fd6cf7f6a56b56c14913&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labextensions.py&quot;}},{&quot;char_start&quot;:&quot;3376&quot;,&quot;char_end&quot;:&quot;4162&quot;,&quot;blob_name&quot;:&quot;8db86b942f623683797d5d39f3c566a9b5011a4fa745aee6bc34b68b4fd6772e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/docmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;589&quot;,&quot;blob_name&quot;:&quot;78829da2a49a40d6bf3d77b83ae64b1b78c16dff558f1af68597c7211b0da4d9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/__init__.py&quot;}},{&quot;char_start&quot;:&quot;18741&quot;,&quot;char_end&quot;:&quot;19552&quot;,&quot;blob_name&quot;:&quot;c89eb71afd44c0a7e7e341b1cb8d03fff4e8059aa6c8c02846a61d98073ad30f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/labapp.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;83&quot;,&quot;blob_name&quot;:&quot;c6f8f455989369b18a2a8b630ef489802e660f66093b8883642c9ef1b4e20329&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/notebook.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;923&quot;,&quot;blob_name&quot;:&quot;ff176614441386b5357ae5171532eb184d50c8d298a802156e6772e8f9a66313&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;923&quot;,&quot;char_end&quot;:&quot;1514&quot;,&quot;blob_name&quot;:&quot;ff176614441386b5357ae5171532eb184d50c8d298a802156e6772e8f9a66313&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/extensionmanager-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;197&quot;,&quot;blob_name&quot;:&quot;3b0183d330e29b40b0b5495dbd49ae4364f8ecd7ab742f0ccd45028284e2366e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/install.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;227&quot;,&quot;blob_name&quot;:&quot;2ff2d8a0001b32add3ae31e30450a2e7a91a9fe6cf08ba86acb42b744c4b7f99&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/applications/jupyterlab.desktop&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;279&quot;,&quot;blob_name&quot;:&quot;72e571917fb4da5ea26cc9dd58764d045622ce341f390c43ec60fe702f100233&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;279&quot;,&quot;char_end&quot;:&quot;1268&quot;,&quot;blob_name&quot;:&quot;72e571917fb4da5ea26cc9dd58764d045622ce341f390c43ec60fe702f100233&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/lab/schemas/@jupyterlab/running-extension/plugin.json&quot;}},{&quot;char_start&quot;:&quot;576&quot;,&quot;char_end&quot;:&quot;1211&quot;,&quot;blob_name&quot;:&quot;56d1966915bcf67cd5ea4a127a104677aaa654afc481b06f667662c735425ca8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/terminado/management.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;82&quot;,&quot;blob_name&quot;:&quot;d70d24785a6fb027151c96219debfadafa63d295b880000cdba10c6017c18ab4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/439.b350310d057b43cdd50f.js&quot;}},{&quot;char_start&quot;:&quot;64502&quot;,&quot;char_end&quot;:&quot;65218&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;106&quot;,&quot;blob_name&quot;:&quot;f3b954b287d902703769ff37d50cf8556ce9e8beb9dc6f192b5a87daa1bcd3e3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_server_config.d/notebook_shim.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;473&quot;,&quot;blob_name&quot;:&quot;61fb704b198198ffa3a819683ff45ead6ab18c5cc5c5e4e10422041e969f172f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyterlab/pytest_plugin.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;193&quot;,&quot;blob_name&quot;:&quot;c2db094294d470498a6314bb8769e6a190a2ceebc122d77c6b7fe64d7bc0c121&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/kernels/python3/kernel.json&quot;}},{&quot;char_start&quot;:&quot;850&quot;,&quot;char_end&quot;:&quot;1580&quot;,&quot;blob_name&quot;:&quot;0d98f8f270ca7e59a4274b8eafd63a5d50723ab7c2ba37b3120896e33420e96e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/schemas/@jupyter-widgets/jupyterlab-manager/package.json.orig&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;486&quot;,&quot;blob_name&quot;:&quot;5845c94b86ebe95abe5abb2039bcf100131fe70821dafecac1d288dc229b3862&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/__init__.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;512&quot;,&quot;blob_name&quot;:&quot;9d71eb1e0cff5a6f2171031bdc2881f102fa7a012fa2be0015a494ee22928d30&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/ipykernel_launcher.py&quot;}},{&quot;char_start&quot;:&quot;850&quot;,&quot;char_end&quot;:&quot;1580&quot;,&quot;blob_name&quot;:&quot;c9c13a3574e85efd907aa54d438137bb95a953f1d698a9e5ba891fa340f86308&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/package.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;190&quot;,&quot;blob_name&quot;:&quot;1e4147e17a8c30919336757e14fa9870b28fdd350fc004fa211e079dc89d04d7&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/@jupyter-widgets/jupyterlab-manager/static/701.043aefe0b66133629348.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;199&quot;,&quot;blob_name&quot;:&quot;b89ec485e6c53be75cc010c6cd6c0b9a1142d83a2ac1bf22a1d3161c87254571&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/jupyterlab_pygments/install.json&quot;}},{&quot;char_start&quot;:&quot;859&quot;,&quot;char_end&quot;:&quot;1666&quot;,&quot;blob_name&quot;:&quot;3a6a60567c2b56c4161e53e11cf1ef6ed4c25a6382d20f2de8938034481f0ecf&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/share/jupyter/labextensions/jupyterlab_pygments/package.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;545&quot;,&quot;blob_name&quot;:&quot;16765cd67360fee1ff8cbca0f2aa1bb2cfd823ab90050dab908c1ad0bb6e571b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_core/migrate.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;708&quot;,&quot;blob_name&quot;:&quot;67d7ae89f175ffc25faf8f40000358fdab7eba81aafbcafd7bab1f9c9c4bc4c9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/manager.py&quot;}},{&quot;char_start&quot;:&quot;1295&quot;,&quot;char_end&quot;:&quot;2040&quot;,&quot;blob_name&quot;:&quot;67d7ae89f175ffc25faf8f40000358fdab7eba81aafbcafd7bab1f9c9c4bc4c9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/manager.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;87&quot;,&quot;blob_name&quot;:&quot;c12734d11d0f483db81fba01f5d2d1806379393bee7ce68e7577c8eac68728ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/etc/jupyter/jupyter_notebook_config.d/jupyterlab.json&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;5f1c1e51-5312-462f-babf-0532ce02671d&quot;,&quot;request_message&quot;:&quot;安装langchain 和一些langchain开发常用的依赖langchain版本0.3，保证其他依赖和langchain兼容&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;安装langchain 和一些langchain开发常用的依赖langchain版本0.3，保证其他依赖和langchain兼容&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;根据 LangChain 0.3 的兼容性要求，使用 `uv` 安装完整的 LangChain 开发环境：\n\n## 核心 LangChain 包\n\n```bash\n# 安装 LangChain 0.3 核心包\nuv add \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot; \nuv add \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-text-splitters&gt;=0.3.0,&lt;0.4.0\&quot;\n```\n\n## LangGraph 和相关工具\n\n```bash\n# LangGraph（状态管理和复杂对话流）\nuv add \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot;\nuv add \&quot;langgraph-checkpoint&gt;=2.0.0\&quot;\n\n# LangSmith（调试和监控）\nuv add \&quot;langsmith&gt;=0.1.0\&quot;\n```\n\n## 常用模型提供商集成\n\n```bash\n# OpenAI\nuv add \&quot;langchain-openai&gt;=0.2.0\&quot;\n\n# Anthropic\nuv add \&quot;langchain-anthropic&gt;=0.2.0\&quot;\n\n# Ollama（本地模型）\nuv add \&quot;langchain-ollama&gt;=0.2.0\&quot;\n\n# Google\nuv add \&quot;langchain-google-genai&gt;=2.0.0\&quot;\n```\n\n## 向量存储和检索\n\n```bash\n# 向量数据库\nuv add \&quot;langchain-chroma&gt;=0.1.0\&quot;\nuv add \&quot;langchain-pinecone&gt;=0.2.0\&quot;\nuv add faiss-cpu  # 或 faiss-gpu\n\n# 嵌入模型\nuv add \&quot;langchain-huggingface&gt;=0.1.0\&quot;\n```\n\n## 文档处理和工具\n\n```bash\n# 文档加载器\nuv add pypdf\nuv add python-docx\nuv add openpyxl\nuv add beautifulsoup4\nuv add lxml\n\n# 网络请求\nuv add requests\nuv add aiohttp\n\n# 数据处理\nuv add pandas\nuv add numpy\n```\n\n## 开发和调试工具\n\n```bash\n# 异步支持\nuv add asyncio\nuv add aiofiles\n\n# 环境变量管理\nuv add python-dotenv\n\n# 类型检查和代码质量\nuv add mypy\nuv add black\nuv add ruff\n\n# 测试\nuv add pytest\nuv add pytest-asyncio\n```\n\n## 一次性安装命令\n\n&lt;augment_code_snippet path=\&quot;install_langchain.sh\&quot; mode=\&quot;EDIT\&quot;&gt;\n```bash\n# LangChain 0.3 完整开发环境安装\nuv add \\\n  \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langchain-text-splitters&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot; \\\n  \&quot;langsmith&gt;=0.1.0\&quot; \\\n  \&quot;langchain-openai&gt;=0.2.0\&quot; \\\n  \&quot;langchain-ollama&gt;=0.2.0\&quot; \\\n  \&quot;langchain-chroma&gt;=0.1.0\&quot; \\\n  faiss-cpu \\\n  pypdf \\\n  python-docx \\\n  beautifulsoup4 \\\n  requests \\\n  pandas \\\n  numpy \\\n  python-dotenv \\\n  async-lru\n```\n&lt;/augment_code_snippet&gt;\n\n## 验证安装\n\n安装完成后验证：\n\n```bash\n# 检查 LangChain 版本\nuv run python -c \&quot;import langchain; print(langchain.__version__)\&quot;\n\n# 检查核心组件\nuv run python -c \&quot;from langchain_core.messages import HumanMessage; print('✅ Core OK')\&quot;\nuv run python -c \&quot;from langchain_community.llms import Ollama; print('✅ Community OK')\&quot;\nuv run python -c \&quot;from langgraph.graph import StateGraph; print('✅ LangGraph OK')\&quot;\n```\n\n## 项目配置\n\n在 `pyproject.toml` 中添加版本约束：\n\n&lt;augment_code_snippet path=\&quot;pyproject.toml\&quot; mode=\&quot;EDIT\&quot;&gt;\n```toml\n[project]\ndependencies = [\n    \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot;,\n    \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot;,\n    \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot;,\n    \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot;,\n    \&quot;langchain-ollama&gt;=0.2.0\&quot;,\n    # ... 其他依赖\n]\n\n[tool.uv]\n# 确保版本一致性\nconstraint-dependencies = [\n    \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot;\n]\n```\n&lt;/augment_code_snippet&gt;\n\n这样安装可以确保所有 LangChain 相关包都使用兼容的版本，避免依赖冲突。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;uv.lock:0-293\nuv.lock:70158-70768\nuv.lock:70768-71451\nuv.lock:118387-118568\ndep_version.md:0-770\ndep_version.md:2255-3003\ndep_version.md:3003-3747\n.venv/Lib/site-packages/setuptools/tests/integration/test_pip_install_sdist.py:2185-2949\npyproject.toml:0-163\nlangchain/Chains/LCELChain.ipynb:12015-12970\nlangchain/Chains/LCELChain.ipynb:12970-13321\n.venv/Lib/site-packages/httpcore-1.0.9.dist-info/METADATA:4142-4840\n.venv/Lib/site-packages/idna-3.10.dist-info/METADATA:768-1508\n.venv/Lib/site-packages/jupyter_lsp/specs/pyright.py:0-776\nlangchain/overall.md:1414-2141&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;安装langchain 和一些langchain开发常用的依赖langchain版本0.3，保证其他依赖和langchain兼容&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T15:28:39.429Z&quot;,&quot;response_text&quot;:&quot;根据 LangChain 0.3 的兼容性要求，使用 `uv` 安装完整的 LangChain 开发环境：\n\n## 核心 LangChain 包\n\n```bash\n# 安装 LangChain 0.3 核心包\nuv add \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot; \nuv add \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-text-splitters&gt;=0.3.0,&lt;0.4.0\&quot;\n```\n\n## LangGraph 和相关工具\n\n```bash\n# LangGraph（状态管理和复杂对话流）\nuv add \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot;\nuv add \&quot;langgraph-checkpoint&gt;=2.0.0\&quot;\n\n# LangSmith（调试和监控）\nuv add \&quot;langsmith&gt;=0.1.0\&quot;\n```\n\n## 常用模型提供商集成\n\n```bash\n# OpenAI\nuv add \&quot;langchain-openai&gt;=0.2.0\&quot;\n\n# Anthropic\nuv add \&quot;langchain-anthropic&gt;=0.2.0\&quot;\n\n# Ollama（本地模型）\nuv add \&quot;langchain-ollama&gt;=0.2.0\&quot;\n\n# Google\nuv add \&quot;langchain-google-genai&gt;=2.0.0\&quot;\n```\n\n## 向量存储和检索\n\n```bash\n# 向量数据库\nuv add \&quot;langchain-chroma&gt;=0.1.0\&quot;\nuv add \&quot;langchain-pinecone&gt;=0.2.0\&quot;\nuv add faiss-cpu  # 或 faiss-gpu\n\n# 嵌入模型\nuv add \&quot;langchain-huggingface&gt;=0.1.0\&quot;\n```\n\n## 文档处理和工具\n\n```bash\n# 文档加载器\nuv add pypdf\nuv add python-docx\nuv add openpyxl\nuv add beautifulsoup4\nuv add lxml\n\n# 网络请求\nuv add requests\nuv add aiohttp\n\n# 数据处理\nuv add pandas\nuv add numpy\n```\n\n## 开发和调试工具\n\n```bash\n# 异步支持\nuv add asyncio\nuv add aiofiles\n\n# 环境变量管理\nuv add python-dotenv\n\n# 类型检查和代码质量\nuv add mypy\nuv add black\nuv add ruff\n\n# 测试\nuv add pytest\nuv add pytest-asyncio\n```\n\n## 一次性安装命令\n\n````bash path=install_langchain.sh mode=EDIT\n# LangChain 0.3 完整开发环境安装\nuv add \\\n  \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langchain-text-splitters&gt;=0.3.0,&lt;0.4.0\&quot; \\\n  \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot; \\\n  \&quot;langsmith&gt;=0.1.0\&quot; \\\n  \&quot;langchain-openai&gt;=0.2.0\&quot; \\\n  \&quot;langchain-ollama&gt;=0.2.0\&quot; \\\n  \&quot;langchain-chroma&gt;=0.1.0\&quot; \\\n  faiss-cpu \\\n  pypdf \\\n  python-docx \\\n  beautifulsoup4 \\\n  requests \\\n  pandas \\\n  numpy \\\n  python-dotenv \\\n  async-lru\n````\n\n## 验证安装\n\n安装完成后验证：\n\n```bash\n# 检查 LangChain 版本\nuv run python -c \&quot;import langchain; print(langchain.__version__)\&quot;\n\n# 检查核心组件\nuv run python -c \&quot;from langchain_core.messages import HumanMessage; print('✅ Core OK')\&quot;\nuv run python -c \&quot;from langchain_community.llms import Ollama; print('✅ Community OK')\&quot;\nuv run python -c \&quot;from langgraph.graph import StateGraph; print('✅ LangGraph OK')\&quot;\n```\n\n## 项目配置\n\n在 `pyproject.toml` 中添加版本约束：\n\n````toml path=pyproject.toml mode=EDIT\n[project]\ndependencies = [\n    \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot;,\n    \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot;,\n    \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot;,\n    \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot;,\n    \&quot;langchain-ollama&gt;=0.2.0\&quot;,\n    # ... 其他依赖\n]\n\n[tool.uv]\n# 确保版本一致性\nconstraint-dependencies = [\n    \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot;\n]\n````\n\n这样安装可以确保所有 LangChain 相关包都使用兼容的版本，避免依赖冲突。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;293&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;70158&quot;,&quot;char_end&quot;:&quot;70768&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;70768&quot;,&quot;char_end&quot;:&quot;71451&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;118387&quot;,&quot;char_end&quot;:&quot;118568&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;770&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;2255&quot;,&quot;char_end&quot;:&quot;3003&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;3003&quot;,&quot;char_end&quot;:&quot;3747&quot;,&quot;blob_name&quot;:&quot;19603a1c78cca34d86cf0f1a920600214dff25bb1e736e5c634423df03a0ba72&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;dep_version.md&quot;}},{&quot;char_start&quot;:&quot;2185&quot;,&quot;char_end&quot;:&quot;2949&quot;,&quot;blob_name&quot;:&quot;525dacc9f9aa4a69db3d2f9d40507e2f5d13bb19773aac9348ef0c65dcc3d636&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/setuptools/tests/integration/test_pip_install_sdist.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;163&quot;,&quot;blob_name&quot;:&quot;7f925f4234b563aa34196653f133ab270a6ca0cef65cb95422672aa3f353fcf9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;pyproject.toml&quot;}},{&quot;char_start&quot;:&quot;12015&quot;,&quot;char_end&quot;:&quot;12970&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;12970&quot;,&quot;char_end&quot;:&quot;13321&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;4142&quot;,&quot;char_end&quot;:&quot;4840&quot;,&quot;blob_name&quot;:&quot;ca400127eef7cb4e2a53fc8da3d2530593f316367c1e8372abfe2079e1b1210a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/httpcore-1.0.9.dist-info/METADATA&quot;}},{&quot;char_start&quot;:&quot;768&quot;,&quot;char_end&quot;:&quot;1508&quot;,&quot;blob_name&quot;:&quot;1bfe300a1aece004a4c3b6375e0bd06e3a03053a6333ca40d4ac67f9f526ffbd&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/idna-3.10.dist-info/METADATA&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;776&quot;,&quot;blob_name&quot;:&quot;dee08f23dd2d2d8b1911695cfad4092a76a11fbfad43661afeccfe9a69131805&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/specs/pyright.py&quot;}},{&quot;char_start&quot;:&quot;1414&quot;,&quot;char_end&quot;:&quot;2141&quot;,&quot;blob_name&quot;:&quot;616f3f9b9b87c8f1fd6cf488b208e25727064d0695275b3ffec0b7fe7753567b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/overall.md&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;d6363204-e19d-4b6c-b17f-f8a3f65a84af&quot;,&quot;request_message&quot;:&quot;.sh文件怎么运行&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;.sh文件怎么运行&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;在不同操作系统上运行 `.sh` 文件的方法：\n\n## Windows 系统\n\n### 方法1：使用 Git Bash（推荐）\n```bash\n# 打开 Git Bash，导航到文件目录\ncd /d/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook\nbash install_langchain.sh\n```\n\n### 方法2：使用 WSL（Windows Subsystem for Linux）\n```bash\n# 在 WSL 中运行\nwsl bash install_langchain.sh\n```\n\n### 方法3：直接复制命令内容\n由于你使用的是 `uv`，可以直接在 PowerShell 或 CMD 中运行脚本内容：\n\n```powershell\n# 在 PowerShell 中运行\nuv add \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langchain-text-splitters&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot; \&quot;langsmith&gt;=0.1.0\&quot; \&quot;langchain-openai&gt;=0.2.0\&quot; \&quot;langchain-ollama&gt;=0.2.0\&quot; \&quot;langchain-chroma&gt;=0.1.0\&quot; faiss-cpu pypdf python-docx beautifulsoup4 requests pandas numpy python-dotenv async-lru\n```\n\n## Linux/Mac 系统\n\n### 方法1：直接运行\n```bash\n# 给文件执行权限\nchmod +x install_langchain.sh\n\n# 运行脚本\n./install_langchain.sh\n```\n\n### 方法2：使用 bash 命令\n```bash\nbash install_langchain.sh\n```\n\n## PyCharm 中运行\n\n### 方法1：使用终端\n1. 在 PyCharm 中打开终端（View → Tool Windows → Terminal）\n2. 确保在项目根目录\n3. 运行：\n```bash\nbash install_langchain.sh\n```\n\n### 方法2：创建运行配置\n1. 右键点击 `install_langchain.sh` 文件\n2. 选择 \&quot;Run 'install_langchain.sh'\&quot;\n3. 或者创建 Shell Script 运行配置\n\n## 推荐做法\n\n考虑到你的环境，建议：\n\n1. **直接在 PyCharm 终端运行**：\n```bash\n# 在 PyCharm 终端中\nbash install_langchain.sh\n```\n\n2. **或者逐行执行**（更安全）：\n```bash\n# 分步安装，可以看到每个包的安装进度\nuv add \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot;\n# ... 继续其他包\n```\n\n3. **检查脚本内容**：\n```bash\n# 先查看脚本内容\ncat install_langchain.sh\n# 或在 Windows 中\ntype install_langchain.sh\n```\n\n如果遇到权限问题，确保脚本有执行权限，或者直接复制脚本内容到终端执行。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;.venv/Scripts/activate_this.py:1388-2041\n.venv/Scripts/activate.ps1:702-1230\n.venv/Scripts/activate.ps1:1230-2016\n.venv/Scripts/activate.ps1:2016-2800\n.venv/Scripts/activate.csh:702-1279\n.venv/Scripts/activate.csh:1279-2007\n.venv/Scripts/activate:702-1283\n.venv/Scripts/activate:1283-1750\n.venv/Scripts/activate:2552-3319\n.venv/Scripts/activate:3319-3983\n.venv/Scripts/activate:3983-4157\n.venv/Scripts/activate.nu:702-1460\n.venv/Scripts/activate.nu:1460-2393\n.venv/Scripts/activate.nu:2393-2892\n.venv/Scripts/activate.nu:3858-3944\n.venv/Scripts/activate.fish:702-1254\n.venv/Scripts/activate.fish:1254-1631\n.venv/Scripts/activate.fish:2245-2980\n.venv/Scripts/activate.fish:2980-3744\n.venv/Lib/site-packages/setuptools/_distutils/command/install_scripts.py:1200-2002&quot;}],&quot;seen_state&quot;:&quot;unseen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;.sh文件怎么运行&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T15:38:45.600Z&quot;,&quot;response_text&quot;:&quot;在不同操作系统上运行 `.sh` 文件的方法：\n\n## Windows 系统\n\n### 方法1：使用 Git Bash（推荐）\n```bash\n# 打开 Git Bash，导航到文件目录\ncd /d/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook\nbash install_langchain.sh\n```\n\n### 方法2：使用 WSL（Windows Subsystem for Linux）\n```bash\n# 在 WSL 中运行\nwsl bash install_langchain.sh\n```\n\n### 方法3：直接复制命令内容\n由于你使用的是 `uv`，可以直接在 PowerShell 或 CMD 中运行脚本内容：\n\n```powershell\n# 在 PowerShell 中运行\nuv add \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langchain-text-splitters&gt;=0.3.0,&lt;0.4.0\&quot; \&quot;langgraph&gt;=0.2.20,&lt;0.3\&quot; \&quot;langsmith&gt;=0.1.0\&quot; \&quot;langchain-openai&gt;=0.2.0\&quot; \&quot;langchain-ollama&gt;=0.2.0\&quot; \&quot;langchain-chroma&gt;=0.1.0\&quot; faiss-cpu pypdf python-docx beautifulsoup4 requests pandas numpy python-dotenv async-lru\n```\n\n## Linux/Mac 系统\n\n### 方法1：直接运行\n```bash\n# 给文件执行权限\nchmod +x install_langchain.sh\n\n# 运行脚本\n./install_langchain.sh\n```\n\n### 方法2：使用 bash 命令\n```bash\nbash install_langchain.sh\n```\n\n## PyCharm 中运行\n\n### 方法1：使用终端\n1. 在 PyCharm 中打开终端（View → Tool Windows → Terminal）\n2. 确保在项目根目录\n3. 运行：\n```bash\nbash install_langchain.sh\n```\n\n### 方法2：创建运行配置\n1. 右键点击 `install_langchain.sh` 文件\n2. 选择 \&quot;Run 'install_langchain.sh'\&quot;\n3. 或者创建 Shell Script 运行配置\n\n## 推荐做法\n\n考虑到你的环境，建议：\n\n1. **直接在 PyCharm 终端运行**：\n```bash\n# 在 PyCharm 终端中\nbash install_langchain.sh\n```\n\n2. **或者逐行执行**（更安全）：\n```bash\n# 分步安装，可以看到每个包的安装进度\nuv add \&quot;langchain&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-core&gt;=0.3.0,&lt;0.4.0\&quot;\nuv add \&quot;langchain-community&gt;=0.3.0,&lt;0.4.0\&quot;\n# ... 继续其他包\n```\n\n3. **检查脚本内容**：\n```bash\n# 先查看脚本内容\ncat install_langchain.sh\n# 或在 Windows 中\ntype install_langchain.sh\n```\n\n如果遇到权限问题，确保脚本有执行权限，或者直接复制脚本内容到终端执行。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;1388&quot;,&quot;char_end&quot;:&quot;2041&quot;,&quot;blob_name&quot;:&quot;32cc0cc6ea86dfc49355e807370ba94b1d8a65fba0474547ad2f5594dd7fffc7&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate_this.py&quot;}},{&quot;char_start&quot;:&quot;702&quot;,&quot;char_end&quot;:&quot;1230&quot;,&quot;blob_name&quot;:&quot;318b19cc7a6abfe5a99fe431a3ba1690bab679bdeb2e2398277ba38efaaf3b09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.ps1&quot;}},{&quot;char_start&quot;:&quot;1230&quot;,&quot;char_end&quot;:&quot;2016&quot;,&quot;blob_name&quot;:&quot;318b19cc7a6abfe5a99fe431a3ba1690bab679bdeb2e2398277ba38efaaf3b09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.ps1&quot;}},{&quot;char_start&quot;:&quot;2016&quot;,&quot;char_end&quot;:&quot;2800&quot;,&quot;blob_name&quot;:&quot;318b19cc7a6abfe5a99fe431a3ba1690bab679bdeb2e2398277ba38efaaf3b09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.ps1&quot;}},{&quot;char_start&quot;:&quot;702&quot;,&quot;char_end&quot;:&quot;1279&quot;,&quot;blob_name&quot;:&quot;6ddba986ee6b5605240e9d173197f3097101d7810f21aabfeb705ea2a8baba49&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.csh&quot;}},{&quot;char_start&quot;:&quot;1279&quot;,&quot;char_end&quot;:&quot;2007&quot;,&quot;blob_name&quot;:&quot;6ddba986ee6b5605240e9d173197f3097101d7810f21aabfeb705ea2a8baba49&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.csh&quot;}},{&quot;char_start&quot;:&quot;702&quot;,&quot;char_end&quot;:&quot;1283&quot;,&quot;blob_name&quot;:&quot;16ca755e13d6916e51836ccebc9ecbdc43de35b4e057e6eb7785854fdb3442b8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate&quot;}},{&quot;char_start&quot;:&quot;1283&quot;,&quot;char_end&quot;:&quot;1750&quot;,&quot;blob_name&quot;:&quot;16ca755e13d6916e51836ccebc9ecbdc43de35b4e057e6eb7785854fdb3442b8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate&quot;}},{&quot;char_start&quot;:&quot;2552&quot;,&quot;char_end&quot;:&quot;3319&quot;,&quot;blob_name&quot;:&quot;16ca755e13d6916e51836ccebc9ecbdc43de35b4e057e6eb7785854fdb3442b8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate&quot;}},{&quot;char_start&quot;:&quot;3319&quot;,&quot;char_end&quot;:&quot;3983&quot;,&quot;blob_name&quot;:&quot;16ca755e13d6916e51836ccebc9ecbdc43de35b4e057e6eb7785854fdb3442b8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate&quot;}},{&quot;char_start&quot;:&quot;3983&quot;,&quot;char_end&quot;:&quot;4157&quot;,&quot;blob_name&quot;:&quot;16ca755e13d6916e51836ccebc9ecbdc43de35b4e057e6eb7785854fdb3442b8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate&quot;}},{&quot;char_start&quot;:&quot;702&quot;,&quot;char_end&quot;:&quot;1460&quot;,&quot;blob_name&quot;:&quot;bb4636d39d4dcf59dd44e21a207c9d78a99ba5a690166e0982809e1f8ebf91e5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.nu&quot;}},{&quot;char_start&quot;:&quot;1460&quot;,&quot;char_end&quot;:&quot;2393&quot;,&quot;blob_name&quot;:&quot;bb4636d39d4dcf59dd44e21a207c9d78a99ba5a690166e0982809e1f8ebf91e5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.nu&quot;}},{&quot;char_start&quot;:&quot;2393&quot;,&quot;char_end&quot;:&quot;2892&quot;,&quot;blob_name&quot;:&quot;bb4636d39d4dcf59dd44e21a207c9d78a99ba5a690166e0982809e1f8ebf91e5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.nu&quot;}},{&quot;char_start&quot;:&quot;3858&quot;,&quot;char_end&quot;:&quot;3944&quot;,&quot;blob_name&quot;:&quot;bb4636d39d4dcf59dd44e21a207c9d78a99ba5a690166e0982809e1f8ebf91e5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.nu&quot;}},{&quot;char_start&quot;:&quot;702&quot;,&quot;char_end&quot;:&quot;1254&quot;,&quot;blob_name&quot;:&quot;3da81ee324ebe9a56a420c3aea1c865ca6c2faff4d129e2cde7c7bd852d3154b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.fish&quot;}},{&quot;char_start&quot;:&quot;1254&quot;,&quot;char_end&quot;:&quot;1631&quot;,&quot;blob_name&quot;:&quot;3da81ee324ebe9a56a420c3aea1c865ca6c2faff4d129e2cde7c7bd852d3154b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.fish&quot;}},{&quot;char_start&quot;:&quot;2245&quot;,&quot;char_end&quot;:&quot;2980&quot;,&quot;blob_name&quot;:&quot;3da81ee324ebe9a56a420c3aea1c865ca6c2faff4d129e2cde7c7bd852d3154b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.fish&quot;}},{&quot;char_start&quot;:&quot;2980&quot;,&quot;char_end&quot;:&quot;3744&quot;,&quot;blob_name&quot;:&quot;3da81ee324ebe9a56a420c3aea1c865ca6c2faff4d129e2cde7c7bd852d3154b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Scripts/activate.fish&quot;}},{&quot;char_start&quot;:&quot;1200&quot;,&quot;char_end&quot;:&quot;2002&quot;,&quot;blob_name&quot;:&quot;8deb963b490cde900ac2c546d9e40de7f6dd39d9bf3fb6cb33043bab83e03601&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/setuptools/_distutils/command/install_scripts.py&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-0d4ea720-f2ac-4657-8d33-659c4dae7249&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-0db14516-8eed-4bca-96ad-4228f8ebabcd&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-532d16bd-a0cd-4310-b7f2-f717128a6e00&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ee623592-7a02-4b0c-a48a-6621e16d9ae6&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-e10a1ade-b929-4975-9fff-6301df0af883&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-00e90701-50a0-4f5d-a4d5-93f0fa5dac88&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-adfd5c9c-e2a6-4baf-bdb8-a3b4357f8edf&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-2c046aec-9669-45bb-8a40-380cd6f1eb2a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/dataConnection/dataConnetction.ipynb&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBookfalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;a338ef18-80bf-41ae-b7b2-e64a3bdffce8&quot;},&quot;fee269d7-af4b-4e2a-92fd-3fadceb219bf&quot;:{&quot;id&quot;:&quot;fee269d7-af4b-4e2a-92fd-3fadceb219bf&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T15:46:01.742Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T15:46:17.360Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;050d9f6b-39ca-4078-a58a-53d94a576700&quot;,&quot;request_message&quot;:&quot;\r\n# 1. Document Loaders 示例\r\ndef document_loaders_example():\r\n    \&quot;\&quot;\&quot;文档加载器示例\&quot;\&quot;\&quot;\r\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\r\n    print(\&quot;1. Document Loaders 文档加载器示例\&quot;)\r\n    print(\&quot;=\&quot; * 60)\r\n\r\n    # 1.1 文本文件加载\r\n    print(\&quot;\\n1.1 文本文件加载\&quot;)\r\n    # 创建示例文本文件\r\n    with open(\&quot;sample.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r\n        f.write(\&quot;\&quot;\&quot;\r\n        人工智能（AI）是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\r\n        机器学习是AI的一个子集，它使计算机能够从数据中学习而无需明确编程。\r\n        深度学习是机器学习的一个子集，使用神经网络来模拟人脑的工作方式。\r\n        \&quot;\&quot;\&quot;)\r\n\r\n    loader = TextLoader(\&quot;sample.txt\&quot;, encoding=\&quot;utf-8\&quot;)\r\n    documents = loader.load()\r\n    print(f\&quot;加载的文档数量: {len(documents)}\&quot;)\r\n    print(f\&quot;文档内容预览: {documents[0].page_content[:100]}...\&quot;)\r\n\r\n    # 1.2 CSV文件加载\r\n    print(\&quot;\\n1.2 CSV文件加载\&quot;)\r\n    import pandas as pd\r\n\r\n    # 创建示例CSV\r\n    df = pd.DataFrame({\r\n        'name': ['张三', '李四', '王五'],\r\n        'age': [25, 30, 35],\r\n        'city': ['北京', '上海', '深圳'],\r\n        'description': ['软件工程师', '数据科学家', '产品经理']\r\n    })\r\n    df.to_csv(\&quot;sample.csv\&quot;, index=False, encoding=\&quot;utf-8\&quot;)\r\n\r\n    csv_loader = CSVLoader(\&quot;sample.csv\&quot;, encoding=\&quot;utf-8\&quot;)\r\n    csv_docs = csv_loader.load()\r\n    print(f\&quot;CSV文档数量: {len(csv_docs)}\&quot;)\r\n    print(f\&quot;CSV文档示例: {csv_docs[0].page_content}\&quot;)\r\n\r\n    # 1.3 JSON文件加载\r\n    print(\&quot;\\n1.3 JSON文件加载\&quot;)\r\n    import json\r\n\r\n    sample_data = [\r\n        {\&quot;title\&quot;: \&quot;Python编程\&quot;, \&quot;content\&quot;: \&quot;Python是一种高级编程语言\&quot;, \&quot;category\&quot;: \&quot;技术\&quot;},\r\n        {\&quot;title\&quot;: \&quot;数据分析\&quot;, \&quot;content\&quot;: \&quot;数据分析是从数据中提取洞察的过程\&quot;, \&quot;category\&quot;: \&quot;数据科学\&quot;}\r\n    ]\r\n\r\n    with open(\&quot;sample.json\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r\n        json.dump(sample_data, f, ensure_ascii=False, indent=2)\r\n\r\n    json_loader = JSONLoader(\&quot;sample.json\&quot;, jq_schema=\&quot;.[].content\&quot;)\r\n    json_docs = json_loader.load()\r\n    print(f\&quot;JSON文档数量: {len(json_docs)}\&quot;)\r\n    print(f\&quot;JSON文档示例: {json_docs[0].page_content}\&quot;)\r\n\r\n    # 1.4 目录批量加载\r\n    print(\&quot;\\n1.4 目录批量加载\&quot;)\r\n    os.makedirs(\&quot;docs\&quot;, exist_ok=True)\r\n\r\n    # 创建多个文档\r\n    for i in range(3):\r\n        with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r\n            f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\r\n\r\n    dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\r\n    dir_docs = dir_loader.load()\r\n    print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r\n\r\n    return documents + csv_docs + json_docs + dir_docs\r\ndocument_loaders_example()\n\n报错了\n\n\n-------------------------------------------------------------------------\r\nUnicodeDecodeError                        Traceback (most recent call last)\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\text.py:43, in TextLoader.lazy_load(self)\r\n     42     with open(self.file_path, encoding=self.encoding) as f:\r\n---&gt; 43         text = f.read()\r\n     44 except UnicodeDecodeError as e:\r\n\r\nUnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 8: illegal multibyte sequence\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nRuntimeError                              Traceback (most recent call last)\r\nCell In[6], line 72\r\n     69     print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r\n     71     return documents + csv_docs + json_docs + dir_docs\r\n---&gt; 72 document_loaders_example()\r\n\r\nCell In[6], line 68, in document_loaders_example()\r\n     65         f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\r\n     67 dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\r\n---&gt; 68 dir_docs = dir_loader.load()\r\n     69 print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r\n     71 return documents + csv_docs + json_docs + dir_docs\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:117, in DirectoryLoader.load(self)\r\n    115 def load(self) -&gt; List[Document]:\r\n    116     \&quot;\&quot;\&quot;Load documents.\&quot;\&quot;\&quot;\r\n--&gt; 117     return list(self.lazy_load())\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:195, in DirectoryLoader.lazy_load(self)\r\n    193 else:\r\n    194     for i in items:\r\n--&gt; 195         yield from self._lazy_load_file(i, p, pbar)\r\n    197 if pbar:\r\n    198     pbar.close()\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:233, in DirectoryLoader._lazy_load_file(self, item, path, pbar)\r\n    231     else:\r\n    232         logger.error(f\&quot;Error loading file {str(item)}\&quot;)\r\n--&gt; 233         raise e\r\n    234 finally:\r\n    235     if pbar:\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:223, in DirectoryLoader._lazy_load_file(self, item, path, pbar)\r\n    221 loader = self.loader_cls(str(item), **self.loader_kwargs)\r\n    222 try:\r\n--&gt; 223     for subdoc in loader.lazy_load():\r\n    224         yield subdoc\r\n    225 except NotImplementedError:\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\text.py:56, in TextLoader.lazy_load(self)\r\n     54                 continue\r\n     55     else:\r\n---&gt; 56         raise RuntimeError(f\&quot;Error loading {self.file_path}\&quot;) from e\r\n     57 except Exception as e:\r\n     58     raise RuntimeError(f\&quot;Error loading {self.file_path}\&quot;) from e\r\n\r\nRuntimeError: Error loading docs\\doc_0.txt&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# 1. Document Loaders 示例\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;def document_loaders_example():\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    \&quot;\&quot;\&quot;文档加载器示例\&quot;\&quot;\&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;1. Document Loaders 文档加载器示例\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;=\&quot; * 60)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 1.1 文本文件加载\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;\\n1.1 文本文件加载\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 创建示例文本文件\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    with open(\&quot;sample.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        f.write(\&quot;\&quot;\&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        人工智能（AI）是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        机器学习是AI的一个子集，它使计算机能够从数据中学习而无需明确编程。\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        深度学习是机器学习的一个子集，使用神经网络来模拟人脑的工作方式。\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        \&quot;\&quot;\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    loader = TextLoader(\&quot;sample.txt\&quot;, encoding=\&quot;utf-8\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    documents = loader.load()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;加载的文档数量: {len(documents)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;文档内容预览: {documents[0].page_content[:100]}...\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 1.2 CSV文件加载\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;\\n1.2 CSV文件加载\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    import pandas as pd\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 创建示例CSV\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    df = pd.DataFrame({\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        'name': ['张三', '李四', '王五'],\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        'age': [25, 30, 35],\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        'city': ['北京', '上海', '深圳'],\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        'description': ['软件工程师', '数据科学家', '产品经理']\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    })\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    df.to_csv(\&quot;sample.csv\&quot;, index=False, encoding=\&quot;utf-8\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    csv_loader = CSVLoader(\&quot;sample.csv\&quot;, encoding=\&quot;utf-8\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    csv_docs = csv_loader.load()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;CSV文档数量: {len(csv_docs)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;CSV文档示例: {csv_docs[0].page_content}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 1.3 JSON文件加载\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;\\n1.3 JSON文件加载\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    import json\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    sample_data = [\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        {\&quot;title\&quot;: \&quot;Python编程\&quot;, \&quot;content\&quot;: \&quot;Python是一种高级编程语言\&quot;, \&quot;category\&quot;: \&quot;技术\&quot;},\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        {\&quot;title\&quot;: \&quot;数据分析\&quot;, \&quot;content\&quot;: \&quot;数据分析是从数据中提取洞察的过程\&quot;, \&quot;category\&quot;: \&quot;数据科学\&quot;}\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    ]\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    with open(\&quot;sample.json\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        json.dump(sample_data, f, ensure_ascii=False, indent=2)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    json_loader = JSONLoader(\&quot;sample.json\&quot;, jq_schema=\&quot;.[].content\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    json_docs = json_loader.load()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;JSON文档数量: {len(json_docs)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;JSON文档示例: {json_docs[0].page_content}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 1.4 目录批量加载\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(\&quot;\\n1.4 目录批量加载\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    os.makedirs(\&quot;docs\&quot;, exist_ok=True)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    # 创建多个文档\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    for i in range(3):\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;            f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    dir_docs = dir_loader.load()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    return documents + csv_docs + json_docs + dir_docs\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;document_loaders_example()&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;报错了&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;-------------------------------------------------------------------------\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;UnicodeDecodeError                        Traceback (most recent call last)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\text.py:43, in TextLoader.lazy_load(self)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     42     with open(self.file_path, encoding=self.encoding) as f:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---&gt; 43         text = f.read()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     44 except UnicodeDecodeError as e:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;UnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 8: illegal multibyte sequence\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;The above exception was the direct cause of the following exception:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;RuntimeError                              Traceback (most recent call last)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Cell In[6], line 72\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     69     print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     71     return documents + csv_docs + json_docs + dir_docs\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---&gt; 72 document_loaders_example()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Cell In[6], line 68, in document_loaders_example()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     65         f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     67 dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---&gt; 68 dir_docs = dir_loader.load()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     69 print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     71 return documents + csv_docs + json_docs + dir_docs\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:117, in DirectoryLoader.load(self)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    115 def load(self) -&gt; List[Document]:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    116     \&quot;\&quot;\&quot;Load documents.\&quot;\&quot;\&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 117     return list(self.lazy_load())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:195, in DirectoryLoader.lazy_load(self)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    193 else:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    194     for i in items:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 195         yield from self._lazy_load_file(i, p, pbar)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    197 if pbar:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    198     pbar.close()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:233, in DirectoryLoader._lazy_load_file(self, item, path, pbar)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    231     else:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    232         logger.error(f\&quot;Error loading file {str(item)}\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 233         raise e\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    234 finally:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    235     if pbar:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:223, in DirectoryLoader._lazy_load_file(self, item, path, pbar)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    221 loader = self.loader_cls(str(item), **self.loader_kwargs)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    222 try:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 223     for subdoc in loader.lazy_load():\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    224         yield subdoc\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    225 except NotImplementedError:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\text.py:56, in TextLoader.lazy_load(self)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     54                 continue\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     55     else:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---&gt; 56         raise RuntimeError(f\&quot;Error loading {self.file_path}\&quot;) from e\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     57 except Exception as e:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     58     raise RuntimeError(f\&quot;Error loading {self.file_path}\&quot;) from e\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;RuntimeError: Error loading docs\\doc_0.txt&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;这个错误是由于编码问题导致的。`DirectoryLoader` 使用的 `TextLoader` 默认没有指定编码，在Windows系统上可能会使用GBK编码，但文件是用UTF-8编码保存的。\n\n解决方案是在 `DirectoryLoader` 中为 `TextLoader` 指定编码参数：\n\n&lt;augment_code_snippet path=\&quot;langchain/dataConnection/dataConnetction.ipynb\&quot; mode=\&quot;EDIT\&quot;&gt;\n```python\n# 1.4 目录批量加载\nprint(\&quot;\\n1.4 目录批量加载\&quot;)\nos.makedirs(\&quot;docs\&quot;, exist_ok=True)\n\n# 创建多个文档\nfor i in range(3):\n    with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\n\n# 修复：为TextLoader指定编码\ndir_loader = DirectoryLoader(\n    \&quot;docs\&quot;, \n    glob=\&quot;*.txt\&quot;, \n    loader_cls=TextLoader,\n    loader_kwargs={\&quot;encoding\&quot;: \&quot;utf-8\&quot;}  # 添加编码参数\n)\ndir_docs = dir_loader.load()\nprint(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\n```\n&lt;/augment_code_snippet&gt;\n\n关键修改：\n- 在 `DirectoryLoader` 中添加了 `loader_kwargs={\&quot;encoding\&quot;: \&quot;utf-8\&quot;}` 参数\n- 这样 `TextLoader` 就会使用UTF-8编码来读取文件，避免编码错误\n\n这个问题在Windows系统上比较常见，因为Windows默认使用GBK编码，而我们创建的文件使用的是UTF-8编码。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb:0-810\nlangchain/dataConnection/dataConnetction.ipynb:810-1023\nlangchain/dataConnection/dataConnetction.ipynb:1023-1926\nlangchain/dataConnection/dataConnetction.ipynb:1926-2537\nlangchain/dataConnection/dataConnetction.ipynb:2537-3186\nlangchain/dataConnection/dataConnetction.ipynb:3186-4056\nlangchain/dataConnection/dataConnetction.ipynb:4056-4929\nlangchain/dataConnection/dataConnetction.ipynb:4929-5588\nlangchain/dataConnection/dataConnetction.ipynb:5588-6588\nlangchain/dataConnection/dataConnetction.ipynb:6588-7019\nlangchain/dataConnection/dataConnetction.ipynb:7019-7924\nlangchain/dataConnection/dataConnetction.ipynb:7924-8511\nlangchain/dataConnection/dataConnetction.ipynb:8511-9442\nlangchain/dataConnection/dataConnetction.ipynb:9442-10009\nlangchain/dataConnection/dataConnetction.ipynb:10009-10698\nlangchain/dataConnection/dataConnetction.ipynb:10698-11424\nlangchain/dataConnection/dataConnetction.ipynb:11424-12448\nlangchain/dataConnection/dataConnetction.ipynb:12448-12667\nlangchain/dataConnection/dataConnetction.ipynb:12667-13512\nlangchain/dataConnection/dataConnetction.ipynb:13512-14221\nlangchain/dataConnection/dataConnetction.ipynb:14221-15182\nlangchain/dataConnection/dataConnetction.ipynb:15182-15768\nlangchain/dataConnection/dataConnetction.ipynb:15768-16283\n.venv/Lib/site-packages/jupyter_lsp/manager.py:2040-2684\n.venv/Lib/site-packages/jupyter_lsp/manager.py:2684-3354\nlangchain/overall.md:707-1414\nlangchain/overall.md:2141-2889\n.venv/Lib/site-packages/pandas/core/shared_docs.py:13806-14617\n.venv/Lib/site-packages/pandas/core/shared_docs.py:14794-15613\n.venv/Lib/site-packages/jupyter_lsp/virtual_documents_shadow.py:589-1506\n.venv/Lib/site-packages/jupyter_lsp/virtual_documents_shadow.py:3528-4452\n.venv/Lib/site-packages/charset_normalizer-3.4.2.dist-info/METADATA:10862-11572\nmemoryChat/LCEL_memory_chat.ipynb:14802-15912\n.venv/Lib/site-packages/setuptools/tests/config/test_pyprojecttoml.py:381-1044\n.venv/Lib/site-packages/jupyter_lsp/specs/pyright.py:0-776\n.venv/Lib/site-packages/jsonschema/cli.py:713-1653\nuv.lock:70158-70768\n.venv/Lib/site-packages/jupyter_lsp/serverextension.py:276-870&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;\r\n# 1. Document Loaders 示例\r\ndef document_loaders_example():\r\n    \&quot;\&quot;\&quot;文档加载器示例\&quot;\&quot;\&quot;\r\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\r\n    print(\&quot;1. Document Loaders 文档加载器示例\&quot;)\r\n    print(\&quot;=\&quot; * 60)\r\n\r\n    # 1.1 文本文件加载\r\n    print(\&quot;\\n1.1 文本文件加载\&quot;)\r\n    # 创建示例文本文件\r\n    with open(\&quot;sample.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r\n        f.write(\&quot;\&quot;\&quot;\r\n        人工智能（AI）是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\r\n        机器学习是AI的一个子集，它使计算机能够从数据中学习而无需明确编程。\r\n        深度学习是机器学习的一个子集，使用神经网络来模拟人脑的工作方式。\r\n        \&quot;\&quot;\&quot;)\r\n\r\n    loader = TextLoader(\&quot;sample.txt\&quot;, encoding=\&quot;utf-8\&quot;)\r\n    documents = loader.load()\r\n    print(f\&quot;加载的文档数量: {len(documents)}\&quot;)\r\n    print(f\&quot;文档内容预览: {documents[0].page_content[:100]}...\&quot;)\r\n\r\n    # 1.2 CSV文件加载\r\n    print(\&quot;\\n1.2 CSV文件加载\&quot;)\r\n    import pandas as pd\r\n\r\n    # 创建示例CSV\r\n    df = pd.DataFrame({\r\n        'name': ['张三', '李四', '王五'],\r\n        'age': [25, 30, 35],\r\n        'city': ['北京', '上海', '深圳'],\r\n        'description': ['软件工程师', '数据科学家', '产品经理']\r\n    })\r\n    df.to_csv(\&quot;sample.csv\&quot;, index=False, encoding=\&quot;utf-8\&quot;)\r\n\r\n    csv_loader = CSVLoader(\&quot;sample.csv\&quot;, encoding=\&quot;utf-8\&quot;)\r\n    csv_docs = csv_loader.load()\r\n    print(f\&quot;CSV文档数量: {len(csv_docs)}\&quot;)\r\n    print(f\&quot;CSV文档示例: {csv_docs[0].page_content}\&quot;)\r\n\r\n    # 1.3 JSON文件加载\r\n    print(\&quot;\\n1.3 JSON文件加载\&quot;)\r\n    import json\r\n\r\n    sample_data = [\r\n        {\&quot;title\&quot;: \&quot;Python编程\&quot;, \&quot;content\&quot;: \&quot;Python是一种高级编程语言\&quot;, \&quot;category\&quot;: \&quot;技术\&quot;},\r\n        {\&quot;title\&quot;: \&quot;数据分析\&quot;, \&quot;content\&quot;: \&quot;数据分析是从数据中提取洞察的过程\&quot;, \&quot;category\&quot;: \&quot;数据科学\&quot;}\r\n    ]\r\n\r\n    with open(\&quot;sample.json\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r\n        json.dump(sample_data, f, ensure_ascii=False, indent=2)\r\n\r\n    json_loader = JSONLoader(\&quot;sample.json\&quot;, jq_schema=\&quot;.[].content\&quot;)\r\n    json_docs = json_loader.load()\r\n    print(f\&quot;JSON文档数量: {len(json_docs)}\&quot;)\r\n    print(f\&quot;JSON文档示例: {json_docs[0].page_content}\&quot;)\r\n\r\n    # 1.4 目录批量加载\r\n    print(\&quot;\\n1.4 目录批量加载\&quot;)\r\n    os.makedirs(\&quot;docs\&quot;, exist_ok=True)\r\n\r\n    # 创建多个文档\r\n    for i in range(3):\r\n        with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\r\n            f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\r\n\r\n    dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\r\n    dir_docs = dir_loader.load()\r\n    print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r\n\r\n    return documents + csv_docs + json_docs + dir_docs\r\ndocument_loaders_example()\n\n报错了\n\n\n-------------------------------------------------------------------------\r\nUnicodeDecodeError                        Traceback (most recent call last)\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\text.py:43, in TextLoader.lazy_load(self)\r\n     42     with open(self.file_path, encoding=self.encoding) as f:\r\n---&gt; 43         text = f.read()\r\n     44 except UnicodeDecodeError as e:\r\n\r\nUnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 8: illegal multibyte sequence\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nRuntimeError                              Traceback (most recent call last)\r\nCell In[6], line 72\r\n     69     print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r\n     71     return documents + csv_docs + json_docs + dir_docs\r\n---&gt; 72 document_loaders_example()\r\n\r\nCell In[6], line 68, in document_loaders_example()\r\n     65         f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\r\n     67 dir_loader = DirectoryLoader(\&quot;docs\&quot;, glob=\&quot;*.txt\&quot;, loader_cls=TextLoader)\r\n---&gt; 68 dir_docs = dir_loader.load()\r\n     69 print(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\r\n     71 return documents + csv_docs + json_docs + dir_docs\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:117, in DirectoryLoader.load(self)\r\n    115 def load(self) -&gt; List[Document]:\r\n    116     \&quot;\&quot;\&quot;Load documents.\&quot;\&quot;\&quot;\r\n--&gt; 117     return list(self.lazy_load())\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:195, in DirectoryLoader.lazy_load(self)\r\n    193 else:\r\n    194     for i in items:\r\n--&gt; 195         yield from self._lazy_load_file(i, p, pbar)\r\n    197 if pbar:\r\n    198     pbar.close()\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:233, in DirectoryLoader._lazy_load_file(self, item, path, pbar)\r\n    231     else:\r\n    232         logger.error(f\&quot;Error loading file {str(item)}\&quot;)\r\n--&gt; 233         raise e\r\n    234 finally:\r\n    235     if pbar:\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\directory.py:223, in DirectoryLoader._lazy_load_file(self, item, path, pbar)\r\n    221 loader = self.loader_cls(str(item), **self.loader_kwargs)\r\n    222 try:\r\n--&gt; 223     for subdoc in loader.lazy_load():\r\n    224         yield subdoc\r\n    225 except NotImplementedError:\r\n\r\nFile D:\\javaDevelopment\\program_project\\Pycharm_project\\LangChainNoteBook\\.venv\\Lib\\site-packages\\langchain_community\\document_loaders\\text.py:56, in TextLoader.lazy_load(self)\r\n     54                 continue\r\n     55     else:\r\n---&gt; 56         raise RuntimeError(f\&quot;Error loading {self.file_path}\&quot;) from e\r\n     57 except Exception as e:\r\n     58     raise RuntimeError(f\&quot;Error loading {self.file_path}\&quot;) from e\r\n\r\nRuntimeError: Error loading docs\\doc_0.txt&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T15:46:17.370Z&quot;,&quot;response_text&quot;:&quot;这个错误是由于编码问题导致的。`DirectoryLoader` 使用的 `TextLoader` 默认没有指定编码，在Windows系统上可能会使用GBK编码，但文件是用UTF-8编码保存的。\n\n解决方案是在 `DirectoryLoader` 中为 `TextLoader` 指定编码参数：\n\n````python path=langchain/dataConnection/dataConnetction.ipynb mode=EDIT\n# 1.4 目录批量加载\nprint(\&quot;\\n1.4 目录批量加载\&quot;)\nos.makedirs(\&quot;docs\&quot;, exist_ok=True)\n\n# 创建多个文档\nfor i in range(3):\n    with open(f\&quot;docs/doc_{i}.txt\&quot;, \&quot;w\&quot;, encoding=\&quot;utf-8\&quot;) as f:\n        f.write(f\&quot;这是第{i+1}个文档的内容。包含关于技术{i+1}的详细信息。\&quot;)\n\n# 修复：为TextLoader指定编码\ndir_loader = DirectoryLoader(\n    \&quot;docs\&quot;, \n    glob=\&quot;*.txt\&quot;, \n    loader_cls=TextLoader,\n    loader_kwargs={\&quot;encoding\&quot;: \&quot;utf-8\&quot;}  # 添加编码参数\n)\ndir_docs = dir_loader.load()\nprint(f\&quot;目录文档数量: {len(dir_docs)}\&quot;)\n````\n\n关键修改：\n- 在 `DirectoryLoader` 中添加了 `loader_kwargs={\&quot;encoding\&quot;: \&quot;utf-8\&quot;}` 参数\n- 这样 `TextLoader` 就会使用UTF-8编码来读取文件，避免编码错误\n\n这个问题在Windows系统上比较常见，因为Windows默认使用GBK编码，而我们创建的文件使用的是UTF-8编码。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;810&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;810&quot;,&quot;char_end&quot;:&quot;1023&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;1023&quot;,&quot;char_end&quot;:&quot;1926&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;1926&quot;,&quot;char_end&quot;:&quot;2537&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;2537&quot;,&quot;char_end&quot;:&quot;3186&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;3186&quot;,&quot;char_end&quot;:&quot;4056&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;4056&quot;,&quot;char_end&quot;:&quot;4929&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;4929&quot;,&quot;char_end&quot;:&quot;5588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;5588&quot;,&quot;char_end&quot;:&quot;6588&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;6588&quot;,&quot;char_end&quot;:&quot;7019&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;7019&quot;,&quot;char_end&quot;:&quot;7924&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;7924&quot;,&quot;char_end&quot;:&quot;8511&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;8511&quot;,&quot;char_end&quot;:&quot;9442&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;9442&quot;,&quot;char_end&quot;:&quot;10009&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;10009&quot;,&quot;char_end&quot;:&quot;10698&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;10698&quot;,&quot;char_end&quot;:&quot;11424&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;11424&quot;,&quot;char_end&quot;:&quot;12448&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;12448&quot;,&quot;char_end&quot;:&quot;12667&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;12667&quot;,&quot;char_end&quot;:&quot;13512&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;13512&quot;,&quot;char_end&quot;:&quot;14221&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;14221&quot;,&quot;char_end&quot;:&quot;15182&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;15182&quot;,&quot;char_end&quot;:&quot;15768&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;15768&quot;,&quot;char_end&quot;:&quot;16283&quot;,&quot;blob_name&quot;:&quot;28320423fadae89a6f4af945797335a598c4f10d8429129ee6983b4206f1e451&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/dataConnection/dataConnetction.ipynb&quot;}},{&quot;char_start&quot;:&quot;2040&quot;,&quot;char_end&quot;:&quot;2684&quot;,&quot;blob_name&quot;:&quot;67d7ae89f175ffc25faf8f40000358fdab7eba81aafbcafd7bab1f9c9c4bc4c9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/manager.py&quot;}},{&quot;char_start&quot;:&quot;2684&quot;,&quot;char_end&quot;:&quot;3354&quot;,&quot;blob_name&quot;:&quot;67d7ae89f175ffc25faf8f40000358fdab7eba81aafbcafd7bab1f9c9c4bc4c9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/manager.py&quot;}},{&quot;char_start&quot;:&quot;707&quot;,&quot;char_end&quot;:&quot;1414&quot;,&quot;blob_name&quot;:&quot;616f3f9b9b87c8f1fd6cf488b208e25727064d0695275b3ffec0b7fe7753567b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/overall.md&quot;}},{&quot;char_start&quot;:&quot;2141&quot;,&quot;char_end&quot;:&quot;2889&quot;,&quot;blob_name&quot;:&quot;616f3f9b9b87c8f1fd6cf488b208e25727064d0695275b3ffec0b7fe7753567b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/overall.md&quot;}},{&quot;char_start&quot;:&quot;13806&quot;,&quot;char_end&quot;:&quot;14617&quot;,&quot;blob_name&quot;:&quot;f8aa35da13fa00f2d0c0bbf65cf14e968f5299efac928813117cf0a329275319&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/pandas/core/shared_docs.py&quot;}},{&quot;char_start&quot;:&quot;14794&quot;,&quot;char_end&quot;:&quot;15613&quot;,&quot;blob_name&quot;:&quot;f8aa35da13fa00f2d0c0bbf65cf14e968f5299efac928813117cf0a329275319&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/pandas/core/shared_docs.py&quot;}},{&quot;char_start&quot;:&quot;589&quot;,&quot;char_end&quot;:&quot;1506&quot;,&quot;blob_name&quot;:&quot;abd314273fd9624f144d2f65d2939cf5ef37c1d2b260f35eddedc3b976f07415&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/virtual_documents_shadow.py&quot;}},{&quot;char_start&quot;:&quot;3528&quot;,&quot;char_end&quot;:&quot;4452&quot;,&quot;blob_name&quot;:&quot;abd314273fd9624f144d2f65d2939cf5ef37c1d2b260f35eddedc3b976f07415&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/virtual_documents_shadow.py&quot;}},{&quot;char_start&quot;:&quot;10862&quot;,&quot;char_end&quot;:&quot;11572&quot;,&quot;blob_name&quot;:&quot;eb197e7d5e2b8d3ec706804c23648f8b661f585f3df9fe6cdb0a097c372e569a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/charset_normalizer-3.4.2.dist-info/METADATA&quot;}},{&quot;char_start&quot;:&quot;14802&quot;,&quot;char_end&quot;:&quot;15912&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;381&quot;,&quot;char_end&quot;:&quot;1044&quot;,&quot;blob_name&quot;:&quot;8b6bb7cbd2dbdc373f91f071f25375c0236730b0a7d361a317bc981a34722c86&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/setuptools/tests/config/test_pyprojecttoml.py&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;776&quot;,&quot;blob_name&quot;:&quot;dee08f23dd2d2d8b1911695cfad4092a76a11fbfad43661afeccfe9a69131805&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/specs/pyright.py&quot;}},{&quot;char_start&quot;:&quot;713&quot;,&quot;char_end&quot;:&quot;1653&quot;,&quot;blob_name&quot;:&quot;33e148606119a973b729c5a847f447621e00f98a33efd1bd6ba13662439aecc6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jsonschema/cli.py&quot;}},{&quot;char_start&quot;:&quot;70158&quot;,&quot;char_end&quot;:&quot;70768&quot;,&quot;blob_name&quot;:&quot;e7b249e487e5d2a6d333b845a1425589ec8ed27198ff555743fc39a4114850ad&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;uv.lock&quot;}},{&quot;char_start&quot;:&quot;276&quot;,&quot;char_end&quot;:&quot;870&quot;,&quot;blob_name&quot;:&quot;c1b7143d7c7d61cac01a448d987a3c621186a5e2e797aa9c302683f8ed1817a6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.venv/Lib/site-packages/jupyter_lsp/serverextension.py&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-15531a97-740a-4d03-b0a6-659d6133dd7d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/overall.md&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/dataConnection/dataConnetction.ipynb:L244-244&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBookfalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false,&quot;isAgentConversation&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;7ca5af0b-e993-42f8-bf3c-222037ba6258&quot;},&quot;3b4ae560-9944-417a-bff7-d0150595c3b5&quot;:{&quot;id&quot;:&quot;3b4ae560-9944-417a-bff7-d0150595c3b5&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T16:00:33.495Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T16:00:33.495Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0},&quot;b09df882-0041-49d4-8dad-89da589b016c&quot;:{&quot;id&quot;:&quot;b09df882-0041-49d4-8dad-89da589b016c&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T15:59:08.306Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T16:11:24.185Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;ba3babbf-946c-4acc-acef-5b457a67233e&quot;,&quot;request_message&quot;:&quot;@LangChain 0.3详细讲解LCEL（LangChain Expression Language），给出完整的可运行的代码示例，并尽可能多的给出例子&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;mention&quot;,&quot;attrs&quot;:{&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;label&quot;:&quot;LangChain 0.3&quot;,&quot;data&quot;:{&quot;label&quot;:&quot;LangChain 0.3&quot;,&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;externalSource&quot;:{&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;title&quot;:&quot;Documentation for LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;sourceType&quot;:&quot;&quot;},&quot;type&quot;:&quot;item&quot;}}},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;详细讲解LCEL（LangChain Expression Language），给出完整的可运行的代码示例，并尽可能多的给出例子&quot;}]}]},&quot;mentioned_items&quot;:[{&quot;label&quot;:&quot;LangChain 0.3&quot;,&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;externalSource&quot;:{&quot;name&quot;:&quot;LangChain 0.3&quot;,&quot;title&quot;:&quot;Documentation for LangChain 0.3&quot;,&quot;id&quot;:&quot;docset://langchain~0.3&quot;,&quot;sourceType&quot;:&quot;&quot;},&quot;type&quot;:&quot;item&quot;}],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;基于您的 `langchain/Chains/LCELChain.ipynb` 文件，我来详细讲解 LCEL（LangChain Expression Language）并提供更多完整的代码示例。\n\n## LCEL 核心概念\n\nLCEL 是 LangChain 0.3 中的声明式编程框架，基于 `Runnable` 接口构建。它提供了强大的组合能力和优化的执行性能。\n\n### 核心优势\n- **声明式编程**：描述想要什么，而不是如何实现\n- **自动优化**：并行执行、流式处理、批量处理\n- **统一接口**：所有组件都实现 `Runnable` 接口\n- **易于调试**：自动 LangSmith 追踪\n\n## 完整代码示例集合\n\n&lt;augment_code_snippet path=\&quot;langchain/Chains/LCEL_Advanced_Examples.py\&quot; mode=\&quot;EDIT\&quot;&gt;\n```python\n\&quot;\&quot;\&quot;\nLangChain 0.3 LCEL 高级示例集合\n基于 LangChain 0.3.26 版本\n\&quot;\&quot;\&quot;\n\nimport asyncio\nimport json\nimport time\nfrom typing import Dict, List, Any, Optional, Union\nfrom datetime import datetime\nfrom collections import deque\n\n# LangChain 核心组件\nfrom langchain_core.messages import HumanMessage, AIMessage, SystemMessage\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, MessagesPlaceholder\nfrom langchain_core.output_parsers import StrOutputParser, JsonOutputParser, PydanticOutputParser\nfrom langchain_core.runnables import (\n    RunnablePassthrough,\n    RunnableLambda,\n    RunnableParallel,\n    RunnableBranch,\n    RunnableMap,\n    RunnableSequence,\n    RunnableConfig,\n    Runnable\n)\nfrom langchain_core.runnables.history import RunnableWithMessageHistory\nfrom langchain_core.chat_history import InMemoryChatMessageHistory\nfrom langchain_ollama import OllamaLLM, ChatOllama\nfrom pydantic import BaseModel, Field\n\n# 配置\nOLLAMA_BASE_URL = \&quot;http://localhost:11434\&quot;\nOLLAMA_MODEL = \&quot;qwen2.5:3b\&quot;\n\ndef create_llm():\n    \&quot;\&quot;\&quot;创建LLM实例\&quot;\&quot;\&quot;\n    return OllamaLLM(\n        base_url=OLLAMA_BASE_URL,\n        model=OLLAMA_MODEL,\n        temperature=0.7\n    )\n\ndef create_chat_llm():\n    \&quot;\&quot;\&quot;创建Chat LLM实例\&quot;\&quot;\&quot;\n    return ChatOllama(\n        base_url=OLLAMA_BASE_URL,\n        model=OLLAMA_MODEL,\n        temperature=0.7\n    )\n\n# ============================================================================\n# 1. 基础 LCEL 操作符示例\n# ============================================================================\n\ndef basic_operators_example():\n    \&quot;\&quot;\&quot;基础 LCEL 操作符示例\&quot;\&quot;\&quot;\n    print(\&quot;=\&quot; * 60)\n    print(\&quot;1. 基础 LCEL 操作符\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 管道操作符 |\n    prompt = PromptTemplate.from_template(\&quot;翻译成英文：{text}\&quot;)\n    chain1 = prompt | llm | StrOutputParser()\n    \n    # 等价于 RunnableSequence\n    chain2 = RunnableSequence(first=prompt, middle=[llm], last=StrOutputParser())\n    \n    result1 = chain1.invoke({\&quot;text\&quot;: \&quot;你好世界\&quot;})\n    result2 = chain2.invoke({\&quot;text\&quot;: \&quot;你好世界\&quot;})\n    \n    print(f\&quot;管道操作符结果：{result1}\&quot;)\n    print(f\&quot;RunnableSequence结果：{result2}\&quot;)\n\n# ============================================================================\n# 2. RunnablePassthrough 高级用法\n# ============================================================================\n\ndef advanced_passthrough_example():\n    \&quot;\&quot;\&quot;RunnablePassthrough 高级用法\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;2. RunnablePassthrough 高级用法\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 使用 assign 添加新字段\n    def calculate_stats(x):\n        text = x[\&quot;text\&quot;]\n        return {\n            \&quot;word_count\&quot;: len(text.split()),\n            \&quot;char_count\&quot;: len(text),\n            \&quot;has_question\&quot;: \&quot;?\&quot; in text or \&quot;？\&quot; in text\n        }\n\n    # 复杂的数据流处理\n    chain = (\n        RunnablePassthrough.assign(stats=RunnableLambda(calculate_stats))\n        | RunnablePassthrough.assign(\n            analysis_prompt=lambda x: f\&quot;\&quot;\&quot;\n分析以下文本（{x['stats']['word_count']}词，{x['stats']['char_count']}字符）：\n文本：{x['text']}\n是否包含问题：{x['stats']['has_question']}\n\n请提供详细分析：\n\&quot;\&quot;\&quot;\n        )\n        | RunnablePassthrough.assign(\n            analysis=lambda x: (PromptTemplate.from_template(\&quot;{analysis_prompt}\&quot;) | llm | StrOutputParser()).invoke(x)\n        )\n        | RunnableLambda(lambda x: {\n            \&quot;original\&quot;: x[\&quot;text\&quot;],\n            \&quot;stats\&quot;: x[\&quot;stats\&quot;],\n            \&quot;analysis\&quot;: x[\&quot;analysis\&quot;]\n        })\n    )\n\n    result = chain.invoke({\&quot;text\&quot;: \&quot;人工智能的发展前景如何？它会改变我们的生活吗？\&quot;})\n    \n    print(f\&quot;原文：{result['original']}\&quot;)\n    print(f\&quot;统计：{result['stats']}\&quot;)\n    print(f\&quot;分析：{result['analysis']}\&quot;)\n\n# ============================================================================\n# 3. RunnableParallel 复杂并行处理\n# ============================================================================\n\ndef complex_parallel_example():\n    \&quot;\&quot;\&quot;复杂并行处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;3. 复杂并行处理\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 定义多个分析任务\n    sentiment_chain = (\n        PromptTemplate.from_template(\&quot;分析情感（积极/消极/中性）：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n    \n    topic_chain = (\n        PromptTemplate.from_template(\&quot;提取3个主要关键词：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n    \n    summary_chain = (\n        PromptTemplate.from_template(\&quot;一句话总结：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n    \n    length_analysis = RunnableLambda(lambda x: {\n        \&quot;word_count\&quot;: len(x[\&quot;text\&quot;].split()),\n        \&quot;char_count\&quot;: len(x[\&quot;text\&quot;]),\n        \&quot;sentence_count\&quot;: len([s for s in x[\&quot;text\&quot;].split(\&quot;。\&quot;) if s.strip()])\n    })\n\n    # 创建复杂并行链\n    parallel_chain = RunnableParallel({\n        \&quot;sentiment\&quot;: sentiment_chain,\n        \&quot;topics\&quot;: topic_chain,\n        \&quot;summary\&quot;: summary_chain,\n        \&quot;length_stats\&quot;: length_analysis,\n        \&quot;original\&quot;: RunnablePassthrough(),\n        \&quot;timestamp\&quot;: RunnableLambda(lambda x: datetime.now().isoformat())\n    })\n\n    # 后处理：合并结果\n    def format_results(results):\n        return f\&quot;\&quot;\&quot;\n文本分析报告\n================\n原文：{results['original']['text']}\n时间：{results['timestamp']}\n\n情感分析：{results['sentiment']}\n关键词：{results['topics']}\n摘要：{results['summary']}\n\n统计信息：\n- 字数：{results['length_stats']['word_count']}\n- 字符数：{results['length_stats']['char_count']}\n- 句子数：{results['length_stats']['sentence_count']}\n\&quot;\&quot;\&quot;\n\n    final_chain = parallel_chain | RunnableLambda(format_results)\n\n    text = \&quot;今天参加了一个关于人工智能的会议，讨论了机器学习、深度学习和自然语言处理的最新进展。专家们分享了很多有趣的观点，让我对AI的未来发展有了更深的理解。\&quot;\n    \n    result = final_chain.invoke({\&quot;text\&quot;: text})\n    print(result)\n\n# ============================================================================\n# 4. RunnableBranch 复杂条件分支\n# ============================================================================\n\ndef complex_branch_example():\n    \&quot;\&quot;\&quot;复杂条件分支示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;4. 复杂条件分支\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 复杂条件判断函数\n    def is_technical_question(x):\n        technical_keywords = [\&quot;算法\&quot;, \&quot;编程\&quot;, \&quot;代码\&quot;, \&quot;技术\&quot;, \&quot;开发\&quot;, \&quot;API\&quot;, \&quot;数据库\&quot;]\n        return any(keyword in x[\&quot;text\&quot;] for keyword in technical_keywords)\n\n    def is_business_question(x):\n        business_keywords = [\&quot;市场\&quot;, \&quot;销售\&quot;, \&quot;客户\&quot;, \&quot;收入\&quot;, \&quot;成本\&quot;, \&quot;利润\&quot;, \&quot;商业\&quot;]\n        return any(keyword in x[\&quot;text\&quot;] for keyword in business_keywords)\n\n    def is_personal_question(x):\n        personal_keywords = [\&quot;我\&quot;, \&quot;个人\&quot;, \&quot;建议\&quot;, \&quot;帮助\&quot;, \&quot;怎么办\&quot;]\n        return any(keyword in x[\&quot;text\&quot;] for keyword in personal_keywords)\n\n    def get_text_complexity(x):\n        text = x[\&quot;text\&quot;]\n        return len(text.split()) &gt; 20  # 超过20词认为是复杂问题\n\n    # 创建不同类型的处理链\n    technical_chain = (\n        PromptTemplate.from_template(\&quot;\&quot;\&quot;\n作为技术专家，请详细回答这个技术问题：{text}\n\n请包括：\n1. 技术原理\n2. 实现方法\n3. 最佳实践\n\&quot;\&quot;\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    business_chain = (\n        PromptTemplate.from_template(\&quot;\&quot;\&quot;\n作为商业顾问，请分析这个商业问题：{text}\n\n请包括：\n1. 市场分析\n2. 风险评估\n3. 建议方案\n\&quot;\&quot;\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    personal_chain = (\n        PromptTemplate.from_template(\&quot;\&quot;\&quot;\n作为生活顾问，请给出贴心的建议：{text}\n\n请提供：\n1. 理解和共情\n2. 具体建议\n3. 鼓励话语\n\&quot;\&quot;\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    # 复杂问题需要更详细的分析\n    complex_analysis_chain = (\n        RunnablePassthrough.assign(\n            analysis=lambda x: (\n                PromptTemplate.from_template(\&quot;首先分析问题的核心要点：{text}\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnablePassthrough.assign(\n            detailed_response=lambda x: (\n                PromptTemplate.from_template(\&quot;\&quot;\&quot;\n基于分析：{analysis}\n\n请详细回答原问题：{text}\n\&quot;\&quot;\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnableLambda(lambda x: f\&quot;分析：{x['analysis']}\\n\\n详细回答：{x['detailed_response']}\&quot;)\n    )\n\n    simple_chain = (\n        PromptTemplate.from_template(\&quot;简洁回答：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    # 创建嵌套分支\n    complexity_branch = RunnableBranch(\n        (get_text_complexity, complex_analysis_chain),\n        simple_chain\n    )\n\n    main_branch = RunnableBranch(\n        (is_technical_question, technical_chain),\n        (is_business_question, business_chain),\n        (is_personal_question, personal_chain),\n        complexity_branch  # 默认根据复杂度处理\n    )\n\n    # 测试不同类型的问题\n    test_questions = [\n        {\&quot;text\&quot;: \&quot;如何实现一个高效的排序算法？\&quot;},\n        {\&quot;text\&quot;: \&quot;我们公司的市场策略应该如何调整？\&quot;},\n        {\&quot;text\&quot;: \&quot;我最近工作压力很大，该怎么办？\&quot;},\n        {\&quot;text\&quot;: \&quot;什么是人工智能？\&quot;},\n        {\&quot;text\&quot;: \&quot;请详细解释深度学习的工作原理，包括反向传播算法、梯度下降优化、正则化技术，以及在计算机视觉和自然语言处理中的具体应用案例。\&quot;}\n    ]\n\n    for i, question in enumerate(test_questions, 1):\n        print(f\&quot;\\n问题{i}：{question['text']}\&quot;)\n        result = main_branch.invoke(question)\n        print(f\&quot;回答{i}：{result}\&quot;)\n        print(\&quot;-\&quot; * 40)\n\n# ============================================================================\n# 5. 自定义 Runnable 类\n# ============================================================================\n\nclass CustomTextProcessor(Runnable):\n    \&quot;\&quot;\&quot;自定义文本处理器\&quot;\&quot;\&quot;\n    \n    def __init__(self, processing_type: str = \&quot;default\&quot;):\n        self.processing_type = processing_type\n    \n    def invoke(self, input: Dict[str, Any], config: Optional[RunnableConfig] = None) -&gt; Dict[str, Any]:\n        text = input.get(\&quot;text\&quot;, \&quot;\&quot;)\n        \n        if self.processing_type == \&quot;uppercase\&quot;:\n            processed = text.upper()\n        elif self.processing_type == \&quot;reverse\&quot;:\n            processed = text[::-1]\n        elif self.processing_type == \&quot;word_count\&quot;:\n            processed = f\&quot;字数统计：{len(text.split())}词\&quot;\n        else:\n            processed = text.strip()\n        \n        return {\n            \&quot;original\&quot;: text,\n            \&quot;processed\&quot;: processed,\n            \&quot;type\&quot;: self.processing_type,\n            \&quot;timestamp\&quot;: datetime.now().isoformat()\n        }\n\ndef custom_runnable_example():\n    \&quot;\&quot;\&quot;自定义 Runnable 示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;5. 自定义 Runnable 类\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    # 创建不同类型的处理器\n    processors = {\n        \&quot;uppercase\&quot;: CustomTextProcessor(\&quot;uppercase\&quot;),\n        \&quot;reverse\&quot;: CustomTextProcessor(\&quot;reverse\&quot;),\n        \&quot;word_count\&quot;: CustomTextProcessor(\&quot;word_count\&quot;)\n    }\n\n    # 创建并行处理链\n    parallel_processing = RunnableParallel({\n        \&quot;uppercase_result\&quot;: processors[\&quot;uppercase\&quot;],\n        \&quot;reverse_result\&quot;: processors[\&quot;reverse\&quot;],\n        \&quot;count_result\&quot;: processors[\&quot;word_count\&quot;],\n        \&quot;original\&quot;: RunnablePassthrough()\n    })\n\n    test_text = {\&quot;text\&quot;: \&quot;Hello LangChain LCEL\&quot;}\n    result = parallel_processing.invoke(test_text)\n    \n    print(f\&quot;原文：{result['original']['text']}\&quot;)\n    print(f\&quot;大写处理：{result['uppercase_result']['processed']}\&quot;)\n    print(f\&quot;反转处理：{result['reverse_result']['processed']}\&quot;)\n    print(f\&quot;计数处理：{result['count_result']['processed']}\&quot;)\n\n# ============================================================================\n# 6. 流式处理高级示例\n# ============================================================================\n\ndef advanced_streaming_example():\n    \&quot;\&quot;\&quot;高级流式处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;6. 高级流式处理\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 创建流式处理链\n    prompt = PromptTemplate.from_template(\&quot;\&quot;\&quot;\n请详细解释以下概念，并给出实际应用例子：{topic}\n\n请按以下结构回答：\n1. 定义和基本概念\n2. 核心原理\n3. 实际应用\n4. 发展趋势\n\&quot;\&quot;\&quot;)\n\n    # 添加流式处理的元数据\n    def add_streaming_metadata(chunk):\n        return {\n            \&quot;content\&quot;: chunk,\n            \&quot;timestamp\&quot;: datetime.now().isoformat(),\n            \&quot;chunk_length\&quot;: len(chunk)\n        }\n\n    streaming_chain = (\n        prompt \n        | llm \n        | StrOutputParser()\n        | RunnableLambda(add_streaming_metadata)\n    )\n\n    print(\&quot;开始流式生成（带元数据）...\&quot;)\n    print(\&quot;主题：机器学习\&quot;)\n    print(\&quot;\\n回答：\&quot;)\n    \n    total_chunks = 0\n    total_length = 0\n    \n    for chunk_data in streaming_chain.stream({\&quot;topic\&quot;: \&quot;机器学习\&quot;}):\n        content = chunk_data[\&quot;content\&quot;]\n        print(content, end=\&quot;\&quot;, flush=True)\n        total_chunks += 1\n        total_length += chunk_data[\&quot;chunk_length\&quot;]\n    \n    print(f\&quot;\\n\\n流式处理完成！\&quot;)\n    print(f\&quot;总块数：{total_chunks}\&quot;)\n    print(f\&quot;总长度：{total_length}字符\&quot;)\n\n# ============================================================================\n# 7. 批量处理示例\n# ============================================================================\n\nasync def batch_processing_example():\n    \&quot;\&quot;\&quot;批量处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;7. 批量处理示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 创建批量处理链\n    prompt = PromptTemplate.from_template(\&quot;用一句话解释：{concept}\&quot;)\n    chain = prompt | llm | StrOutputParser()\n\n    # 准备批量数据\n    concepts = [\n        {\&quot;concept\&quot;: \&quot;人工智能\&quot;},\n        {\&quot;concept\&quot;: \&quot;机器学习\&quot;},\n        {\&quot;concept\&quot;: \&quot;深度学习\&quot;},\n        {\&quot;concept\&quot;: \&quot;自然语言处理\&quot;},\n        {\&quot;concept\&quot;: \&quot;计算机视觉\&quot;},\n        {\&quot;concept\&quot;: \&quot;强化学习\&quot;}\n    ]\n\n    print(\&quot;开始批量处理...\&quot;)\n    start_time = time.time()\n\n    # 同步批量处理\n    sync_results = chain.batch(concepts)\n    sync_time = time.time() - start_time\n\n    print(f\&quot;同步批量处理完成，耗时：{sync_time:.2f}秒\&quot;)\n\n    # 异步批量处理\n    start_time = time.time()\n    async_results = await chain.abatch(concepts)\n    async_time = time.time() - start_time\n\n    print(f\&quot;异步批量处理完成，耗时：{async_time:.2f}秒\&quot;)\n\n    # 显示结果\n    for i, (concept, sync_result, async_result) in enumerate(zip(concepts, sync_results, async_results), 1):\n        print(f\&quot;\\n概念{i}：{concept['concept']}\&quot;)\n        print(f\&quot;同步结果：{sync_result}\&quot;)\n        print(f\&quot;异步结果：{async_result}\&quot;)\n\n# ============================================================================\n# 8. 错误处理和重试机制\n# ============================================================================\n\ndef error_handling_example():\n    \&quot;\&quot;\&quot;错误处理和重试机制示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;8. 错误处理和重试机制\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟可能失败的处理函数\n    def risky_processing(x):\n        import random\n        if random.random() &lt; 0.3:  # 30% 失败率\n            raise Exception(\&quot;模拟处理失败\&quot;)\n        return {\&quot;processed\&quot;: f\&quot;成功处理：{x['text']}\&quot;, \&quot;status\&quot;: \&quot;success\&quot;}\n\n    # 重试装饰器\n    def with_retry(func, max_retries=3):\n        def wrapper(x):\n            for attempt in range(max_retries):\n                try:\n                    return func(x)\n                except Exception as e:\n                    if attempt == max_retries - 1:\n                        return {\&quot;error\&quot;: str(e), \&quot;status\&quot;: \&quot;failed\&quot;, \&quot;attempts\&quot;: attempt + 1}\n                    print(f\&quot;尝试 {attempt + 1} 失败：{e}\&quot;)\n            return {\&quot;error\&quot;: \&quot;最大重试次数已达到\&quot;, \&quot;status\&quot;: \&quot;failed\&quot;}\n        return wrapper\n\n    # 创建带错误处理的链\n    safe_processing = RunnableLambda(with_retry(risky_processing))\n    \n    # 备用处理链\n    fallback_chain = RunnableLambda(lambda x: {\n        \&quot;processed\&quot;: f\&quot;备用处理：{x['text']}\&quot;, \n        \&quot;status\&quot;: \&quot;fallback\&quot;\n    })\n\n    # 主处理链\n    main_chain = (\n        RunnablePassthrough.assign(result=safe_processing)\n        | RunnableLambda(lambda x: \n            x[\&quot;result\&quot;] if x[\&quot;result\&quot;][\&quot;status\&quot;] != \&quot;failed\&quot; \n            else {**x, \&quot;result\&quot;: fallback_chain.invoke(x)}\n        )\n    )\n\n    # 测试错误处理\n    test_inputs = [\n        {\&quot;text\&quot;: \&quot;测试文本1\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本2\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本3\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本4\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本5\&quot;}\n    ]\n\n    for i, input_data in enumerate(test_inputs, 1):\n        result = main_chain.invoke(input_data)\n        print(f\&quot;输入{i}：{input_data['text']}\&quot;)\n        print(f\&quot;结果{i}：{result['result']}\&quot;)\n        print(f\&quot;状态{i}：{result['result']['status']}\&quot;)\n        print(\&quot;-\&quot; * 30)\n\n# ============================================================================\n# 9. 动态链构建\n# ============================================================================\n\ndef dynamic_chain_example():\n    \&quot;\&quot;\&quot;动态链构建示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;9. 动态链构建\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    def build_dynamic_chain(processing_steps: List[str]):\n        \&quot;\&quot;\&quot;根据配置动态构建处理链\&quot;\&quot;\&quot;\n        \n        # 定义可用的处理步骤\n        available_steps = {\n            \&quot;sentiment\&quot;: PromptTemplate.from_template(\&quot;分析情感：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;summary\&quot;: PromptTemplate.from_template(\&quot;总结：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;translate\&quot;: PromptTemplate.from_template(\&quot;翻译成英文：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;keywords\&quot;: PromptTemplate.from_template(\&quot;提取关键词：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;length\&quot;: RunnableLambda(lambda x: f\&quot;长度：{len(x['text'])}字符\&quot;)\n        }\n\n        # 构建并行处理\n        parallel_steps = {}\n        for step in processing_steps:\n            if step in available_steps:\n                parallel_steps[step] = available_steps[step]\n\n        if not parallel_steps:\n            return RunnableLambda(lambda x: {\&quot;error\&quot;: \&quot;没有有效的处理步骤\&quot;})\n\n        # 添加原文\n        parallel_steps[\&quot;original\&quot;] = RunnablePassthrough()\n\n        return RunnableParallel(parallel_steps)\n\n    # 测试不同的配置\n    configurations = [\n        [\&quot;sentiment\&quot;, \&quot;summary\&quot;],\n        [\&quot;translate\&quot;, \&quot;keywords\&quot;, \&quot;length\&quot;],\n        [\&quot;sentiment\&quot;, \&quot;summary\&quot;, \&quot;translate\&quot;, \&quot;keywords\&quot;],\n        [\&quot;invalid_step\&quot;]  # 测试错误情况\n    ]\n\n    test_text = {\&quot;text\&quot;: \&quot;今天天气很好，我和朋友们去公园散步，感觉很放松。\&quot;}\n\n    for i, config in enumerate(configurations, 1):\n        print(f\&quot;\\n配置{i}：{config}\&quot;)\n        chain = build_dynamic_chain(config)\n        result = chain.invoke(test_text)\n        \n        for key, value in result.items():\n            if key != \&quot;original\&quot;:\n                print(f\&quot;  {key}: {value}\&quot;)\n\n# ============================================================================\n# 10. 复杂数据流处理\n# ============================================================================\n\ndef complex_data_flow_example():\n    \&quot;\&quot;\&quot;复杂数据流处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;10. 复杂数据流处理\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟复杂的业务数据\n    business_data = {\n        \&quot;company\&quot;: \&quot;TechCorp\&quot;,\n        \&quot;quarter\&quot;: \&quot;Q3 2024\&quot;,\n        \&quot;revenue\&quot;: 1500000,\n        \&quot;expenses\&quot;: 1200000,\n        \&quot;employees\&quot;: 150,\n        \&quot;products\&quot;: [\n            {\&quot;name\&quot;: \&quot;AI助手\&quot;, \&quot;sales\&quot;: 800000, \&quot;growth\&quot;: 0.25},\n            {\&quot;name\&quot;: \&quot;数据分析平台\&quot;, \&quot;sales\&quot;: 500000, \&quot;growth\&quot;: 0.15},\n            {\&quot;name\&quot;: \&quot;云服务\&quot;, \&quot;sales\&quot;: 200000, \&quot;growth\&quot;: 0.35}\n        ],\n        \&quot;regions\&quot;: {\n            \&quot;北美\&quot;: {\&quot;revenue\&quot;: 600000, \&quot;growth\&quot;: 0.20},\n            \&quot;欧洲\&quot;: {\&quot;revenue\&quot;: 500000, \&quot;growth\&quot;: 0.18},\n            \&quot;亚洲\&quot;: {\&quot;revenue\&quot;: 400000, \&quot;growth\&quot;: 0.30}\n        }\n    }\n\n    # 数据预处理\n    def calculate_metrics(data):\n        profit = data[\&quot;revenue\&quot;] - data[\&quot;expenses\&quot;]\n        profit_margin = profit / data[\&quot;revenue\&quot;] * 100\n        revenue_per_employee = data[\&quot;revenue\&quot;] / data[\&quot;employees\&quot;]\n        \n        # 产品分析\n        best_product = max(data[\&quot;products\&quot;], key=lambda x: x[\&quot;sales\&quot;])\n        fastest_growing = max(data[\&quot;products\&quot;], key=lambda x: x[\&quot;growth\&quot;])\n        \n        # 地区分析\n        best_region = max(data[\&quot;regions\&quot;].items(), key=lambda x: x[1][\&quot;revenue\&quot;])\n        \n        return {\n            \&quot;financial_metrics\&quot;: {\n                \&quot;profit\&quot;: profit,\n                \&quot;profit_margin\&quot;: round(profit_margin, 2),\n                \&quot;revenue_per_employee\&quot;: round(revenue_per_employee, 2)\n            },\n            \&quot;product_insights\&quot;: {\n                \&quot;best_selling\&quot;: best_product[\&quot;name\&quot;],\n                \&quot;fastest_growing\&quot;: fastest_growing[\&quot;name\&quot;]\n            },\n            \&quot;regional_insights\&quot;: {\n                \&quot;top_region\&quot;: best_region[0],\n                \&quot;top_region_revenue\&quot;: best_region[1][\&quot;revenue\&quot;]\n            },\n            \&quot;original_data\&quot;: data\n        }\n\n    # 创建分析报告\n    def generate_analysis_prompt(metrics):\n        return f\&quot;\&quot;\&quot;\n请分析以下业务数据并生成专业报告：\n\n公司：{metrics['original_data']['company']}\n季度：{metrics['original_data']['quarter']}\n\n财务指标：\n- 收入：${metrics['original_data']['revenue']:,}\n- 支出：${metrics['original_data']['expenses']:,}\n- 利润：${metrics['financial_metrics']['profit']:,}\n- 利润率：{metrics['financial_metrics']['profit_margin']}%\n- 人均收入：${metrics['financial_metrics']['revenue_per_employee']:,}\n\n产品表现：\n- 最佳销售产品：{metrics['product_insights']['best_selling']}\n- 增长最快产品：{metrics['product_insights']['fastest_growing']}\n\n地区表现：\n- 最佳地区：{metrics['regional_insights']['top_region']}\n- 该地区收入：${metrics['regional_insights']['top_region_revenue']:,}\n\n请提供：\n1. 整体业务健康度评估\n2. 关键优势和风险点\n3. 改进建议\n\&quot;\&quot;\&quot;\n\n    # 构建复杂处理链\n    analysis_chain = (\n        RunnableLambda(calculate_metrics)\n        | RunnablePassthrough.assign(\n            analysis_prompt=RunnableLambda(generate_analysis_prompt)\n        )\n        | RunnablePassthrough.assign(\n            business_analysis=lambda x: (\n                PromptTemplate.from_template(\&quot;{analysis_prompt}\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnablePassthrough.assign(\n            executive_summary=lambda x: (\n                PromptTemplate.from_template(\&quot;\&quot;\&quot;\n基于以下分析，写一份执行摘要（不超过100字）：\n{business_analysis}\n\&quot;\&quot;\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnableLambda(lambda x: {\n            \&quot;company\&quot;: x[\&quot;original_data\&quot;][\&quot;company\&quot;],\n            \&quot;quarter\&quot;: x[\&quot;original_data\&quot;][\&quot;quarter\&quot;],\n            \&quot;key_metrics\&quot;: x[\&quot;financial_metrics\&quot;],\n            \&quot;insights\&quot;: {\n                \&quot;products\&quot;: x[\&quot;product_insights\&quot;],\n                \&quot;regions\&quot;: x[\&quot;regional_insights\&quot;]\n            },\n            \&quot;detailed_analysis\&quot;: x[\&quot;business_analysis\&quot;],\n            \&quot;executive_summary\&quot;: x[\&quot;executive_summary\&quot;],\n            \&quot;generated_at\&quot;: datetime.now().isoformat()\n        })\n    )\n\n    # 执行分析\n    result = analysis_chain.invoke(business_data)\n    \n    print(f\&quot;公司：{result['company']}\&quot;)\n    print(f\&quot;季度：{result['quarter']}\&quot;)\n    print(f\&quot;生成时间：{result['generated_at']}\&quot;)\n    print(\&quot;\\n关键指标：\&quot;)\n    for key, value in result['key_metrics'].items():\n        print(f\&quot;  {key}: {value}\&quot;)\n    \n    print(\&quot;\\n业务洞察：\&quot;)\n    print(f\&quot;  最佳产品：{result['insights']['products']['best_selling']}\&quot;)\n    print(f\&quot;  增长最快：{result['insights']['products']['fastest_growing']}\&quot;)\n    print(f\&quot;  最佳地区：{result['insights']['regions']['top_region']}\&quot;)\n    \n    print(f\&quot;\\n执行摘要：\\n{result['executive_summary']}\&quot;)\n    print(f\&quot;\\n详细分析：\\n{result['detailed_analysis']}\&quot;)\n\n# ============================================================================\n# 主函数\n# ============================================================================\n\nasync def main():\n    \&quot;\&quot;\&quot;运行所有示例\&quot;\&quot;\&quot;\n    print(\&quot;LangChain 0.3 LCEL 高级示例集合\&quot;)\n    print(\&quot;基于 LangChain 0.3.26 版本\&quot;)\n    print(\&quot;确保 Ollama 服务正在运行：http://localhost:11434\&quot;)\n\n    try:\n        # 运行所有同步示例\n        basic_operators_example()\n        advanced_passthrough_example()\n        complex_parallel_example()\n        complex_branch_example()\n        custom_runnable_example()\n        advanced_streaming_example()\n        error_handling_example()\n        dynamic_chain_example()\n        complex_data_flow_example()\n\n        # 运行异步示例\n        print(\&quot;\\n开始运行异步示例...\&quot;)\n        await batch_processing_example()\n\n        print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n        print(\&quot;所有高级示例运行完成！\&quot;)\n        print(\&quot;=\&quot; * 60)\n\n    except Exception as e:\n        print(f\&quot;运行出错：{e}\&quot;)\n        print(\&quot;请确保：\&quot;)\n        print(\&quot;1. Ollama 服务正在运行\&quot;)\n        print(\&quot;2. qwen2.5:3b 模型已下载\&quot;)\n        print(\&quot;3. 网络连接正常\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    asyncio.run(main())\n```\n&lt;/augment_code_snippet&gt;\n\n## 更多专业应用示例\n\n&lt;augment_code_snippet path=\&quot;langchain/Chains/LCEL_Professional_Examples.py\&quot; mode=\&quot;EDIT\&quot;&gt;\n```python\n\&quot;\&quot;\&quot;\nLCEL 专业应用场景示例\n\&quot;\&quot;\&quot;\n\n# ============================================================================\n# 11. RAG（检索增强生成）系统\n# ============================================================================\n\ndef rag_system_example():\n    \&quot;\&quot;\&quot;RAG 系统示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;11. RAG 检索增强生成系统\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟文档数据库\n    documents = {\n        \&quot;doc1\&quot;: \&quot;人工智能是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\&quot;,\n        \&quot;doc2\&quot;: \&quot;机器学习是人工智能的一个子集，它使计算机能够在没有明确编程的情况下学习和改进。\&quot;,\n        \&quot;doc3\&quot;: \&quot;深度学习是机器学习的一个分支，使用神经网络来模拟人脑的工作方式。\&quot;,\n        \&quot;doc4\&quot;: \&quot;自然语言处理是人工智能的一个领域，专注于计算机与人类语言之间的交互。\&quot;,\n        \&quot;doc5\&quot;: \&quot;计算机视觉是人工智能的一个分支，致力于让计算机能够理解和解释视觉信息。\&quot;\n    }\n\n    # 简单的检索函数\n    def retrieve_documents(query: str, top_k: int = 3):\n        \&quot;\&quot;\&quot;基于关键词匹配检索文档\&quot;\&quot;\&quot;\n        scores = {}\n        query_words = query.lower().split()\n        \n        for doc_id, content in documents.items():\n            score = sum(1 for word in query_words if word in content.lower())\n            if score &gt; 0:\n                scores[doc_id] = score\n        \n        # 返回得分最高的文档\n        sorted_docs = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n        return [documents[doc_id] for doc_id, _ in sorted_docs[:top_k]]\n\n    # 构建 RAG 链\n    retrieval_chain = RunnableLambda(lambda x: {\n        \&quot;query\&quot;: x[\&quot;query\&quot;],\n        \&quot;retrieved_docs\&quot;: retrieve_documents(x[\&quot;query\&quot;])\n    })\n\n    context_chain = RunnableLambda(lambda x: {\n        \&quot;query\&quot;: x[\&quot;query\&quot;],\n        \&quot;context\&quot;: \&quot;\\n\\n\&quot;.join([f\&quot;文档{i+1}: {doc}\&quot; for i, doc in enumerate(x[\&quot;retrieved_docs\&quot;])])\n    })\n\n    rag_prompt = PromptTemplate.from_template(\&quot;\&quot;\&quot;\n基于以下文档回答问题：\n\n{context}\n\n问题：{query}\n\n请基于提供的文档内容回答，如果文档中没有相关信息，请说明。\n\&quot;\&quot;\&quot;)\n\n    rag_chain = (\n        retrieval_chain\n        | context_chain\n        | rag_prompt\n        | llm\n        | StrOutputParser()\n    )\n\n    # 测试 RAG 系统\n    questions = [\n        {\&quot;query\&quot;: \&quot;什么是机器学习？\&quot;},\n        {\&quot;query\&quot;: \&quot;深度学习和机器学习有什么关系？\&quot;},\n        {\&quot;query\&quot;: \&quot;人工智能有哪些应用领域？\&quot;}\n    ]\n\n    for i, question in enumerate(questions, 1):\n        print(f\&quot;\\n问题{i}：{question['query']}\&quot;)\n        answer = rag_chain.invoke(question)\n        print(f\&quot;回答{i}：{answer}\&quot;)\n\n# ============================================================================\n# 12. 多模态处理链\n# ============================================================================\n\ndef multimodal_processing_example():\n    \&quot;\&quot;\&quot;多模态处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;12. 多模态处理链\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟不同类型的输入处理\n    def process_text_input(x):\n        return {\n            \&quot;type\&quot;: \&quot;text\&quot;,\n            \&quot;content\&quot;: x[\&quot;content\&quot;],\n            \&quot;word_count\&quot;: len(x[\&quot;content\&quot;].split()),\n            \&quot;language\&quot;: \&quot;中文\&quot; if any('\\u4e00' &lt;= char &lt;= '\\u9fff' for char in x[\&quot;content\&quot;]) else \&quot;英文\&quot;\n        }\n\n    def process_image_input(x):\n        # 模拟图像处理\n        return {\n            \&quot;type\&quot;: \&quot;image\&quot;,\n            \&quot;filename\&quot;: x[\&quot;content\&quot;],\n            \&quot;format\&quot;: x[\&quot;content\&quot;].split(\&quot;.\&quot;)[-1] if \&quot;.\&quot; in x[\&quot;content\&quot;] else \&quot;unknown\&quot;,\n            \&quot;description\&quot;: f\&quot;这是一个{x['content']}文件\&quot;\n        }\n\n    def process_audio_input(x):\n        # 模拟音频处理\n        return {\n            \&quot;type\&quot;: \&quot;audio\&quot;,\n            \&quot;filename\&quot;: x[\&quot;content\&quot;],\n            \&quot;duration\&quot;: \&quot;未知\&quot;,\n            \&quot;description\&quot;: f\&quot;这是一个音频文件：{x['content']}\&quot;\n        }\n\n    # 输入类型检测\n    def detect_input_type(x):\n        content = x[\&quot;content\&quot;].lower()\n        if content.endswith(('.jpg', '.png', '.gif', '.bmp')):\n            return \&quot;image\&quot;\n        elif content.endswith(('.mp3', '.wav', '.flac')):\n            return \&quot;audio\&quot;\n        else:\n            return \&quot;text\&quot;\n\n    # 创建多模态处理分支\n    multimodal_branch = RunnableBranch(\n        (lambda x: detect_input_type(x) == \&quot;image\&quot;, RunnableLambda(process_image_input)),\n        (lambda x: detect_input_type(x) == \&quot;audio\&quot;, RunnableLambda(process_audio_input)),\n        RunnableLambda(process_text_input)  # 默认文本处理\n    )\n\n    # 生成统一的分析报告\n    analysis_prompt = PromptTemplate.from_template(\&quot;\&quot;\&quot;\n请分析以下输入内容：\n\n类型：{type}\n内容：{content}\n详细信息：{details}\n\n请提供适合该类型内容的分析和建议。\n\&quot;\&quot;\&quot;)\n\n    def prepare_analysis_input(processed_data):\n        details = {k: v for k, v in processed_data.items() if k not in [\&quot;type\&quot;, \&quot;content\&quot;]}\n        return {\n            \&quot;type\&quot;: processed_data[\&quot;type\&quot;],\n            \&quot;content\&quot;: processed_data.get(\&quot;content\&quot;, processed_data.get(\&quot;filename\&quot;, \&quot;未知\&quot;)),\n            \&quot;details\&quot;: str(details)\n        }\n\n    multimodal_chain = (\n        multimodal_branch\n        | RunnableLambda(prepare_analysis_input)\n        | analysis_prompt\n        | llm\n        | StrOutputParser()\n    )\n\n    # 测试不同类型的输入\n    test_inputs = [\n        {\&quot;content\&quot;: \&quot;这是一段中文文本，用于测试多模态处理系统。\&quot;},\n        {\&quot;content\&quot;: \&quot;photo.jpg\&quot;},\n        {\&quot;content\&quot;: \&quot;music.mp3\&quot;},\n        {\&quot;content\&quot;: \&quot;This is an English text for testing.\&quot;}\n    ]\n\n    for i, input_data in enumerate(test_inputs, 1):\n        print(f\&quot;\\n输入{i}：{input_data['content']}\&quot;)\n        result = multimodal_chain.invoke(input_data)\n        print(f\&quot;分析{i}：{result}\&quot;)\n\n# ============================================================================\n# 13. 工作流编排系统\n# ============================================================================\n\ndef workflow_orchestration_example():\n    \&quot;\&quot;\&quot;工作流编排示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;13. 工作流编排系统\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 定义工作流步骤\n    class WorkflowStep:\n        def __init__(self, name: str, processor: Runnable):\n            self.name = name\n            self.processor = processor\n\n    # 数据验证步骤\n    def validate_data(x):\n        data = x.get(\&quot;data\&quot;, {})\n        errors = []\n        \n        if not data.get(\&quot;title\&quot;):\n            errors.append(\&quot;标题不能为空\&quot;)\n        if not data.get(\&quot;content\&quot;):\n            errors.append(\&quot;内容不能为空\&quot;)\n        if len(data.get(\&quot;content\&quot;, \&quot;\&quot;)) &lt; 10:\n            errors.append(\&quot;内容长度不能少于10字符\&quot;)\n        \n        return {\n            \&quot;data\&quot;: data,\n            \&quot;validation_errors\&quot;: errors,\n            \&quot;is_valid\&quot;: len(errors) == 0,\n            \&quot;step\&quot;: \&quot;validation\&quot;\n        }\n\n    # 内容处理步骤\n    def process_content(x):\n        if not x[\&quot;is_valid\&quot;]:\n            return {**x, \&quot;step\&quot;: \&quot;content_processing\&quot;, \&quot;processed_content\&quot;: None}\n        \n        content = x[\&quot;data\&quot;][\&quot;content\&quot;]\n        processed = {\n            \&quot;original_length\&quot;: len(content),\n            \&quot;word_count\&quot;: len(content.split()),\n            \&quot;has_keywords\&quot;: any(keyword in content.lower() for keyword in [\&quot;重要\&quot;, \&quot;紧急\&quot;, \&quot;优先\&quot;]),\n            \&quot;processed_at\&quot;: datetime.now().isoformat()\n        }\n        \n        return {\n            **x,\n            \&quot;step\&quot;: \&quot;content_processing\&quot;,\n            \&quot;processed_content\&quot;: processed\n        }\n\n    # AI 分析步骤\n    def ai_analysis(x):\n        if not x[\&quot;is_valid\&quot;] or not x[\&quot;processed_content\&quot;]:\n            return {**x, \&quot;step\&quot;: \&quot;ai_analysis\&quot;, \&quot;ai_result\&quot;: None}\n        \n        analysis_prompt = f\&quot;\&quot;\&quot;\n分析以下内容：\n标题：{x['data']['title']}\n内容：{x['data']['content']}\n\n请提供：\n1. 内容摘要\n2. 情感分析\n3. 重要程度评级（1-5）\n\&quot;\&quot;\&quot;\n        \n        ai_result = (\n            PromptTemplate.from_template(analysis_prompt)\n            | llm\n            | StrOutputParser()\n        ).invoke({})\n        \n        return {\n            **x,\n            \&quot;step\&quot;: \&quot;ai_analysis\&quot;,\n            \&quot;ai_result\&quot;: ai_result\n        }\n\n    # 结果汇总步骤\n    def summarize_results(x):\n        summary = {\n            \&quot;workflow_id\&quot;: str(uuid.uuid4())[:8],\n            \&quot;completed_at\&quot;: datetime.now().isoformat(),\n            \&quot;status\&quot;: \&quot;success\&quot; if x[\&quot;is_valid\&quot;] else \&quot;failed\&quot;,\n            \&quot;validation_errors\&quot;: x.get(\&quot;validation_errors\&quot;, []),\n            \&quot;content_stats\&quot;: x.get(\&quot;processed_content\&quot;),\n            \&quot;ai_analysis\&quot;: x.get(\&quot;ai_result\&quot;),\n            \&quot;original_data\&quot;: x[\&quot;data\&quot;]\n        }\n        \n        return {**x, \&quot;step\&quot;: \&quot;summary\&quot;, \&quot;final_result\&quot;: summary}\n\n    # 构建工作流链\n    workflow_chain = (\n        RunnableLambda(validate_data)\n        | RunnableLambda(process_content)\n        | RunnableLambda(ai_analysis)\n        | RunnableLambda(summarize_results)\n    )\n\n    # 测试工作流\n    test_cases = [\n        {\n            \&quot;data\&quot;: {\n                \&quot;title\&quot;: \&quot;重要会议通知\&quot;,\n                \&quot;content\&quot;: \&quot;明天上午10点在会议室A召开重要的项目讨论会议，请所有相关人员准时参加。\&quot;\n            }\n        },\n        {\n            \&quot;data\&quot;: {\n                \&quot;title\&quot;: \&quot;\&quot;,  # 无效数据\n                \&quot;content\&quot;: \&quot;短内容\&quot;\n            }\n        },\n        {\n            \&quot;data\&quot;: {\n                \&quot;title\&quot;: \&quot;日常工作报告\&quot;,\n                \&quot;content\&quot;: \&quot;今天完成了数据分析任务，发现了一些有趣的趋势。团队协作良好，项目进展顺利。明天计划继续优化算法性能。\&quot;\n            }\n        }\n    ]\n\n    for i, test_case in enumerate(test_cases, 1):\n        print(f\&quot;\\n工作流{i}：\&quot;)\n        print(f\&quot;输入：{test_case['data']}\&quot;)\n        \n        result = workflow_chain.invoke(test_case)\n        final_result = result[\&quot;final_result\&quot;]\n        \n        print(f\&quot;工作流ID：{final_result['workflow_id']}\&quot;)\n        print(f\&quot;状态：{final_result['status']}\&quot;)\n        \n        if final_result[\&quot;validation_errors\&quot;]:\n            print(f\&quot;验证错误：{final_result['validation_errors']}\&quot;)\n        \n        if final_result[\&quot;content_stats\&quot;]:\n            print(f\&quot;内容统计：{final_result['content_stats']}\&quot;)\n        \n        if final_result[\&quot;ai_analysis\&quot;]:\n            print(f\&quot;AI分析：{final_result['ai_analysis']}\&quot;)\n\n# ============================================================================\n# 14. 实时数据处理管道\n# ============================================================================\n\ndef realtime_pipeline_example():\n    \&quot;\&quot;\&quot;实时数据处理管道示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;14. 实时数据处理管道\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟实时数据源\n    def generate_realtime_data():\n        import random\n        data_types = [\&quot;user_action\&quot;, \&quot;system_event\&quot;, \&quot;error_log\&quot;, \&quot;performance_metric\&quot;]\n        \n        return {\n            \&quot;timestamp\&quot;: datetime.now().isoformat(),\n            \&quot;type\&quot;: random.choice(data_types),\n            \&quot;user_id\&quot;: f\&quot;user_{random.randint(1000, 9999)}\&quot;,\n            \&quot;value\&quot;: random.randint(1, 100),\n            \&quot;message\&quot;: f\&quot;随机事件消息 {random.randint(1, 1000)}\&quot;\n        }\n\n    # 数据过滤器\n    def filter_data(x):\n        # 过滤掉低价值数据\n        if x[\&quot;value\&quot;] &lt; 20:\n            return None\n        return x\n\n    # 数据增强\n    def enrich_data(x):\n        if x is None:\n            return None\n        \n        # 添加计算字段\n        x[\&quot;priority\&quot;] = \&quot;high\&quot; if x[\&quot;value\&quot;] &gt; 80 else \&quot;medium\&quot; if x[\&quot;value\&quot;] &gt; 50 else \&quot;low\&quot;\n        x[\&quot;category\&quot;] = x[\&quot;type\&quot;].replace(\&quot;_\&quot;, \&quot; \&quot;).title()\n        x[\&quot;processed_at\&quot;] = datetime.now().isoformat()\n        \n        return x\n\n    # 异常检测\n    def detect_anomalies(x):\n        if x is None:\n            return None\n        \n        # 简单的异常检测逻辑\n        is_anomaly = (\n            x[\&quot;type\&quot;] == \&quot;error_log\&quot; or \n            x[\&quot;value\&quot;] &gt; 95 or \n            \&quot;error\&quot; in x[\&quot;message\&quot;].lower()\n        )\n        \n        x[\&quot;is_anomaly\&quot;] = is_anomaly\n        x[\&quot;alert_level\&quot;] = \&quot;critical\&quot; if is_anomaly else \&quot;normal\&quot;\n        \n        return x\n\n    # AI 分析（仅对异常数据）\n    def ai_analyze_if_needed(x):\n        if x is None or not x.get(\&quot;is_anomaly\&quot;):\n            return x\n        \n        analysis_prompt = f\&quot;\&quot;\&quot;\n分析以下异常事件：\n类型：{x['type']}\n用户：{x['user_id']}\n数值：{x['value']}\n消息：{x['message']}\n优先级：{x['priority']}\n\n请提供：\n1. 可能的原因\n2. 建议的处理方案\n3. 风险评估\n\&quot;\&quot;\&quot;\n        \n        try:\n            ai_analysis = (\n                PromptTemplate.from_template(analysis_prompt)\n                | llm\n                | StrOutputParser()\n            ).invoke({})\n            x[\&quot;ai_analysis\&quot;] = ai_analysis\n        except Exception as e:\n            x[\&quot;ai_analysis\&quot;] = f\&quot;AI分析失败：{e}\&quot;\n        \n        return x\n\n    # 构建实时处理管道\n    pipeline = (\n        RunnableLambda(filter_data)\n        | RunnableLambda(enrich_data)\n        | RunnableLambda(detect_anomalies)\n        | RunnableLambda(ai_analyze_if_needed)\n    )\n\n    # 模拟实时数据流处理\n    print(\&quot;开始实时数据处理...\&quot;)\n    processed_count = 0\n    anomaly_count = 0\n    \n    for i in range(10):  # 处理10条数据\n        raw_data = generate_realtime_data()\n        print(f\&quot;\\n原始数据{i+1}：{raw_data}\&quot;)\n        \n        result = pipeline.invoke(raw_data)\n        \n        if result is not None:\n            processed_count += 1\n            print(f\&quot;处理结果：优先级={result['priority']}, 异常={result['is_anomaly']}\&quot;)\n            \n            if result.get(\&quot;is_anomaly\&quot;):\n                anomaly_count += 1\n                print(f\&quot;异常分析：{result.get('ai_analysis', '无')}\&quot;)\n        else:\n            print(\&quot;数据被过滤\&quot;)\n    \n    print(f\&quot;\\n处理统计：\&quot;)\n    print(f\&quot;总处理数据：{processed_count}\&quot;)\n    print(f\&quot;检测到异常：{anomaly_count}\&quot;)\n\n# 运行专业示例\ndef run_professional_examples():\n    \&quot;\&quot;\&quot;运行专业应用示例\&quot;\&quot;\&quot;\n    print(\&quot;LCEL 专业应用场景示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    try:\n        rag_system_example()\n        multimodal_processing_example()\n        workflow_orchestration_example()\n        realtime_pipeline_example()\n        \n        print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n        print(\&quot;所有专业示例运行完成！\&quot;)\n        print(\&quot;=\&quot; * 60)\n        \n    except Exception as e:\n        print(f\&quot;运行出错：{e}\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    run_professional_examples()\n```\n&lt;/augment_code_snippet&gt;\n\n## LCEL 最佳实践总结\n\n### 1. **选择合适的组合方式**\n- 简单链：使用 `|` 操作符\n- 并行处理：使用 `RunnableParallel`\n- 条件分支：使用 `RunnableBranch`\n- 数据传递：使用 `RunnablePassthrough`\n\n### 2. **性能优化**\n- 利用批量处理：`batch()` 和 `abatch()`\n- 使用流式处理：`stream()` 和 `astream()`\n- 合理使用并行：避免不必要的串行处理\n\n### 3. **错误处理**\n- 实现重试机制\n- 提供备用处理链\n- 优雅的错误降级\n\n### 4. **可维护性**\n- 模块化设计：将复杂逻辑拆分为小的 Runnable\n- 清晰的数据流：使用 `RunnablePassthrough.assign` 管理状态\n- 充分的日志和监控\n\n### 5. **扩展性**\n- 动态链构建：根据配置构建不同的处理链\n- 插件化架构：易于添加新的处理步骤\n- 标准化接口：所有组件都实现 `Runnable` 接口\n\nLCEL 为构建复杂的 AI 应用提供了强大而灵活的框架，通过合理使用这些模式，可以构建出高性能、可维护的应用系统。\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;langchain/Chains/LCELChain.ipynb:0-554\nlangchain/Chains/LCELChain.ipynb:554-980\nlangchain/Chains/LCELChain.ipynb:980-1398\nlangchain/Chains/LCELChain.ipynb:1398-2132\nlangchain/Chains/LCELChain.ipynb:2132-2989\nlangchain/Chains/LCELChain.ipynb:2989-3582\nlangchain/Chains/LCELChain.ipynb:3582-3869\nlangchain/Chains/LCELChain.ipynb:3869-4641\nlangchain/Chains/LCELChain.ipynb:4641-5408\nlangchain/Chains/LCELChain.ipynb:5408-6154\nlangchain/Chains/LCELChain.ipynb:6154-6575\nlangchain/Chains/LCELChain.ipynb:6575-7268\nlangchain/Chains/LCELChain.ipynb:7268-8002\nlangchain/Chains/LCELChain.ipynb:8002-8531\nlangchain/Chains/LCELChain.ipynb:8531-9293\nlangchain/Chains/LCELChain.ipynb:9293-10071\nlangchain/Chains/LCELChain.ipynb:10071-10485\nlangchain/Chains/LCELChain.ipynb:10485-11341\nlangchain/Chains/LCELChain.ipynb:11341-12015\nlangchain/Chains/LCELChain.ipynb:12015-12970\nlangchain/Chains/LCELChain.ipynb:12970-13321\nmemoryChat/LCEL_memory_chat.ipynb:491-1190\nmemoryChat/LCEL_memory_chat.ipynb:1991-2403\nmemoryChat/LCEL_memory_chat.ipynb:3326-3706\nmemoryChat/LCEL_memory_chat.ipynb:12093-13158\nmemoryChat/LCEL_memory_chat.ipynb:14802-15912\nmemoryChat/LCEL_memory_chat.ipynb:17852-18569\nmemoryChat/LCEL_memory_chat.ipynb:20336-21180\nmemoryChat/LCEL_memory_chat.ipynb:23946-24934\nmemoryChat/LCEL_memory_chat.ipynb:26068-26999\nmemoryChat/LCEL_memory_chat.ipynb:27271-27999\nlangchain/Chains/TraditionalChain.ipynb:0-641\nlangchain/Chains/TraditionalChain.ipynb:1016-1466\nlangchain/modelIo/StructOutput.ipynb:12924-13476\nlangchain/memory/chains_momery_chat.ipynb:32494-33235\nmemoryChat/LangGraph_memory_chat.ipynb:0-741&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;@`LangChain 0.3`详细讲解LCEL（LangChain Expression Language），给出完整的可运行的代码示例，并尽可能多的给出例子&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T16:04:16.381Z&quot;,&quot;response_text&quot;:&quot;基于您的 `langchain/Chains/LCELChain.ipynb` 文件，我来详细讲解 LCEL（LangChain Expression Language）并提供更多完整的代码示例。\n\n## LCEL 核心概念\n\nLCEL 是 LangChain 0.3 中的声明式编程框架，基于 `Runnable` 接口构建。它提供了强大的组合能力和优化的执行性能。\n\n### 核心优势\n- **声明式编程**：描述想要什么，而不是如何实现\n- **自动优化**：并行执行、流式处理、批量处理\n- **统一接口**：所有组件都实现 `Runnable` 接口\n- **易于调试**：自动 LangSmith 追踪\n\n## 完整代码示例集合\n\n````python path=langchain/Chains/LCEL_Advanced_Examples.py mode=EDIT\n\&quot;\&quot;\&quot;\nLangChain 0.3 LCEL 高级示例集合\n基于 LangChain 0.3.26 版本\n\&quot;\&quot;\&quot;\n\nimport asyncio\nimport json\nimport time\nfrom typing import Dict, List, Any, Optional, Union\nfrom datetime import datetime\nfrom collections import deque\n\n# LangChain 核心组件\nfrom langchain_core.messages import HumanMessage, AIMessage, SystemMessage\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, MessagesPlaceholder\nfrom langchain_core.output_parsers import StrOutputParser, JsonOutputParser, PydanticOutputParser\nfrom langchain_core.runnables import (\n    RunnablePassthrough,\n    RunnableLambda,\n    RunnableParallel,\n    RunnableBranch,\n    RunnableMap,\n    RunnableSequence,\n    RunnableConfig,\n    Runnable\n)\nfrom langchain_core.runnables.history import RunnableWithMessageHistory\nfrom langchain_core.chat_history import InMemoryChatMessageHistory\nfrom langchain_ollama import OllamaLLM, ChatOllama\nfrom pydantic import BaseModel, Field\n\n# 配置\nOLLAMA_BASE_URL = \&quot;http://localhost:11434\&quot;\nOLLAMA_MODEL = \&quot;qwen2.5:3b\&quot;\n\ndef create_llm():\n    \&quot;\&quot;\&quot;创建LLM实例\&quot;\&quot;\&quot;\n    return OllamaLLM(\n        base_url=OLLAMA_BASE_URL,\n        model=OLLAMA_MODEL,\n        temperature=0.7\n    )\n\ndef create_chat_llm():\n    \&quot;\&quot;\&quot;创建Chat LLM实例\&quot;\&quot;\&quot;\n    return ChatOllama(\n        base_url=OLLAMA_BASE_URL,\n        model=OLLAMA_MODEL,\n        temperature=0.7\n    )\n\n# ============================================================================\n# 1. 基础 LCEL 操作符示例\n# ============================================================================\n\ndef basic_operators_example():\n    \&quot;\&quot;\&quot;基础 LCEL 操作符示例\&quot;\&quot;\&quot;\n    print(\&quot;=\&quot; * 60)\n    print(\&quot;1. 基础 LCEL 操作符\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 管道操作符 |\n    prompt = PromptTemplate.from_template(\&quot;翻译成英文：{text}\&quot;)\n    chain1 = prompt | llm | StrOutputParser()\n    \n    # 等价于 RunnableSequence\n    chain2 = RunnableSequence(first=prompt, middle=[llm], last=StrOutputParser())\n    \n    result1 = chain1.invoke({\&quot;text\&quot;: \&quot;你好世界\&quot;})\n    result2 = chain2.invoke({\&quot;text\&quot;: \&quot;你好世界\&quot;})\n    \n    print(f\&quot;管道操作符结果：{result1}\&quot;)\n    print(f\&quot;RunnableSequence结果：{result2}\&quot;)\n\n# ============================================================================\n# 2. RunnablePassthrough 高级用法\n# ============================================================================\n\ndef advanced_passthrough_example():\n    \&quot;\&quot;\&quot;RunnablePassthrough 高级用法\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;2. RunnablePassthrough 高级用法\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 使用 assign 添加新字段\n    def calculate_stats(x):\n        text = x[\&quot;text\&quot;]\n        return {\n            \&quot;word_count\&quot;: len(text.split()),\n            \&quot;char_count\&quot;: len(text),\n            \&quot;has_question\&quot;: \&quot;?\&quot; in text or \&quot;？\&quot; in text\n        }\n\n    # 复杂的数据流处理\n    chain = (\n        RunnablePassthrough.assign(stats=RunnableLambda(calculate_stats))\n        | RunnablePassthrough.assign(\n            analysis_prompt=lambda x: f\&quot;\&quot;\&quot;\n分析以下文本（{x['stats']['word_count']}词，{x['stats']['char_count']}字符）：\n文本：{x['text']}\n是否包含问题：{x['stats']['has_question']}\n\n请提供详细分析：\n\&quot;\&quot;\&quot;\n        )\n        | RunnablePassthrough.assign(\n            analysis=lambda x: (PromptTemplate.from_template(\&quot;{analysis_prompt}\&quot;) | llm | StrOutputParser()).invoke(x)\n        )\n        | RunnableLambda(lambda x: {\n            \&quot;original\&quot;: x[\&quot;text\&quot;],\n            \&quot;stats\&quot;: x[\&quot;stats\&quot;],\n            \&quot;analysis\&quot;: x[\&quot;analysis\&quot;]\n        })\n    )\n\n    result = chain.invoke({\&quot;text\&quot;: \&quot;人工智能的发展前景如何？它会改变我们的生活吗？\&quot;})\n    \n    print(f\&quot;原文：{result['original']}\&quot;)\n    print(f\&quot;统计：{result['stats']}\&quot;)\n    print(f\&quot;分析：{result['analysis']}\&quot;)\n\n# ============================================================================\n# 3. RunnableParallel 复杂并行处理\n# ============================================================================\n\ndef complex_parallel_example():\n    \&quot;\&quot;\&quot;复杂并行处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;3. 复杂并行处理\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 定义多个分析任务\n    sentiment_chain = (\n        PromptTemplate.from_template(\&quot;分析情感（积极/消极/中性）：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n    \n    topic_chain = (\n        PromptTemplate.from_template(\&quot;提取3个主要关键词：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n    \n    summary_chain = (\n        PromptTemplate.from_template(\&quot;一句话总结：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n    \n    length_analysis = RunnableLambda(lambda x: {\n        \&quot;word_count\&quot;: len(x[\&quot;text\&quot;].split()),\n        \&quot;char_count\&quot;: len(x[\&quot;text\&quot;]),\n        \&quot;sentence_count\&quot;: len([s for s in x[\&quot;text\&quot;].split(\&quot;。\&quot;) if s.strip()])\n    })\n\n    # 创建复杂并行链\n    parallel_chain = RunnableParallel({\n        \&quot;sentiment\&quot;: sentiment_chain,\n        \&quot;topics\&quot;: topic_chain,\n        \&quot;summary\&quot;: summary_chain,\n        \&quot;length_stats\&quot;: length_analysis,\n        \&quot;original\&quot;: RunnablePassthrough(),\n        \&quot;timestamp\&quot;: RunnableLambda(lambda x: datetime.now().isoformat())\n    })\n\n    # 后处理：合并结果\n    def format_results(results):\n        return f\&quot;\&quot;\&quot;\n文本分析报告\n================\n原文：{results['original']['text']}\n时间：{results['timestamp']}\n\n情感分析：{results['sentiment']}\n关键词：{results['topics']}\n摘要：{results['summary']}\n\n统计信息：\n- 字数：{results['length_stats']['word_count']}\n- 字符数：{results['length_stats']['char_count']}\n- 句子数：{results['length_stats']['sentence_count']}\n\&quot;\&quot;\&quot;\n\n    final_chain = parallel_chain | RunnableLambda(format_results)\n\n    text = \&quot;今天参加了一个关于人工智能的会议，讨论了机器学习、深度学习和自然语言处理的最新进展。专家们分享了很多有趣的观点，让我对AI的未来发展有了更深的理解。\&quot;\n    \n    result = final_chain.invoke({\&quot;text\&quot;: text})\n    print(result)\n\n# ============================================================================\n# 4. RunnableBranch 复杂条件分支\n# ============================================================================\n\ndef complex_branch_example():\n    \&quot;\&quot;\&quot;复杂条件分支示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;4. 复杂条件分支\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 复杂条件判断函数\n    def is_technical_question(x):\n        technical_keywords = [\&quot;算法\&quot;, \&quot;编程\&quot;, \&quot;代码\&quot;, \&quot;技术\&quot;, \&quot;开发\&quot;, \&quot;API\&quot;, \&quot;数据库\&quot;]\n        return any(keyword in x[\&quot;text\&quot;] for keyword in technical_keywords)\n\n    def is_business_question(x):\n        business_keywords = [\&quot;市场\&quot;, \&quot;销售\&quot;, \&quot;客户\&quot;, \&quot;收入\&quot;, \&quot;成本\&quot;, \&quot;利润\&quot;, \&quot;商业\&quot;]\n        return any(keyword in x[\&quot;text\&quot;] for keyword in business_keywords)\n\n    def is_personal_question(x):\n        personal_keywords = [\&quot;我\&quot;, \&quot;个人\&quot;, \&quot;建议\&quot;, \&quot;帮助\&quot;, \&quot;怎么办\&quot;]\n        return any(keyword in x[\&quot;text\&quot;] for keyword in personal_keywords)\n\n    def get_text_complexity(x):\n        text = x[\&quot;text\&quot;]\n        return len(text.split()) &gt; 20  # 超过20词认为是复杂问题\n\n    # 创建不同类型的处理链\n    technical_chain = (\n        PromptTemplate.from_template(\&quot;\&quot;\&quot;\n作为技术专家，请详细回答这个技术问题：{text}\n\n请包括：\n1. 技术原理\n2. 实现方法\n3. 最佳实践\n\&quot;\&quot;\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    business_chain = (\n        PromptTemplate.from_template(\&quot;\&quot;\&quot;\n作为商业顾问，请分析这个商业问题：{text}\n\n请包括：\n1. 市场分析\n2. 风险评估\n3. 建议方案\n\&quot;\&quot;\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    personal_chain = (\n        PromptTemplate.from_template(\&quot;\&quot;\&quot;\n作为生活顾问，请给出贴心的建议：{text}\n\n请提供：\n1. 理解和共情\n2. 具体建议\n3. 鼓励话语\n\&quot;\&quot;\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    # 复杂问题需要更详细的分析\n    complex_analysis_chain = (\n        RunnablePassthrough.assign(\n            analysis=lambda x: (\n                PromptTemplate.from_template(\&quot;首先分析问题的核心要点：{text}\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnablePassthrough.assign(\n            detailed_response=lambda x: (\n                PromptTemplate.from_template(\&quot;\&quot;\&quot;\n基于分析：{analysis}\n\n请详细回答原问题：{text}\n\&quot;\&quot;\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnableLambda(lambda x: f\&quot;分析：{x['analysis']}\\n\\n详细回答：{x['detailed_response']}\&quot;)\n    )\n\n    simple_chain = (\n        PromptTemplate.from_template(\&quot;简洁回答：{text}\&quot;)\n        | llm | StrOutputParser()\n    )\n\n    # 创建嵌套分支\n    complexity_branch = RunnableBranch(\n        (get_text_complexity, complex_analysis_chain),\n        simple_chain\n    )\n\n    main_branch = RunnableBranch(\n        (is_technical_question, technical_chain),\n        (is_business_question, business_chain),\n        (is_personal_question, personal_chain),\n        complexity_branch  # 默认根据复杂度处理\n    )\n\n    # 测试不同类型的问题\n    test_questions = [\n        {\&quot;text\&quot;: \&quot;如何实现一个高效的排序算法？\&quot;},\n        {\&quot;text\&quot;: \&quot;我们公司的市场策略应该如何调整？\&quot;},\n        {\&quot;text\&quot;: \&quot;我最近工作压力很大，该怎么办？\&quot;},\n        {\&quot;text\&quot;: \&quot;什么是人工智能？\&quot;},\n        {\&quot;text\&quot;: \&quot;请详细解释深度学习的工作原理，包括反向传播算法、梯度下降优化、正则化技术，以及在计算机视觉和自然语言处理中的具体应用案例。\&quot;}\n    ]\n\n    for i, question in enumerate(test_questions, 1):\n        print(f\&quot;\\n问题{i}：{question['text']}\&quot;)\n        result = main_branch.invoke(question)\n        print(f\&quot;回答{i}：{result}\&quot;)\n        print(\&quot;-\&quot; * 40)\n\n# ============================================================================\n# 5. 自定义 Runnable 类\n# ============================================================================\n\nclass CustomTextProcessor(Runnable):\n    \&quot;\&quot;\&quot;自定义文本处理器\&quot;\&quot;\&quot;\n    \n    def __init__(self, processing_type: str = \&quot;default\&quot;):\n        self.processing_type = processing_type\n    \n    def invoke(self, input: Dict[str, Any], config: Optional[RunnableConfig] = None) -&gt; Dict[str, Any]:\n        text = input.get(\&quot;text\&quot;, \&quot;\&quot;)\n        \n        if self.processing_type == \&quot;uppercase\&quot;:\n            processed = text.upper()\n        elif self.processing_type == \&quot;reverse\&quot;:\n            processed = text[::-1]\n        elif self.processing_type == \&quot;word_count\&quot;:\n            processed = f\&quot;字数统计：{len(text.split())}词\&quot;\n        else:\n            processed = text.strip()\n        \n        return {\n            \&quot;original\&quot;: text,\n            \&quot;processed\&quot;: processed,\n            \&quot;type\&quot;: self.processing_type,\n            \&quot;timestamp\&quot;: datetime.now().isoformat()\n        }\n\ndef custom_runnable_example():\n    \&quot;\&quot;\&quot;自定义 Runnable 示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;5. 自定义 Runnable 类\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    # 创建不同类型的处理器\n    processors = {\n        \&quot;uppercase\&quot;: CustomTextProcessor(\&quot;uppercase\&quot;),\n        \&quot;reverse\&quot;: CustomTextProcessor(\&quot;reverse\&quot;),\n        \&quot;word_count\&quot;: CustomTextProcessor(\&quot;word_count\&quot;)\n    }\n\n    # 创建并行处理链\n    parallel_processing = RunnableParallel({\n        \&quot;uppercase_result\&quot;: processors[\&quot;uppercase\&quot;],\n        \&quot;reverse_result\&quot;: processors[\&quot;reverse\&quot;],\n        \&quot;count_result\&quot;: processors[\&quot;word_count\&quot;],\n        \&quot;original\&quot;: RunnablePassthrough()\n    })\n\n    test_text = {\&quot;text\&quot;: \&quot;Hello LangChain LCEL\&quot;}\n    result = parallel_processing.invoke(test_text)\n    \n    print(f\&quot;原文：{result['original']['text']}\&quot;)\n    print(f\&quot;大写处理：{result['uppercase_result']['processed']}\&quot;)\n    print(f\&quot;反转处理：{result['reverse_result']['processed']}\&quot;)\n    print(f\&quot;计数处理：{result['count_result']['processed']}\&quot;)\n\n# ============================================================================\n# 6. 流式处理高级示例\n# ============================================================================\n\ndef advanced_streaming_example():\n    \&quot;\&quot;\&quot;高级流式处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;6. 高级流式处理\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 创建流式处理链\n    prompt = PromptTemplate.from_template(\&quot;\&quot;\&quot;\n请详细解释以下概念，并给出实际应用例子：{topic}\n\n请按以下结构回答：\n1. 定义和基本概念\n2. 核心原理\n3. 实际应用\n4. 发展趋势\n\&quot;\&quot;\&quot;)\n\n    # 添加流式处理的元数据\n    def add_streaming_metadata(chunk):\n        return {\n            \&quot;content\&quot;: chunk,\n            \&quot;timestamp\&quot;: datetime.now().isoformat(),\n            \&quot;chunk_length\&quot;: len(chunk)\n        }\n\n    streaming_chain = (\n        prompt \n        | llm \n        | StrOutputParser()\n        | RunnableLambda(add_streaming_metadata)\n    )\n\n    print(\&quot;开始流式生成（带元数据）...\&quot;)\n    print(\&quot;主题：机器学习\&quot;)\n    print(\&quot;\\n回答：\&quot;)\n    \n    total_chunks = 0\n    total_length = 0\n    \n    for chunk_data in streaming_chain.stream({\&quot;topic\&quot;: \&quot;机器学习\&quot;}):\n        content = chunk_data[\&quot;content\&quot;]\n        print(content, end=\&quot;\&quot;, flush=True)\n        total_chunks += 1\n        total_length += chunk_data[\&quot;chunk_length\&quot;]\n    \n    print(f\&quot;\\n\\n流式处理完成！\&quot;)\n    print(f\&quot;总块数：{total_chunks}\&quot;)\n    print(f\&quot;总长度：{total_length}字符\&quot;)\n\n# ============================================================================\n# 7. 批量处理示例\n# ============================================================================\n\nasync def batch_processing_example():\n    \&quot;\&quot;\&quot;批量处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;7. 批量处理示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 创建批量处理链\n    prompt = PromptTemplate.from_template(\&quot;用一句话解释：{concept}\&quot;)\n    chain = prompt | llm | StrOutputParser()\n\n    # 准备批量数据\n    concepts = [\n        {\&quot;concept\&quot;: \&quot;人工智能\&quot;},\n        {\&quot;concept\&quot;: \&quot;机器学习\&quot;},\n        {\&quot;concept\&quot;: \&quot;深度学习\&quot;},\n        {\&quot;concept\&quot;: \&quot;自然语言处理\&quot;},\n        {\&quot;concept\&quot;: \&quot;计算机视觉\&quot;},\n        {\&quot;concept\&quot;: \&quot;强化学习\&quot;}\n    ]\n\n    print(\&quot;开始批量处理...\&quot;)\n    start_time = time.time()\n\n    # 同步批量处理\n    sync_results = chain.batch(concepts)\n    sync_time = time.time() - start_time\n\n    print(f\&quot;同步批量处理完成，耗时：{sync_time:.2f}秒\&quot;)\n\n    # 异步批量处理\n    start_time = time.time()\n    async_results = await chain.abatch(concepts)\n    async_time = time.time() - start_time\n\n    print(f\&quot;异步批量处理完成，耗时：{async_time:.2f}秒\&quot;)\n\n    # 显示结果\n    for i, (concept, sync_result, async_result) in enumerate(zip(concepts, sync_results, async_results), 1):\n        print(f\&quot;\\n概念{i}：{concept['concept']}\&quot;)\n        print(f\&quot;同步结果：{sync_result}\&quot;)\n        print(f\&quot;异步结果：{async_result}\&quot;)\n\n# ============================================================================\n# 8. 错误处理和重试机制\n# ============================================================================\n\ndef error_handling_example():\n    \&quot;\&quot;\&quot;错误处理和重试机制示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;8. 错误处理和重试机制\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟可能失败的处理函数\n    def risky_processing(x):\n        import random\n        if random.random() &lt; 0.3:  # 30% 失败率\n            raise Exception(\&quot;模拟处理失败\&quot;)\n        return {\&quot;processed\&quot;: f\&quot;成功处理：{x['text']}\&quot;, \&quot;status\&quot;: \&quot;success\&quot;}\n\n    # 重试装饰器\n    def with_retry(func, max_retries=3):\n        def wrapper(x):\n            for attempt in range(max_retries):\n                try:\n                    return func(x)\n                except Exception as e:\n                    if attempt == max_retries - 1:\n                        return {\&quot;error\&quot;: str(e), \&quot;status\&quot;: \&quot;failed\&quot;, \&quot;attempts\&quot;: attempt + 1}\n                    print(f\&quot;尝试 {attempt + 1} 失败：{e}\&quot;)\n            return {\&quot;error\&quot;: \&quot;最大重试次数已达到\&quot;, \&quot;status\&quot;: \&quot;failed\&quot;}\n        return wrapper\n\n    # 创建带错误处理的链\n    safe_processing = RunnableLambda(with_retry(risky_processing))\n    \n    # 备用处理链\n    fallback_chain = RunnableLambda(lambda x: {\n        \&quot;processed\&quot;: f\&quot;备用处理：{x['text']}\&quot;, \n        \&quot;status\&quot;: \&quot;fallback\&quot;\n    })\n\n    # 主处理链\n    main_chain = (\n        RunnablePassthrough.assign(result=safe_processing)\n        | RunnableLambda(lambda x: \n            x[\&quot;result\&quot;] if x[\&quot;result\&quot;][\&quot;status\&quot;] != \&quot;failed\&quot; \n            else {**x, \&quot;result\&quot;: fallback_chain.invoke(x)}\n        )\n    )\n\n    # 测试错误处理\n    test_inputs = [\n        {\&quot;text\&quot;: \&quot;测试文本1\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本2\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本3\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本4\&quot;},\n        {\&quot;text\&quot;: \&quot;测试文本5\&quot;}\n    ]\n\n    for i, input_data in enumerate(test_inputs, 1):\n        result = main_chain.invoke(input_data)\n        print(f\&quot;输入{i}：{input_data['text']}\&quot;)\n        print(f\&quot;结果{i}：{result['result']}\&quot;)\n        print(f\&quot;状态{i}：{result['result']['status']}\&quot;)\n        print(\&quot;-\&quot; * 30)\n\n# ============================================================================\n# 9. 动态链构建\n# ============================================================================\n\ndef dynamic_chain_example():\n    \&quot;\&quot;\&quot;动态链构建示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;9. 动态链构建\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    def build_dynamic_chain(processing_steps: List[str]):\n        \&quot;\&quot;\&quot;根据配置动态构建处理链\&quot;\&quot;\&quot;\n        \n        # 定义可用的处理步骤\n        available_steps = {\n            \&quot;sentiment\&quot;: PromptTemplate.from_template(\&quot;分析情感：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;summary\&quot;: PromptTemplate.from_template(\&quot;总结：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;translate\&quot;: PromptTemplate.from_template(\&quot;翻译成英文：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;keywords\&quot;: PromptTemplate.from_template(\&quot;提取关键词：{text}\&quot;) | llm | StrOutputParser(),\n            \&quot;length\&quot;: RunnableLambda(lambda x: f\&quot;长度：{len(x['text'])}字符\&quot;)\n        }\n\n        # 构建并行处理\n        parallel_steps = {}\n        for step in processing_steps:\n            if step in available_steps:\n                parallel_steps[step] = available_steps[step]\n\n        if not parallel_steps:\n            return RunnableLambda(lambda x: {\&quot;error\&quot;: \&quot;没有有效的处理步骤\&quot;})\n\n        # 添加原文\n        parallel_steps[\&quot;original\&quot;] = RunnablePassthrough()\n\n        return RunnableParallel(parallel_steps)\n\n    # 测试不同的配置\n    configurations = [\n        [\&quot;sentiment\&quot;, \&quot;summary\&quot;],\n        [\&quot;translate\&quot;, \&quot;keywords\&quot;, \&quot;length\&quot;],\n        [\&quot;sentiment\&quot;, \&quot;summary\&quot;, \&quot;translate\&quot;, \&quot;keywords\&quot;],\n        [\&quot;invalid_step\&quot;]  # 测试错误情况\n    ]\n\n    test_text = {\&quot;text\&quot;: \&quot;今天天气很好，我和朋友们去公园散步，感觉很放松。\&quot;}\n\n    for i, config in enumerate(configurations, 1):\n        print(f\&quot;\\n配置{i}：{config}\&quot;)\n        chain = build_dynamic_chain(config)\n        result = chain.invoke(test_text)\n        \n        for key, value in result.items():\n            if key != \&quot;original\&quot;:\n                print(f\&quot;  {key}: {value}\&quot;)\n\n# ============================================================================\n# 10. 复杂数据流处理\n# ============================================================================\n\ndef complex_data_flow_example():\n    \&quot;\&quot;\&quot;复杂数据流处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;10. 复杂数据流处理\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟复杂的业务数据\n    business_data = {\n        \&quot;company\&quot;: \&quot;TechCorp\&quot;,\n        \&quot;quarter\&quot;: \&quot;Q3 2024\&quot;,\n        \&quot;revenue\&quot;: 1500000,\n        \&quot;expenses\&quot;: 1200000,\n        \&quot;employees\&quot;: 150,\n        \&quot;products\&quot;: [\n            {\&quot;name\&quot;: \&quot;AI助手\&quot;, \&quot;sales\&quot;: 800000, \&quot;growth\&quot;: 0.25},\n            {\&quot;name\&quot;: \&quot;数据分析平台\&quot;, \&quot;sales\&quot;: 500000, \&quot;growth\&quot;: 0.15},\n            {\&quot;name\&quot;: \&quot;云服务\&quot;, \&quot;sales\&quot;: 200000, \&quot;growth\&quot;: 0.35}\n        ],\n        \&quot;regions\&quot;: {\n            \&quot;北美\&quot;: {\&quot;revenue\&quot;: 600000, \&quot;growth\&quot;: 0.20},\n            \&quot;欧洲\&quot;: {\&quot;revenue\&quot;: 500000, \&quot;growth\&quot;: 0.18},\n            \&quot;亚洲\&quot;: {\&quot;revenue\&quot;: 400000, \&quot;growth\&quot;: 0.30}\n        }\n    }\n\n    # 数据预处理\n    def calculate_metrics(data):\n        profit = data[\&quot;revenue\&quot;] - data[\&quot;expenses\&quot;]\n        profit_margin = profit / data[\&quot;revenue\&quot;] * 100\n        revenue_per_employee = data[\&quot;revenue\&quot;] / data[\&quot;employees\&quot;]\n        \n        # 产品分析\n        best_product = max(data[\&quot;products\&quot;], key=lambda x: x[\&quot;sales\&quot;])\n        fastest_growing = max(data[\&quot;products\&quot;], key=lambda x: x[\&quot;growth\&quot;])\n        \n        # 地区分析\n        best_region = max(data[\&quot;regions\&quot;].items(), key=lambda x: x[1][\&quot;revenue\&quot;])\n        \n        return {\n            \&quot;financial_metrics\&quot;: {\n                \&quot;profit\&quot;: profit,\n                \&quot;profit_margin\&quot;: round(profit_margin, 2),\n                \&quot;revenue_per_employee\&quot;: round(revenue_per_employee, 2)\n            },\n            \&quot;product_insights\&quot;: {\n                \&quot;best_selling\&quot;: best_product[\&quot;name\&quot;],\n                \&quot;fastest_growing\&quot;: fastest_growing[\&quot;name\&quot;]\n            },\n            \&quot;regional_insights\&quot;: {\n                \&quot;top_region\&quot;: best_region[0],\n                \&quot;top_region_revenue\&quot;: best_region[1][\&quot;revenue\&quot;]\n            },\n            \&quot;original_data\&quot;: data\n        }\n\n    # 创建分析报告\n    def generate_analysis_prompt(metrics):\n        return f\&quot;\&quot;\&quot;\n请分析以下业务数据并生成专业报告：\n\n公司：{metrics['original_data']['company']}\n季度：{metrics['original_data']['quarter']}\n\n财务指标：\n- 收入：${metrics['original_data']['revenue']:,}\n- 支出：${metrics['original_data']['expenses']:,}\n- 利润：${metrics['financial_metrics']['profit']:,}\n- 利润率：{metrics['financial_metrics']['profit_margin']}%\n- 人均收入：${metrics['financial_metrics']['revenue_per_employee']:,}\n\n产品表现：\n- 最佳销售产品：{metrics['product_insights']['best_selling']}\n- 增长最快产品：{metrics['product_insights']['fastest_growing']}\n\n地区表现：\n- 最佳地区：{metrics['regional_insights']['top_region']}\n- 该地区收入：${metrics['regional_insights']['top_region_revenue']:,}\n\n请提供：\n1. 整体业务健康度评估\n2. 关键优势和风险点\n3. 改进建议\n\&quot;\&quot;\&quot;\n\n    # 构建复杂处理链\n    analysis_chain = (\n        RunnableLambda(calculate_metrics)\n        | RunnablePassthrough.assign(\n            analysis_prompt=RunnableLambda(generate_analysis_prompt)\n        )\n        | RunnablePassthrough.assign(\n            business_analysis=lambda x: (\n                PromptTemplate.from_template(\&quot;{analysis_prompt}\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnablePassthrough.assign(\n            executive_summary=lambda x: (\n                PromptTemplate.from_template(\&quot;\&quot;\&quot;\n基于以下分析，写一份执行摘要（不超过100字）：\n{business_analysis}\n\&quot;\&quot;\&quot;)\n                | llm | StrOutputParser()\n            ).invoke(x)\n        )\n        | RunnableLambda(lambda x: {\n            \&quot;company\&quot;: x[\&quot;original_data\&quot;][\&quot;company\&quot;],\n            \&quot;quarter\&quot;: x[\&quot;original_data\&quot;][\&quot;quarter\&quot;],\n            \&quot;key_metrics\&quot;: x[\&quot;financial_metrics\&quot;],\n            \&quot;insights\&quot;: {\n                \&quot;products\&quot;: x[\&quot;product_insights\&quot;],\n                \&quot;regions\&quot;: x[\&quot;regional_insights\&quot;]\n            },\n            \&quot;detailed_analysis\&quot;: x[\&quot;business_analysis\&quot;],\n            \&quot;executive_summary\&quot;: x[\&quot;executive_summary\&quot;],\n            \&quot;generated_at\&quot;: datetime.now().isoformat()\n        })\n    )\n\n    # 执行分析\n    result = analysis_chain.invoke(business_data)\n    \n    print(f\&quot;公司：{result['company']}\&quot;)\n    print(f\&quot;季度：{result['quarter']}\&quot;)\n    print(f\&quot;生成时间：{result['generated_at']}\&quot;)\n    print(\&quot;\\n关键指标：\&quot;)\n    for key, value in result['key_metrics'].items():\n        print(f\&quot;  {key}: {value}\&quot;)\n    \n    print(\&quot;\\n业务洞察：\&quot;)\n    print(f\&quot;  最佳产品：{result['insights']['products']['best_selling']}\&quot;)\n    print(f\&quot;  增长最快：{result['insights']['products']['fastest_growing']}\&quot;)\n    print(f\&quot;  最佳地区：{result['insights']['regions']['top_region']}\&quot;)\n    \n    print(f\&quot;\\n执行摘要：\\n{result['executive_summary']}\&quot;)\n    print(f\&quot;\\n详细分析：\\n{result['detailed_analysis']}\&quot;)\n\n# ============================================================================\n# 主函数\n# ============================================================================\n\nasync def main():\n    \&quot;\&quot;\&quot;运行所有示例\&quot;\&quot;\&quot;\n    print(\&quot;LangChain 0.3 LCEL 高级示例集合\&quot;)\n    print(\&quot;基于 LangChain 0.3.26 版本\&quot;)\n    print(\&quot;确保 Ollama 服务正在运行：http://localhost:11434\&quot;)\n\n    try:\n        # 运行所有同步示例\n        basic_operators_example()\n        advanced_passthrough_example()\n        complex_parallel_example()\n        complex_branch_example()\n        custom_runnable_example()\n        advanced_streaming_example()\n        error_handling_example()\n        dynamic_chain_example()\n        complex_data_flow_example()\n\n        # 运行异步示例\n        print(\&quot;\\n开始运行异步示例...\&quot;)\n        await batch_processing_example()\n\n        print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n        print(\&quot;所有高级示例运行完成！\&quot;)\n        print(\&quot;=\&quot; * 60)\n\n    except Exception as e:\n        print(f\&quot;运行出错：{e}\&quot;)\n        print(\&quot;请确保：\&quot;)\n        print(\&quot;1. Ollama 服务正在运行\&quot;)\n        print(\&quot;2. qwen2.5:3b 模型已下载\&quot;)\n        print(\&quot;3. 网络连接正常\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    asyncio.run(main())\n````\n\n## 更多专业应用示例\n\n````python path=langchain/Chains/LCEL_Professional_Examples.py mode=EDIT\n\&quot;\&quot;\&quot;\nLCEL 专业应用场景示例\n\&quot;\&quot;\&quot;\n\n# ============================================================================\n# 11. RAG（检索增强生成）系统\n# ============================================================================\n\ndef rag_system_example():\n    \&quot;\&quot;\&quot;RAG 系统示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;11. RAG 检索增强生成系统\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟文档数据库\n    documents = {\n        \&quot;doc1\&quot;: \&quot;人工智能是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。\&quot;,\n        \&quot;doc2\&quot;: \&quot;机器学习是人工智能的一个子集，它使计算机能够在没有明确编程的情况下学习和改进。\&quot;,\n        \&quot;doc3\&quot;: \&quot;深度学习是机器学习的一个分支，使用神经网络来模拟人脑的工作方式。\&quot;,\n        \&quot;doc4\&quot;: \&quot;自然语言处理是人工智能的一个领域，专注于计算机与人类语言之间的交互。\&quot;,\n        \&quot;doc5\&quot;: \&quot;计算机视觉是人工智能的一个分支，致力于让计算机能够理解和解释视觉信息。\&quot;\n    }\n\n    # 简单的检索函数\n    def retrieve_documents(query: str, top_k: int = 3):\n        \&quot;\&quot;\&quot;基于关键词匹配检索文档\&quot;\&quot;\&quot;\n        scores = {}\n        query_words = query.lower().split()\n        \n        for doc_id, content in documents.items():\n            score = sum(1 for word in query_words if word in content.lower())\n            if score &gt; 0:\n                scores[doc_id] = score\n        \n        # 返回得分最高的文档\n        sorted_docs = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n        return [documents[doc_id] for doc_id, _ in sorted_docs[:top_k]]\n\n    # 构建 RAG 链\n    retrieval_chain = RunnableLambda(lambda x: {\n        \&quot;query\&quot;: x[\&quot;query\&quot;],\n        \&quot;retrieved_docs\&quot;: retrieve_documents(x[\&quot;query\&quot;])\n    })\n\n    context_chain = RunnableLambda(lambda x: {\n        \&quot;query\&quot;: x[\&quot;query\&quot;],\n        \&quot;context\&quot;: \&quot;\\n\\n\&quot;.join([f\&quot;文档{i+1}: {doc}\&quot; for i, doc in enumerate(x[\&quot;retrieved_docs\&quot;])])\n    })\n\n    rag_prompt = PromptTemplate.from_template(\&quot;\&quot;\&quot;\n基于以下文档回答问题：\n\n{context}\n\n问题：{query}\n\n请基于提供的文档内容回答，如果文档中没有相关信息，请说明。\n\&quot;\&quot;\&quot;)\n\n    rag_chain = (\n        retrieval_chain\n        | context_chain\n        | rag_prompt\n        | llm\n        | StrOutputParser()\n    )\n\n    # 测试 RAG 系统\n    questions = [\n        {\&quot;query\&quot;: \&quot;什么是机器学习？\&quot;},\n        {\&quot;query\&quot;: \&quot;深度学习和机器学习有什么关系？\&quot;},\n        {\&quot;query\&quot;: \&quot;人工智能有哪些应用领域？\&quot;}\n    ]\n\n    for i, question in enumerate(questions, 1):\n        print(f\&quot;\\n问题{i}：{question['query']}\&quot;)\n        answer = rag_chain.invoke(question)\n        print(f\&quot;回答{i}：{answer}\&quot;)\n\n# ============================================================================\n# 12. 多模态处理链\n# ============================================================================\n\ndef multimodal_processing_example():\n    \&quot;\&quot;\&quot;多模态处理示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;12. 多模态处理链\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟不同类型的输入处理\n    def process_text_input(x):\n        return {\n            \&quot;type\&quot;: \&quot;text\&quot;,\n            \&quot;content\&quot;: x[\&quot;content\&quot;],\n            \&quot;word_count\&quot;: len(x[\&quot;content\&quot;].split()),\n            \&quot;language\&quot;: \&quot;中文\&quot; if any('\\u4e00' &lt;= char &lt;= '\\u9fff' for char in x[\&quot;content\&quot;]) else \&quot;英文\&quot;\n        }\n\n    def process_image_input(x):\n        # 模拟图像处理\n        return {\n            \&quot;type\&quot;: \&quot;image\&quot;,\n            \&quot;filename\&quot;: x[\&quot;content\&quot;],\n            \&quot;format\&quot;: x[\&quot;content\&quot;].split(\&quot;.\&quot;)[-1] if \&quot;.\&quot; in x[\&quot;content\&quot;] else \&quot;unknown\&quot;,\n            \&quot;description\&quot;: f\&quot;这是一个{x['content']}文件\&quot;\n        }\n\n    def process_audio_input(x):\n        # 模拟音频处理\n        return {\n            \&quot;type\&quot;: \&quot;audio\&quot;,\n            \&quot;filename\&quot;: x[\&quot;content\&quot;],\n            \&quot;duration\&quot;: \&quot;未知\&quot;,\n            \&quot;description\&quot;: f\&quot;这是一个音频文件：{x['content']}\&quot;\n        }\n\n    # 输入类型检测\n    def detect_input_type(x):\n        content = x[\&quot;content\&quot;].lower()\n        if content.endswith(('.jpg', '.png', '.gif', '.bmp')):\n            return \&quot;image\&quot;\n        elif content.endswith(('.mp3', '.wav', '.flac')):\n            return \&quot;audio\&quot;\n        else:\n            return \&quot;text\&quot;\n\n    # 创建多模态处理分支\n    multimodal_branch = RunnableBranch(\n        (lambda x: detect_input_type(x) == \&quot;image\&quot;, RunnableLambda(process_image_input)),\n        (lambda x: detect_input_type(x) == \&quot;audio\&quot;, RunnableLambda(process_audio_input)),\n        RunnableLambda(process_text_input)  # 默认文本处理\n    )\n\n    # 生成统一的分析报告\n    analysis_prompt = PromptTemplate.from_template(\&quot;\&quot;\&quot;\n请分析以下输入内容：\n\n类型：{type}\n内容：{content}\n详细信息：{details}\n\n请提供适合该类型内容的分析和建议。\n\&quot;\&quot;\&quot;)\n\n    def prepare_analysis_input(processed_data):\n        details = {k: v for k, v in processed_data.items() if k not in [\&quot;type\&quot;, \&quot;content\&quot;]}\n        return {\n            \&quot;type\&quot;: processed_data[\&quot;type\&quot;],\n            \&quot;content\&quot;: processed_data.get(\&quot;content\&quot;, processed_data.get(\&quot;filename\&quot;, \&quot;未知\&quot;)),\n            \&quot;details\&quot;: str(details)\n        }\n\n    multimodal_chain = (\n        multimodal_branch\n        | RunnableLambda(prepare_analysis_input)\n        | analysis_prompt\n        | llm\n        | StrOutputParser()\n    )\n\n    # 测试不同类型的输入\n    test_inputs = [\n        {\&quot;content\&quot;: \&quot;这是一段中文文本，用于测试多模态处理系统。\&quot;},\n        {\&quot;content\&quot;: \&quot;photo.jpg\&quot;},\n        {\&quot;content\&quot;: \&quot;music.mp3\&quot;},\n        {\&quot;content\&quot;: \&quot;This is an English text for testing.\&quot;}\n    ]\n\n    for i, input_data in enumerate(test_inputs, 1):\n        print(f\&quot;\\n输入{i}：{input_data['content']}\&quot;)\n        result = multimodal_chain.invoke(input_data)\n        print(f\&quot;分析{i}：{result}\&quot;)\n\n# ============================================================================\n# 13. 工作流编排系统\n# ============================================================================\n\ndef workflow_orchestration_example():\n    \&quot;\&quot;\&quot;工作流编排示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;13. 工作流编排系统\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 定义工作流步骤\n    class WorkflowStep:\n        def __init__(self, name: str, processor: Runnable):\n            self.name = name\n            self.processor = processor\n\n    # 数据验证步骤\n    def validate_data(x):\n        data = x.get(\&quot;data\&quot;, {})\n        errors = []\n        \n        if not data.get(\&quot;title\&quot;):\n            errors.append(\&quot;标题不能为空\&quot;)\n        if not data.get(\&quot;content\&quot;):\n            errors.append(\&quot;内容不能为空\&quot;)\n        if len(data.get(\&quot;content\&quot;, \&quot;\&quot;)) &lt; 10:\n            errors.append(\&quot;内容长度不能少于10字符\&quot;)\n        \n        return {\n            \&quot;data\&quot;: data,\n            \&quot;validation_errors\&quot;: errors,\n            \&quot;is_valid\&quot;: len(errors) == 0,\n            \&quot;step\&quot;: \&quot;validation\&quot;\n        }\n\n    # 内容处理步骤\n    def process_content(x):\n        if not x[\&quot;is_valid\&quot;]:\n            return {**x, \&quot;step\&quot;: \&quot;content_processing\&quot;, \&quot;processed_content\&quot;: None}\n        \n        content = x[\&quot;data\&quot;][\&quot;content\&quot;]\n        processed = {\n            \&quot;original_length\&quot;: len(content),\n            \&quot;word_count\&quot;: len(content.split()),\n            \&quot;has_keywords\&quot;: any(keyword in content.lower() for keyword in [\&quot;重要\&quot;, \&quot;紧急\&quot;, \&quot;优先\&quot;]),\n            \&quot;processed_at\&quot;: datetime.now().isoformat()\n        }\n        \n        return {\n            **x,\n            \&quot;step\&quot;: \&quot;content_processing\&quot;,\n            \&quot;processed_content\&quot;: processed\n        }\n\n    # AI 分析步骤\n    def ai_analysis(x):\n        if not x[\&quot;is_valid\&quot;] or not x[\&quot;processed_content\&quot;]:\n            return {**x, \&quot;step\&quot;: \&quot;ai_analysis\&quot;, \&quot;ai_result\&quot;: None}\n        \n        analysis_prompt = f\&quot;\&quot;\&quot;\n分析以下内容：\n标题：{x['data']['title']}\n内容：{x['data']['content']}\n\n请提供：\n1. 内容摘要\n2. 情感分析\n3. 重要程度评级（1-5）\n\&quot;\&quot;\&quot;\n        \n        ai_result = (\n            PromptTemplate.from_template(analysis_prompt)\n            | llm\n            | StrOutputParser()\n        ).invoke({})\n        \n        return {\n            **x,\n            \&quot;step\&quot;: \&quot;ai_analysis\&quot;,\n            \&quot;ai_result\&quot;: ai_result\n        }\n\n    # 结果汇总步骤\n    def summarize_results(x):\n        summary = {\n            \&quot;workflow_id\&quot;: str(uuid.uuid4())[:8],\n            \&quot;completed_at\&quot;: datetime.now().isoformat(),\n            \&quot;status\&quot;: \&quot;success\&quot; if x[\&quot;is_valid\&quot;] else \&quot;failed\&quot;,\n            \&quot;validation_errors\&quot;: x.get(\&quot;validation_errors\&quot;, []),\n            \&quot;content_stats\&quot;: x.get(\&quot;processed_content\&quot;),\n            \&quot;ai_analysis\&quot;: x.get(\&quot;ai_result\&quot;),\n            \&quot;original_data\&quot;: x[\&quot;data\&quot;]\n        }\n        \n        return {**x, \&quot;step\&quot;: \&quot;summary\&quot;, \&quot;final_result\&quot;: summary}\n\n    # 构建工作流链\n    workflow_chain = (\n        RunnableLambda(validate_data)\n        | RunnableLambda(process_content)\n        | RunnableLambda(ai_analysis)\n        | RunnableLambda(summarize_results)\n    )\n\n    # 测试工作流\n    test_cases = [\n        {\n            \&quot;data\&quot;: {\n                \&quot;title\&quot;: \&quot;重要会议通知\&quot;,\n                \&quot;content\&quot;: \&quot;明天上午10点在会议室A召开重要的项目讨论会议，请所有相关人员准时参加。\&quot;\n            }\n        },\n        {\n            \&quot;data\&quot;: {\n                \&quot;title\&quot;: \&quot;\&quot;,  # 无效数据\n                \&quot;content\&quot;: \&quot;短内容\&quot;\n            }\n        },\n        {\n            \&quot;data\&quot;: {\n                \&quot;title\&quot;: \&quot;日常工作报告\&quot;,\n                \&quot;content\&quot;: \&quot;今天完成了数据分析任务，发现了一些有趣的趋势。团队协作良好，项目进展顺利。明天计划继续优化算法性能。\&quot;\n            }\n        }\n    ]\n\n    for i, test_case in enumerate(test_cases, 1):\n        print(f\&quot;\\n工作流{i}：\&quot;)\n        print(f\&quot;输入：{test_case['data']}\&quot;)\n        \n        result = workflow_chain.invoke(test_case)\n        final_result = result[\&quot;final_result\&quot;]\n        \n        print(f\&quot;工作流ID：{final_result['workflow_id']}\&quot;)\n        print(f\&quot;状态：{final_result['status']}\&quot;)\n        \n        if final_result[\&quot;validation_errors\&quot;]:\n            print(f\&quot;验证错误：{final_result['validation_errors']}\&quot;)\n        \n        if final_result[\&quot;content_stats\&quot;]:\n            print(f\&quot;内容统计：{final_result['content_stats']}\&quot;)\n        \n        if final_result[\&quot;ai_analysis\&quot;]:\n            print(f\&quot;AI分析：{final_result['ai_analysis']}\&quot;)\n\n# ============================================================================\n# 14. 实时数据处理管道\n# ============================================================================\n\ndef realtime_pipeline_example():\n    \&quot;\&quot;\&quot;实时数据处理管道示例\&quot;\&quot;\&quot;\n    print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n    print(\&quot;14. 实时数据处理管道\&quot;)\n    print(\&quot;=\&quot; * 60)\n\n    llm = create_llm()\n\n    # 模拟实时数据源\n    def generate_realtime_data():\n        import random\n        data_types = [\&quot;user_action\&quot;, \&quot;system_event\&quot;, \&quot;error_log\&quot;, \&quot;performance_metric\&quot;]\n        \n        return {\n            \&quot;timestamp\&quot;: datetime.now().isoformat(),\n            \&quot;type\&quot;: random.choice(data_types),\n            \&quot;user_id\&quot;: f\&quot;user_{random.randint(1000, 9999)}\&quot;,\n            \&quot;value\&quot;: random.randint(1, 100),\n            \&quot;message\&quot;: f\&quot;随机事件消息 {random.randint(1, 1000)}\&quot;\n        }\n\n    # 数据过滤器\n    def filter_data(x):\n        # 过滤掉低价值数据\n        if x[\&quot;value\&quot;] &lt; 20:\n            return None\n        return x\n\n    # 数据增强\n    def enrich_data(x):\n        if x is None:\n            return None\n        \n        # 添加计算字段\n        x[\&quot;priority\&quot;] = \&quot;high\&quot; if x[\&quot;value\&quot;] &gt; 80 else \&quot;medium\&quot; if x[\&quot;value\&quot;] &gt; 50 else \&quot;low\&quot;\n        x[\&quot;category\&quot;] = x[\&quot;type\&quot;].replace(\&quot;_\&quot;, \&quot; \&quot;).title()\n        x[\&quot;processed_at\&quot;] = datetime.now().isoformat()\n        \n        return x\n\n    # 异常检测\n    def detect_anomalies(x):\n        if x is None:\n            return None\n        \n        # 简单的异常检测逻辑\n        is_anomaly = (\n            x[\&quot;type\&quot;] == \&quot;error_log\&quot; or \n            x[\&quot;value\&quot;] &gt; 95 or \n            \&quot;error\&quot; in x[\&quot;message\&quot;].lower()\n        )\n        \n        x[\&quot;is_anomaly\&quot;] = is_anomaly\n        x[\&quot;alert_level\&quot;] = \&quot;critical\&quot; if is_anomaly else \&quot;normal\&quot;\n        \n        return x\n\n    # AI 分析（仅对异常数据）\n    def ai_analyze_if_needed(x):\n        if x is None or not x.get(\&quot;is_anomaly\&quot;):\n            return x\n        \n        analysis_prompt = f\&quot;\&quot;\&quot;\n分析以下异常事件：\n类型：{x['type']}\n用户：{x['user_id']}\n数值：{x['value']}\n消息：{x['message']}\n优先级：{x['priority']}\n\n请提供：\n1. 可能的原因\n2. 建议的处理方案\n3. 风险评估\n\&quot;\&quot;\&quot;\n        \n        try:\n            ai_analysis = (\n                PromptTemplate.from_template(analysis_prompt)\n                | llm\n                | StrOutputParser()\n            ).invoke({})\n            x[\&quot;ai_analysis\&quot;] = ai_analysis\n        except Exception as e:\n            x[\&quot;ai_analysis\&quot;] = f\&quot;AI分析失败：{e}\&quot;\n        \n        return x\n\n    # 构建实时处理管道\n    pipeline = (\n        RunnableLambda(filter_data)\n        | RunnableLambda(enrich_data)\n        | RunnableLambda(detect_anomalies)\n        | RunnableLambda(ai_analyze_if_needed)\n    )\n\n    # 模拟实时数据流处理\n    print(\&quot;开始实时数据处理...\&quot;)\n    processed_count = 0\n    anomaly_count = 0\n    \n    for i in range(10):  # 处理10条数据\n        raw_data = generate_realtime_data()\n        print(f\&quot;\\n原始数据{i+1}：{raw_data}\&quot;)\n        \n        result = pipeline.invoke(raw_data)\n        \n        if result is not None:\n            processed_count += 1\n            print(f\&quot;处理结果：优先级={result['priority']}, 异常={result['is_anomaly']}\&quot;)\n            \n            if result.get(\&quot;is_anomaly\&quot;):\n                anomaly_count += 1\n                print(f\&quot;异常分析：{result.get('ai_analysis', '无')}\&quot;)\n        else:\n            print(\&quot;数据被过滤\&quot;)\n    \n    print(f\&quot;\\n处理统计：\&quot;)\n    print(f\&quot;总处理数据：{processed_count}\&quot;)\n    print(f\&quot;检测到异常：{anomaly_count}\&quot;)\n\n# 运行专业示例\ndef run_professional_examples():\n    \&quot;\&quot;\&quot;运行专业应用示例\&quot;\&quot;\&quot;\n    print(\&quot;LCEL 专业应用场景示例\&quot;)\n    print(\&quot;=\&quot; * 60)\n    \n    try:\n        rag_system_example()\n        multimodal_processing_example()\n        workflow_orchestration_example()\n        realtime_pipeline_example()\n        \n        print(\&quot;\\n\&quot; + \&quot;=\&quot; * 60)\n        print(\&quot;所有专业示例运行完成！\&quot;)\n        print(\&quot;=\&quot; * 60)\n        \n    except Exception as e:\n        print(f\&quot;运行出错：{e}\&quot;)\n\nif __name__ == \&quot;__main__\&quot;:\n    run_professional_examples()\n````\n\n## LCEL 最佳实践总结\n\n### 1. **选择合适的组合方式**\n- 简单链：使用 `|` 操作符\n- 并行处理：使用 `RunnableParallel`\n- 条件分支：使用 `RunnableBranch`\n- 数据传递：使用 `RunnablePassthrough`\n\n### 2. **性能优化**\n- 利用批量处理：`batch()` 和 `abatch()`\n- 使用流式处理：`stream()` 和 `astream()`\n- 合理使用并行：避免不必要的串行处理\n\n### 3. **错误处理**\n- 实现重试机制\n- 提供备用处理链\n- 优雅的错误降级\n\n### 4. **可维护性**\n- 模块化设计：将复杂逻辑拆分为小的 Runnable\n- 清晰的数据流：使用 `RunnablePassthrough.assign` 管理状态\n- 充分的日志和监控\n\n### 5. **扩展性**\n- 动态链构建：根据配置构建不同的处理链\n- 插件化架构：易于添加新的处理步骤\n- 标准化接口：所有组件都实现 `Runnable` 接口\n\nLCEL 为构建复杂的 AI 应用提供了强大而灵活的框架，通过合理使用这些模式，可以构建出高性能、可维护的应用系统。\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;554&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;554&quot;,&quot;char_end&quot;:&quot;980&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;980&quot;,&quot;char_end&quot;:&quot;1398&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;1398&quot;,&quot;char_end&quot;:&quot;2132&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;2132&quot;,&quot;char_end&quot;:&quot;2989&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;2989&quot;,&quot;char_end&quot;:&quot;3582&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;3582&quot;,&quot;char_end&quot;:&quot;3869&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;3869&quot;,&quot;char_end&quot;:&quot;4641&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;4641&quot;,&quot;char_end&quot;:&quot;5408&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;5408&quot;,&quot;char_end&quot;:&quot;6154&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;6154&quot;,&quot;char_end&quot;:&quot;6575&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;6575&quot;,&quot;char_end&quot;:&quot;7268&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;7268&quot;,&quot;char_end&quot;:&quot;8002&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;8002&quot;,&quot;char_end&quot;:&quot;8531&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;8531&quot;,&quot;char_end&quot;:&quot;9293&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;9293&quot;,&quot;char_end&quot;:&quot;10071&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;10071&quot;,&quot;char_end&quot;:&quot;10485&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;10485&quot;,&quot;char_end&quot;:&quot;11341&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;11341&quot;,&quot;char_end&quot;:&quot;12015&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;12015&quot;,&quot;char_end&quot;:&quot;12970&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;12970&quot;,&quot;char_end&quot;:&quot;13321&quot;,&quot;blob_name&quot;:&quot;ad97226ca729637a4223982f55916a77e89aee0a2aa934baebe28fb117685bc4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/LCELChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;491&quot;,&quot;char_end&quot;:&quot;1190&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;1991&quot;,&quot;char_end&quot;:&quot;2403&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;3326&quot;,&quot;char_end&quot;:&quot;3706&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;12093&quot;,&quot;char_end&quot;:&quot;13158&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;14802&quot;,&quot;char_end&quot;:&quot;15912&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;17852&quot;,&quot;char_end&quot;:&quot;18569&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;20336&quot;,&quot;char_end&quot;:&quot;21180&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;23946&quot;,&quot;char_end&quot;:&quot;24934&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;26068&quot;,&quot;char_end&quot;:&quot;26999&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;27271&quot;,&quot;char_end&quot;:&quot;27999&quot;,&quot;blob_name&quot;:&quot;0e588d7af910c46d8f20b33f4192b4c79af14e880ecbe96e2471853b1cc491db&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LCEL_memory_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;641&quot;,&quot;blob_name&quot;:&quot;8fc7cf7e1b8668a9a3846abf66609b4f79f6f1a5ab426d4add72ee29383c9ecb&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/TraditionalChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;1016&quot;,&quot;char_end&quot;:&quot;1466&quot;,&quot;blob_name&quot;:&quot;8fc7cf7e1b8668a9a3846abf66609b4f79f6f1a5ab426d4add72ee29383c9ecb&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/Chains/TraditionalChain.ipynb&quot;}},{&quot;char_start&quot;:&quot;12924&quot;,&quot;char_end&quot;:&quot;13476&quot;,&quot;blob_name&quot;:&quot;997bed1cb09b235b9824a87e84a5e876a69c6123024a4301d471d2ee5546b355&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/modelIo/StructOutput.ipynb&quot;}},{&quot;char_start&quot;:&quot;32494&quot;,&quot;char_end&quot;:&quot;33235&quot;,&quot;blob_name&quot;:&quot;675bab365c2ad08e6148e78acf95281e1e91127a10d47da5ff17c7137126493b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;langchain/memory/chains_momery_chat.ipynb&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;741&quot;,&quot;blob_name&quot;:&quot;d1a43ca2ed872412603ea315d12d51a4a6e6606dfdf990fd6cca3ea98ab7daea&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;memoryChat/LangGraph_memory_chat.ipynb&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-5d7685d9-a32d-4d31-acd7-16484bcfa657&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false,&quot;isAgentConversation&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;28f26e26-9119-43e8-a865-6a66a646b0d6&quot;,&quot;draftActiveContextIds&quot;:[&quot;/:L0-46&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/dataConnection/dataConnetction.ipynb&quot;,&quot;docset://langchain~0.3&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBookfalse&quot;,&quot;userGuidelines&quot;]},&quot;61bcb154-bd3f-4b33-a8b7-da9cea561585&quot;:{&quot;id&quot;:&quot;61bcb154-bd3f-4b33-a8b7-da9cea561585&quot;,&quot;createdAtIso&quot;:&quot;2025-07-22T16:11:21.464Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-22T16:11:23.132Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;sent&quot;,&quot;request_id&quot;:&quot;temp-fe-dfad3990-822c-4bb3-a6d4-77e26a87aa7c&quot;,&quot;request_message&quot;:&quot;---------------------------------------------------------------------------\r\nPermissionError                           Traceback (most recent call last)\r\nCell In[15], line 3\r\n      1 if __name__ == \&quot;__main__\&quot;:\r\n      2     # 运行同步示例\r\n----&gt; 3     main()\r\n      5     # 运行异步示例\r\n      6     # asyncio.run(performance_optimization_example())\r\n\r\nCell In[14], line 31, in main()\r\n     28 print(\&quot;\\n 所有示例运行完成！\&quot;)\r\n     30 # 清理临时文件\r\n---&gt; 31 cleanup_files()\r\n\r\nCell In[14], line 47, in cleanup_files()\r\n     45 for dir in dirs_to_remove:\r\n     46     if os.path.exists(dir):\r\n---&gt; 47         shutil.rmtree(dir)\r\n     49 print(\&quot; 临时文件已清理\&quot;)\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:758, in rmtree(path, ignore_errors, onerror, dir_fd)\r\n    756     # can't continue even if onerror hook returns\r\n    757     return\r\n--&gt; 758 return _rmtree_unsafe(path, onerror)\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:616, in _rmtree_unsafe(path, onerror)\r\n    614         onerror(os.path.islink, fullname, sys.exc_info())\r\n    615         continue\r\n--&gt; 616     _rmtree_unsafe(fullname, onerror)\r\n    617 else:\r\n    618     try:\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:621, in _rmtree_unsafe(path, onerror)\r\n    619             os.unlink(fullname)\r\n    620         except OSError:\r\n--&gt; 621             onerror(os.unlink, fullname, sys.exc_info())\r\n    622 try:\r\n    623     os.rmdir(path)\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:619, in _rmtree_unsafe(path, onerror)\r\n    617 else:\r\n    618     try:\r\n--&gt; 619         os.unlink(fullname)\r\n    620     except OSError:\r\n    621         onerror(os.unlink, fullname, sys.exc_info())\r\n\r\nPermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'chroma_db\\\\44933678-68e8-40b1-b8d1-9afc146a6630\\\\data_level0.bin'&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---------------------------------------------------------------------------\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;PermissionError                           Traceback (most recent call last)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Cell In[15], line 3\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;      1 if __name__ == \&quot;__main__\&quot;:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;      2     # 运行同步示例\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;----&gt; 3     main()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;      5     # 运行异步示例\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;      6     # asyncio.run(performance_optimization_example())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Cell In[14], line 31, in main()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     28 print(\&quot;\\n 所有示例运行完成！\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     30 # 清理临时文件\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---&gt; 31 cleanup_files()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Cell In[14], line 47, in cleanup_files()\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     45 for dir in dirs_to_remove:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     46     if os.path.exists(dir):\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;---&gt; 47         shutil.rmtree(dir)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;     49 print(\&quot; 临时文件已清理\&quot;)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:758, in rmtree(path, ignore_errors, onerror, dir_fd)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    756     # can't continue even if onerror hook returns\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    757     return\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 758 return _rmtree_unsafe(path, onerror)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:616, in _rmtree_unsafe(path, onerror)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    614         onerror(os.path.islink, fullname, sys.exc_info())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    615         continue\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 616     _rmtree_unsafe(fullname, onerror)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    617 else:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    618     try:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:621, in _rmtree_unsafe(path, onerror)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    619             os.unlink(fullname)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    620         except OSError:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 621             onerror(os.unlink, fullname, sys.exc_info())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    622 try:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    623     os.rmdir(path)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;File ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:619, in _rmtree_unsafe(path, onerror)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    617 else:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    618     try:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;--&gt; 619         os.unlink(fullname)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    620     except OSError:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    621         onerror(os.unlink, fullname, sys.exc_info())\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;PermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'chroma_db\\\\44933678-68e8-40b1-b8d1-9afc146a6630\\\\data_level0.bin'&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;seen_state&quot;:&quot;unseen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;---------------------------------------------------------------------------\r\nPermissionError                           Traceback (most recent call last)\r\nCell In[15], line 3\r\n      1 if __name__ == \&quot;__main__\&quot;:\r\n      2     # 运行同步示例\r\n----&gt; 3     main()\r\n      5     # 运行异步示例\r\n      6     # asyncio.run(performance_optimization_example())\r\n\r\nCell In[14], line 31, in main()\r\n     28 print(\&quot;\\n 所有示例运行完成！\&quot;)\r\n     30 # 清理临时文件\r\n---&gt; 31 cleanup_files()\r\n\r\nCell In[14], line 47, in cleanup_files()\r\n     45 for dir in dirs_to_remove:\r\n     46     if os.path.exists(dir):\r\n---&gt; 47         shutil.rmtree(dir)\r\n     49 print(\&quot; 临时文件已清理\&quot;)\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:758, in rmtree(path, ignore_errors, onerror, dir_fd)\r\n    756     # can't continue even if onerror hook returns\r\n    757     return\r\n--&gt; 758 return _rmtree_unsafe(path, onerror)\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:616, in _rmtree_unsafe(path, onerror)\r\n    614         onerror(os.path.islink, fullname, sys.exc_info())\r\n    615         continue\r\n--&gt; 616     _rmtree_unsafe(fullname, onerror)\r\n    617 else:\r\n    618     try:\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:621, in _rmtree_unsafe(path, onerror)\r\n    619             os.unlink(fullname)\r\n    620         except OSError:\r\n--&gt; 621             onerror(os.unlink, fullname, sys.exc_info())\r\n    622 try:\r\n    623     os.rmdir(path)\r\n\r\nFile ~\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:619, in _rmtree_unsafe(path, onerror)\r\n    617 else:\r\n    618     try:\r\n--&gt; 619         os.unlink(fullname)\r\n    620     except OSError:\r\n    621         onerror(os.unlink, fullname, sys.exc_info())\r\n\r\nPermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'chroma_db\\\\44933678-68e8-40b1-b8d1-9afc146a6630\\\\data_level0.bin'&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;,&quot;folderRoot&quot;:&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-22T16:11:23.146Z&quot;}],&quot;feedbackStates&quot;:{&quot;temp-fe-dfad3990-822c-4bb3-a6d4-77e26a87aa7c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;/:L0-46&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBook/langchain/dataConnection/dataConnetction.ipynb&quot;,&quot;D:/javaDevelopment/program_project/Pycharm_project/LangChainNoteBookfalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false,&quot;isAgentConversation&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;ad6caa7d-fe7b-4bdb-a280-75a9bee0efb6&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[],&quot;sortConversationsBy&quot;:&quot;lastMessageTimestamp&quot;,&quot;sendMode&quot;:&quot;send&quot;}" />
      </map>
    </option>
  </component>
</project>